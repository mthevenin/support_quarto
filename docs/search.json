[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Formation Quarto",
    "section": "",
    "text": "Présentation\n\n\n\n\n\nPosit & Quarto\n\n\nQuelques informations sur le changement de nom de RStudio (l’entreprise) et la sortie du logiciel Quarto en juillet 2022\n\n\n\n\nLes plus et les moins\n\n\nSurtout des gros plus et encore quelques petits moins \n\n\n\n\nLe support & les ressources\n\n\nPrésentation encore succinte du support: les extensions utilisées, les ressources externes et les mises à jour.",
    "crumbs": [
      "**Présentation**"
    ]
  },
  {
    "objectID": "011-quarto.html",
    "href": "011-quarto.html",
    "title": "1  Installation Quarto et gestion des fichiers",
    "section": "",
    "text": "1.1 Installation et mise à jour de Quarto\nAprès cela aucune opération d’installation ou de désinstallation n’est nécessaire: ce n’est pas un package, mais un logiciel à part entière exécutable dans une interface.",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation Quarto et gestion des fichiers</span>"
    ]
  },
  {
    "objectID": "011-quarto.html#installation-et-mise-à-jour-de-quarto",
    "href": "011-quarto.html#installation-et-mise-à-jour-de-quarto",
    "title": "1  Installation Quarto et gestion des fichiers",
    "section": "",
    "text": "Depuis juillet 2022, Quarto est installé automatiquement à RStudio.\nLes mises à jour de Quarto se font directement sur le site officiel.\n\n\n\nDepuis le site officiel, il est possible de:\n\nInstaller la version courante de Quarto si la version de Rstudio n’a pas été encore mise à jour.\nRéinstaller une version antérieure si la version courante à été désinstaller.\nInstaller une pre-release. Cela n’est pas conseillé.\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://quarto.org/docs/get-started/\n\n\n\n\n \n\n\n\n\n\nhttps://quarto.org/docs/download/\n\n\n\n\n\n\n\nLa désinstallation de quarto est effectuée via une application: outil d’installation/désinstallation de l’OS, ccleaner…",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation Quarto et gestion des fichiers</span>"
    ]
  },
  {
    "objectID": "011-quarto.html#autres-installations",
    "href": "011-quarto.html#autres-installations",
    "title": "1  Installation Quarto et gestion des fichiers",
    "section": "1.2 Autres installations",
    "text": "1.2 Autres installations\n\n1.2.1 Le package R de quarto\n\nLe package R Quarto1 permet de faire quelques opérations à partir de la console R: vérification de la version de Quarto installée, compilation d’un document… Quarto étant un logiciel, son installation est plutôt accessoire.\n\ninstall.packages(\"quarto\")\nlibrary(quarto)\n\n\n\nVerifier la version de Quarto\n\nlibrary(quarto)\nquarto_version()\n\n\n[1] '1.5.41'\n\n\n\n\nCompiler un fichier Quarto à partir de la console\n\nquarto::quarto_render(\"filename.qmd\")\n\n\n\n1.2.2 Tinytex\nPour les sorties en format PDF, dont les présentations en format beamer, installer un compilateur Latex comme tinytex (recommandé).\nMéthode 1\n\nInstallation du package via la console R\n\n\n\n\nInstallation R console\n\ninstall.packages(\"tinytex\")\n\n\nMéthode 2\nDans le terminal (recommandé):\n\n\n\nInstallation recommandée: terminal\n\n# Click droit pour coller dans le terminal ou ctrl+shift+V\nquarto install tinytex\n\n\n\nPour vérifier la version de tinytex, dans le terminal: quarto list tools\nPour en savoir plus sur les moteurs PDF: [documentation Quarto]\n\nOn peut également checker toutes linstallations utilisées par Quarto avec quarto check\n\n\n\n\n\n\nInstallations au 06-06-2024\n\n\n\n\n\n\nquarto check\n[&gt;] Checking versions of quarto binary dependencies...\n      Pandoc version 3.2.0: OK\n      Dart Sass version 1.70.0: OK\n      Deno version 1.41.0: OK\n      Typst version 0.11.0: OK\n[&gt;] Checking versions of quarto dependencies......OK\n[&gt;] Checking Quarto installation......OK\n      Version: 1.5.41\n      Path: C:\\Users\\thevenin_m\\AppData\\Local\\Programs\\Quarto\\bin\n      CodePage: 1252\n\n[&gt;] Checking tools....................OK\n      TinyTeX: v2024.06\n      Chromium: 869685\n\n[&gt;] Checking LaTeX....................OK\n      Using: TinyTex\n      Path: C:\\Users\\thevenin_m\\AppData\\Roaming\\TinyTeX\\bin\\windows\\\n      Version: 2024\n\n[&gt;] Checking basic markdown render....OK\n\n[&gt;] Checking Python 3 installation....OK\n      Version: 3.12.3\n      Path: C:/Users/thevenin_m/AppData/Local/Programs/Python/Python312/python.exe\n      Jupyter: 5.7.2\n      Kernels: ir, nbstata, python3\n\n[&gt;] Checking Jupyter engine render....OK\n\n[&gt;] Checking R installation...........OK\n      Version: 4.4.0\n      Path: C:/Users/thevenin_m/AppData/Local/Programs/R/R-4.4.0\n      LibPaths:\n        - C:/Users/thevenin_m/AppData/Local/Programs/R/R-4.4.0/library\n      knitr: 1.47\n      rmarkdown: 2.27\n\n[&gt;] Checking Knitr engine render......OK",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation Quarto et gestion des fichiers</span>"
    ]
  },
  {
    "objectID": "011-quarto.html#création-dun-fichier-qmd",
    "href": "011-quarto.html#création-dun-fichier-qmd",
    "title": "1  Installation Quarto et gestion des fichiers",
    "section": "1.3 Création d’un fichier qmd",
    "text": "1.3 Création d’un fichier qmd\nLorsque Quarto est installé, le menu file de RStudio ajoute deux options supplémentaires au sous menu new file: Quarto document, Quarto presentation.\n\nQuarto document:\n\nNotebook, article .\nDocuments intéractifs:\n\nShiny .\nObservable .\nA partir de la version 1.4, un Dashboard .\n\n\nQuarto presentation:\n\nRevealjs (javascript): .\nBeamer (Latex): .\nPowerpoint (windows ou libre office) .\n\nA l’ouverture:\n\nun fichier .qmd minimal avec quelques éléments de texte formatés en markdown ainsi qu’un bloc de codes exécutable est créé. Selon les options renseignées dans la fenêtre de création, il comporte un Header (yaml) avec par exemple un titre, un nom, un format.",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation Quarto et gestion des fichiers</span>"
    ]
  },
  {
    "objectID": "011-quarto.html#création-dun-projet",
    "href": "011-quarto.html#création-dun-projet",
    "title": "1  Installation Quarto et gestion des fichiers",
    "section": "1.4 Création d’un projet",
    "text": "1.4 Création d’un projet\nProjets website, book, blog:\nPour les documents avec des structures enrichies, la création se fait via un projet: new project=&gt; new directory: Quarto website, Quarto book, Quarto blog et depuis janvier 2024 (v1.4) un projet Quarto manuscript.\n\n\n\n\n\n\nQuarto website \nQuarto book \nQuarto blog \nQuarto manuscript \nA l’ouverture:\n\nUn ou plusieurs fichiers .qmd. Pour les blogs, dont le contenu est organisé sous forme d’articles, des sous répertoires avec deux exemples d’articles (.qmd).\nUn fichier de configuration _quarto.yml minimal propre au contenu.\nUn fichier .Rproj.\n\n\n\n\n\n\n\n\nPrivilégier l’ouverture du fichier .Rproj\n\n\n\nPour travailler sur les fichiers associés à un projet, pensez à toujours ouvrir le fichier nom_projet.Rproj et non des fichiers individuels:\n\nDans le terminal le dossier racine se positionnera sur celui du projet.\nDans la fenêtre files de RStudio, on peut accédere directements à l’ensemble des fichiers du projet.\n\n\n\n\n\n\n\n\n\nPrivilégier le terminal pour créer un projet quarto\n\n\n\n\n\n\n1.4.0.1 Via la création d’un projet Quarto\nLa création peut d’un projet avec un squelette peut se faire directement via le terminal de RStudio avec une simple ligne de commande après s’être positionné sur un répertoire racine. Je dis cela car l’ouverture de la fenêtre de création d’un projet R peut prendre pas mal de seconde, chez moi c’est plutôt 30 secondes.\nDans le terminal:\n\nquarto create project website\nquarto create project book\nquarto create project blog\n\nOn vous demandera ensuite de choisir un nom pour le répertoire et de choisir l’IDE (Rstudio ou Vscode).\nEn animation:\n\n\n\n\n\n\n\n1.4.0.2 Via la création d’un projet R\n\nDans la console R on peut générer un projet R avec la fonction create_project() du package usethis\nDans le terminal de RStudio, on pourra créer directement les fichiers ou les répertoires qui seront utiles avec la commande touch\n\nEtapes de l’animation qui suit:\n\nOn génère le répertoire du projet dans le terminal: mkdir mon_book2.\nOn charge le pakqge usethis dans la console R: library(usethis)\nOn génère le projet avec la fonction create_project() en renseignant le chemin du répertoire mon_book: create_project(\"c:/users/thevenin_m/desktop/quarto/mon_book/\")\nRstudio va réouvrir une session en se positionnant dans le répertoire du projet. La fonction génère automatiquement un sous répertoire R, on peut le supprimer si on estime ne pas en avoir besoin: dans le terminal rm -r R3\nOn peut créer directement des fichiers vides avec la commande touch:\n\ntouch _quarto.yml [configuration du book]\ntouch index.qmd [page d’accueil du book, toujours conserver le nom index]\ntouch chapitre1.qmd\ntouch chapitre2.qmd\n\n\n\n\n\n\n\n\n\n\n\nRemarques\nMulticontenu:\nA l’absolu, une même documentation peut simultanément comporter tous ces types de contenu. Ce support est à la fois un book avec un chapitrage dans la barre verticale à gauche (sidebar) et un website avec des éléments de navigation dans une barre horizontale en haut (navbar). Et on pourrait sans problème y ajouter un contenu blog dans la page d’accueil si le type de projet avaient été un website plutôt qu’un book.\nDéploiement sur une plateforme git [Se reporter à la partie 2]:\nSi on souhaite déployer sa documentation sur une forge git comme gitlab ou github, ont doit créer un projet pour effectuer les opérations de synchronisation en le repertoire de travail en local et le répertoire distant (remote).\n\nNew project =&gt; Version control =&gt; Git\n\nOn peut produire dans un premier temps sa documentation dans un projet , puis reverser les fichiers sources dans un projet git. Pour Github seulement, avec les fonction use_git(project_path) et use_github() du package usethis on pourra générer ce répertoire distant directement à partir de RStudio.\nApproche classique: après avoir créer le dépôt distant sur une plateforme git, on le clone sur le local. On génère ensuite son projet de documentation.",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation Quarto et gestion des fichiers</span>"
    ]
  },
  {
    "objectID": "011-quarto.html#footnotes",
    "href": "011-quarto.html#footnotes",
    "title": "1  Installation Quarto et gestion des fichiers",
    "section": "",
    "text": "Nécessite une version Rtools relativement à jour: min v4↩︎\nc’est un sous répertoire du répertoire quarto qui se trouve sur le bureau, le terminal est positionné sur ce répertoire↩︎\nrm pour remove, -r pour indiquer qu’on supprime un répertoire et R pour le nom du répertoire↩︎",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation Quarto et gestion des fichiers</span>"
    ]
  },
  {
    "objectID": "012-qmd_rmd.html",
    "href": "012-qmd_rmd.html",
    "title": "2  Quarto et Rmarkdown",
    "section": "",
    "text": "2.1 Rappel sur la composition des documents\nUn document de type html (format par défaut) est composé de deux parties1.",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto et Rmarkdown</span>"
    ]
  },
  {
    "objectID": "012-qmd_rmd.html#rappel-sur-la-composition-des-documents",
    "href": "012-qmd_rmd.html#rappel-sur-la-composition-des-documents",
    "title": "2  Quarto et Rmarkdown",
    "section": "",
    "text": "Le corps du document: le body [ balise html ]. Trivialement obligatoire si on a quelque chose à écrire.\nLes métadonnées: le header [balise html ]. Optionnel, mais comporte toute une série d’options allant du titre, date, activation d’une table des matières,…, aux options d’exécution des programmes ou de compilation du document. Il prend ici le nom de YAML. Ces métadonnées peuvent se trouver dans un fichier de configuration externe dont le type est .yml.",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto et Rmarkdown</span>"
    ]
  },
  {
    "objectID": "012-qmd_rmd.html#principales-différences",
    "href": "012-qmd_rmd.html#principales-différences",
    "title": "2  Quarto et Rmarkdown",
    "section": "2.2 Principales différences",
    "text": "2.2 Principales différences\nIndépendance par rapport à R\n\nQuarto étant un logiciel, il est indépendant de R mais également de RStudio. Si le passage de Rmarkdown à Quarto se fait naturellement du côté de R, c’est le public Python qui est la principale cible de ce nouvel outil. En conséquences:\n\nQuarto peut pleinement s’utiliser avec d’autres interfaces comme VSCode ou Jupyterlab.\nExécution directe des programmes via les noyaux Jupyter de Python, Julia mais aussi Stata2.\n\n\nQualité des outputs\n\nAmélioration des rendus des documents:\n\nCalage sur les normes html actuelles (html5).\nDocuments en PDF de très grande qualité….. mais avec des durées de compilation particulièrement long.\n\n\nCompilation multiformats\nOn peut simultanément produire un output en plusieurs formats (html, pdf, docx…) tout en gérant leur spécificité code source spécifique avec contenu dit conditionnel: éléments pour un contenu dynamique (html), élements pour un contenu statique (pdf, docs).\nVocabulaire des éléments de configuration/métadonnées (yaml)\nMême si pour la configuration d’un document ou d’un projet des options supplémentaires ont été ajoutées afin d’améliorer la mise en page des documents, la gestion des blocs de codes ou la gestion de la compilation, les différences ne sont pas si nombreuses que cela par rapport à la dernière version de Rmarkdown.\nC’est surtout dans certains éléments de vocabulaire que certaines modifications seront les plus visibles lors de la transformation d’un document ou d’un projet Rmarkdown existant en Quarto.\nDeux exemples:\n\nPour indiquer le format du document, l’option output: est remplacée par l’option format:.\nLe fichier de configuration d’un projet s’appelle maintenant _quarto.yml au lieu de _site.yml.\n\nLa durée de compilation en html et fichiers des outputs\nLa durée de compilation d’un fichier .qmd est plus longue que pour Rmarkdown. Quarto embarque plus de fonctionnalités ce qui se traduit par un poids des documents bien plus élevé.\nA ce stade une grosse différence apparaît. Un output html Rmarkdown ne comporte qu’un seul fichier (nom-fichier.html) alors que pour Quarto un répertoire supplémentaire, appelé nom-fichier_libs est généré. Celui ci comporte tous les éléments de mise en forme du document sous forme de fichiers css, js… Lors d’une transmission par mail, ce repértoire devra également être ajouté, à moins d’indiquer dans une option que l’on souhaite générer un fichier html unique pour l’output. Ceci est réalisé dans la configuration du document avec une option spécifique: self-contained: true ou embed-resources:true3.\n\n\nRmarkdown: un seul fichier html généré\n\n---\ntitle: \"XXXXX\"\noutput: html\n---\n  \n\n\n\nQuarto: un seul fichier html généré\n\n---\ntitle: \"XXXXX\"\nformat: html\nembed-resources: true\n---\n\n\n\n\n\n\n\nImportant\n\n\n\nSsur le serveux margaux à l’Ined… ça speed:\nCe problème de durée de compilation des document est levé si on utilise la version serveur (margaux) de RStudio…. mais on peut rencontrer des problèmes de chargement de certaines librairies R.\nC’est le cas du package questionr (idem rmarkdown) et potentiellement d’autres package chargeant une appli Shiny. Normalement la mise à jour du package Shiny permet de résoudre le problème",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto et Rmarkdown</span>"
    ]
  },
  {
    "objectID": "012-qmd_rmd.html#passer-de-rmarkdown-à-quarto",
    "href": "012-qmd_rmd.html#passer-de-rmarkdown-à-quarto",
    "title": "2  Quarto et Rmarkdown",
    "section": "2.3 Passer de Rmarkdown à Quarto",
    "text": "2.3 Passer de Rmarkdown à Quarto\n\n2.3.1 Compilation des fichiers\n\nRstudio: le bouton Render remplace le bouton Knitr, ce dernier étant réservé nativement à l’exécution de scripts R. Pour les autres moteurs de calcul (Python, Julia, Stata) c’est le notebook Jupyter qui exécute les scripts de programmation.\nR: un package quarto permet comme Rmarkdown de compiler les fichiers via la console. Il me semble plutôt accessoire.\nQuarto pousse à travailler en mode projet et à utiliser le terminal4. A l’aide de commandes relativement simples, on peut gèrer la compilation des documents:\n\nquarto render compile l’ensemble des fichiers .qmd d’un projet (par défaut en html)\n\nDonc éviter de l’utiliser si on a modifié seulement un fichier d’un site ou d’un book.\nLorsque le fichier de configuration _quarto.yml a été modifié, il faut absolument l’utiliser pour que les modifications s’appliquent à tous les fichiers du projets (pages d’un site, chapitres d’un book).\n\nquarto render --to pdf compile l’ensemble des fichiers .qmd en pdf.\nHors projet, il est possible de compiler un fichier dans le terminal en indiquant l’emplacement du fichier absolute_path/quarto render nom.qmd.\n\n\nQuarto render versus quarto preview\n\nDans les faits, lorsqu’on compile avec le bouton RENDER, c’est la commande quarto preview qui est exécutée.\nQuarto preview permet d’afficher l’aperçu de la page compilée dans la fenêtre Viewer ou la présentation dans la fenêtre Presentation. Quarto monte alors un serveur local (localhost:XXXX) dans un répertoire temporaire de la machine que l’on peut ouvrir en cliquant sur “Show in a new window”.\nSi dans le terminal on compile via ma commande quarto preview, le rendu sera directement ouvert et mis à jour après avoir sauvegardé le fichier .qmd (raccourci clavier CTRL+S).\nAttention l’affichage et la mise à jour du rendu via quarto preview me semble particulièrement lente. Sur un deuxième écran, j’ai plutôt tendance à ouvrir et mettre à jour directement le fichier html (j’ai 5 à 10 secondes de différences). Plus embêtant encore lorsqu’on navigue sur un site, le quarto preview est exécuté systématiquement lorsqu’on navigue d’une page à une autre.\n\n\n\n2.3.2 Convertir un fichier .rmd en .qmd\nPour un document très simple, on peut convertir un fichier .rmd en .qmd par un simple changement du type de fichier.\n\n\n\n\nDocument rmd sans l’option output\n\n\n\n\n\n\n\n\n\nRendu html\n\n\n\n\n\n\nSi on prend ce même document, sans l’option output et sans le script r setup, et qu’on l’enregistre en Quarto (.qmd):\n\n\n\n\nDocument qmd sans l’option output\n\n\n\n\n\n\n\n\n\nRendu html",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto et Rmarkdown</span>"
    ]
  },
  {
    "objectID": "012-qmd_rmd.html#doit-on-définitivement-abandonner-rmarkdown",
    "href": "012-qmd_rmd.html#doit-on-définitivement-abandonner-rmarkdown",
    "title": "2  Quarto et Rmarkdown",
    "section": "2.4 Doit-on définitivement abandonner Rmarkdown ????",
    "text": "2.4 Doit-on définitivement abandonner Rmarkdown ????\nQuarto offre de nouvelles possibilités certes mais il n’est pas encore 100% stable5. Si on est moins regardant sur les questions de forme et d’esthétique des outputs, si l’utilisation de Rmarkdown s’arrête à la production de notebook simples en format html, le package reste une excellente solution, en particulier sous sa dernière version. La compilation est plus rapide et les documents pèsent bien moins lourd.\nMode visual, options des blocs de codes directement dans le corp du programme, nouveaux balisages pour &lt;div&gt; ou &lt;span&gt; … sont également intégrés dans les dernières versions de Rmarkdown.",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto et Rmarkdown</span>"
    ]
  },
  {
    "objectID": "012-qmd_rmd.html#footnotes",
    "href": "012-qmd_rmd.html#footnotes",
    "title": "2  Quarto et Rmarkdown",
    "section": "",
    "text": "C’est la même structuration en Latex↩︎\nAvec le noyau Jupyter [nbstata]↩︎\nQuarto conseille d’utiliser cette dernière qui s’applique totalement tant aux articles/notebook html qu’aux présentations revealjs ↩︎\nAttention ctrl+v ne fonctionne pas. Soit click droit + coller ou ctrl+shift+v↩︎\nFévrier 2024: mais cela s’améliore de version en version↩︎",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto et Rmarkdown</span>"
    ]
  },
  {
    "objectID": "013-markdown.html",
    "href": "013-markdown.html",
    "title": "3  Edition et formatage d’un document",
    "section": "",
    "text": "3.1 Markdown\n:Markdown WIKI\nLe markdown est un mode de formatage dit léger1 de texte incluant des éléments d’insertion d’images, de lien ou de création de tableaux qui se substitue partiellement à un formatage de type markup.\nExemple de formage de type UP:\nCe qui suit donne seulement quelques éléments d’utilisation du markdown, le thème étant très documenté sur internet. On peut se reporter à la documentation officielle de Quarto dont la partie dédiée à Markdown est quasiment exhaustive [Lien].",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Edition et formatage d'un document</span>"
    ]
  },
  {
    "objectID": "013-markdown.html#markdown",
    "href": "013-markdown.html#markdown",
    "title": "3  Edition et formatage d’un document",
    "section": "",
    "text": "Le TEX [cf Latex] depuis la fin des années 70.\nLe HTML: HyperText Markup Language2.\nLe SMCL: Stata Markup Control Language3.\nBien que le markdown se soit largement imposé, il existe d’autres modes de formatage léger, plus ou moins dédié à des outils particuliers.\nIl existe des variantes ou extension au markdown de base, comme le GFM de Github4\n\n\n\n3.1.1 formatage du texte\n\n\n\n\n\n\n\n\nRésultat\nBalisage markdown | Balisage html\n\n\n\n\nGras\n**Gras** ou __gras__\n&lt;b&gt;Gras&lt;/b&gt;\n\n\nItalique\n*Italique* ou _Italique_\n&lt;i&gt;Italique&lt;/i&gt; ou &lt;em&gt;Italique&lt;/em&gt;\n\n\ngras et italique\n***Gras et italique*** ou ___Gras et italique___\n&lt;b&gt;&lt;i&gt;Gras et italique&lt;/i&gt;&lt;/b&gt;\n\n\nBarré\n~~Barré~~\n&lt;strike&gt;Barré&lt;\\strike&gt;\n\n\nInline code\n`Inline code`\n&lt;code&gt;Inline code&lt;\\code&gt;\n\n\n\n\n\n3.1.2 Zône de commentaire\nIdentique au html:\n\n\nInsertion d'une zône de commentaires\n\n\n&lt;!-- Commentaire sur une ligne: blablabla --&gt;  \n\n&lt;!-- \nCommentaire sur plusieurs lignes\nblabla\nblabla\n --&gt;  \n\n\n\n3.1.3 Saut de ligne\n\nGénéralement les éditeurs de texte markdown sur le web comme [stackedit] gèrent automatiquement le saut avec la touche enter.\nLa balise html est &lt;br&gt;\nAvec Quarto (ou Rmarkdown) deux possibilités :\n\nImplicitement avec un double espace après le dernier mot.\nExplicitement avec l’utilisation de la balise \\.\n\n\n\nRésultat:\nPremière ligne sans espace Deuxième ligne\n\nRésultat:\nPremière ligne avec 2 espaces\nDeuxième ligne\n\nRésultat:\nPremière ligne avec un slash\nDeuxième ligne\nOn peut obtenir une ligne vide supplémentaire en sautant directement une ligne\n\nRésultat:\nUne ligne vide après la première ligne\nDeuxième ligne\n\n\n\n\n\n\nTip 3.1: Plusieurs sauts de ligne\n\n\n\nSelon le traducteur markdown il est possible ou non d’augmenter le nombre de saut de ligne en ajoutant des backslash. Par exemple pour sauter 3 lignes \\\\\\.\nCe n’est pas possible avec Quarto ou Rmarkdown. La solution est alors d’ajouter une ou plusieurs balises html &lt;br&gt;. Pour un document en format PDF, il y a la possibilité d’utiliser la balises Latex \\linebreak5\n\n\n\n\n3.1.4 Titre/header\nEn html les headers permettent d’insérer des titres de chapitre ou sections. Ils permettent d’alimenter la tables des matières (toc) si l’option est activée.\n\nEn html titres et les headers sont introduits hiérarchiquement avec les balises &lt;h1&gt;titre&lt;/h1&gt;, &lt;h2&gt;sous titre&lt;/h2&gt;….&lt;h6&gt;sous titre&lt;/h6&gt;\nEn markdown ils sont introduits avec des #.\n\n# Titre_1, ## Titre_12…## Titre_16\n\n\n\n\n3.1.5 Listes\n\nEn html les listes sont générées avec un système de balises imbriquées ou non (&lt;ul&gt; &lt;ol&gt;,&lt;li&gt;).\nEn markdown l’édition des listes est simplifiée:\n\nListe non ordonnée : un symbole comme *, -, +\n\nListe ordonnée : Nombre suivi d’un .: 1. , 2., ….\n\nRègle de retrait:\n\nPour le premier niveau de la liste la puce ou le nombre se situe sur le premier caractère de la ligne.\nPour les sous listes, la puce ou le nombre est en dessous du premier caractère de la liste du niveau supérieur.\n\nIl n’est pas nécessaire d’indiquer un saut de ligne pour passer à l’élément suivant de la liste.\n\n\n\nListe non ordonnée\n\n* item1\n  * item11\n  * item12\n* item2\n  * item21\n    * item22\n\n\nitem1\n\nitem11\nitem12\n\nitem2\n\nitem21\n\nitem22\n\n\n\n\n\nListe non ordonnée\n\n1. item1\n   11. item11\n2. item2\n   21. item21\n   22. item22\n\n\nitem1\n\nitem11\n\nitem2\n\nitem21\nitem22\n\n\n\n\n\n\n\n\nLaisser une ligne vide avant la liste\n\n\n\nAvec Quarto ou Rmarkdown on doit absolument laisser une ligne vide entre la liste et la dernière ligne de texte la précédent. Ce ne sera pas forcément le cas avec d’autres éditeurs.\n\n\n\n\n\nBIEN\n\nRésulalt avec ligne vide...\n\n* Item1\n* Item2\nRésultat avec une ligne vide…\n\nItem1\nItem2\n\n\n\n\n\nPAS BIEN\n\n\nRésultat sans ligne vide...\n* Item1\n* Item2\n  \nRésultat sans jigne vide… * Item1 * Item2\n\n\n\n\n3.1.6 Insertion d’un lien\nEn html un lien et ses options sont insérés dans une balise &lt;a lien options&gt;&lt;/a&gt;\n\nAddresse du lien reportée dans le document : &lt;path/nom_fichier.extention&gt;\n\nExemple page html : https://quarto.org/\nExemple autre type fichier : https://gitlab.com/mthevenin/support_quarto/-/blob/master/README.md\n\nLien dans un texte : [texte](path/nom_fichier.extention)\n\nExemple page html : [Site Quarto](https://quarto.org/) donne Site Quarto\nExemple autre type de fichier : [[Readme du dépôt gitlab de la formation]](https://gitlab.com/mthevenin/support_quarto/-/blob/master/README.md) donne [Readme du dépôt github de la formation]\n\n\n\n\n3.1.7 Insertion d’une image\n\n\n\n\n\n\nNote\n\n\n\n\nLa mise en page des images et certaines options propres à Quarto font l’objet d’une section dédiée [Section 15.3].\nOn regarde ici seulement l’insertion d’image externe et non des graphiques générés directement par un programme.\n\n\n\n\nEn html, les images et ses options sont insérées dans une balise &lt;img source_image options&gt;.\nLa syntaxe générique est** ![Titre optionnel](path/nom_image.extension){options image}**.\nSi l’image est stockée en local dans un répertoire ou un sous répertoire du fichier .qmd, on met de préférence le chemin relatif:\n\nSi l’image est dans le même répertoire que le fichier qmd: seulement le nom du fichier.\nSi l’image est dans un sous répertoire du répertoire où est stocké le qmd: repertoire/nom_image.extension\nSi l’image est stockée sur le web on indique l’url.\n\nPar défaut l’image est centrée.\n\nExemple avec le logo Quarto:\n\nAvec le lien de l’image :\n\n![Logo](https://quarto.org/quarto.png)\n\n\n\n\n\n\n\n\nLogo\n\n\n\n\n\n\nAvec le logo stocké dans le répertoire img1:\n\n![Logo](img1/quarto.png)\n\n\n\n\n\n\n\n\nLogo\n\n\n\n\n\nSans rentrer dans le détail des options :\n\nOn peut réduire la taille de l’image. En relatif on peut utiliser l’option {width=X%}:\n\n![Logo à 50%](img1/quarto.png){width=50%}\n\n\n\n\n\n\n\n\nLogo à 50%\n\n\n\n\n\n\nOn peut modifier l’alignement horizontal de l’image avec l’option fig-align:\"left/right/margin\" à l’option précédente:\n\n![Logo 50% à gauche](img1/quarto.png){fig-align=\"left\" width=50%}\n\n\n\n\n\n\n\n\n\n\n\n\nLogo 50% à gauche\n\n\n\n\n\n\nOn peut ajouter un texte alternatif alt pour les personnes malvoyantes avec l’option fig-alt=\"Texte alternatif\":\n\n![Titre](lien_image){fig-alt=\"Texte alternatif\"}\n\n\n\n\n3.1.8 Insertion d’un tableau\nParlons peu parlons bien : générer manuellement un tableau en html (ou latex) mais également en markdown n’est pas la solution. En markdown, la création de tableau se fait sur un principe de pipes, au premier abord cela apparait moins confus qu’en html mais les modifications aussi simples soient elles sont assez chronophages.\nUn exemple très simple pour s’en convaincre :\nTableau en html:\n\n\nTableau html\n\n&lt;table&gt;\n&lt;tr&gt;\n&lt;td&gt;A&lt;/td&gt;\n&lt;td&gt;B&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;C&lt;/td&gt;\n&lt;td&gt;D&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n\nEn html, une multitude de balisage : &lt;table&gt;&lt;/table&gt; (tableau), &lt;tr&gt;&lt;/tr&gt; (ligne) et &lt;td&gt;&lt;/td&gt; (colonne)\n\n\n\n\n\n\n\nA\nB\n\n\nC\nD\n\n\n\n Tableau en markdown:\n\nRepose sur un principe de pipes pas forcément facile à mémoriser.\n\n\n\nTableau markdown\n\n+---+---+\n| A | B |\n+---+---+\n| C | D |\n+---+---+\n: tableau markdown \n\n\ntableau markdown\n\n\n\n\n\n\nA\nB\n\n\nC\nD\n\n\n\n Et les modifications sont assez pénibles à réaliser (et encore ici on a pas mis de nom aux colonnes).\n\n\nModification d'un tableau markdown\n\n+---+---+\n| A | BBBBB |\n+---+---+\n| CCCCC | D |\n+---+---+\n\n+--------+---------+\n| A      | BBBBBBB |\n+--------+---------+\n| CCCCC  | D       |\n+--------+---------+\n\n\n\n\n\n\n\n\nA\nBBBBBBB\n\n\nCCCCC\nD\n\n\n\n\nLa solution: utiliser un éditeur de tableaux markdown.\n\nAvec Quarto ou une version récente de Rmarkdown : passer en mode Visual et aller sur l’onglet Table. Le tableau peut être éditer directement après avoir indiqué le nombre de lignes et de colonne.\nUtiliser un éditeur de tableau markdown en ligne : par exemple https://www.tablesgenerator.com/markdown_tables.\n\n\n\n\n\n\n\nAstuce\n\n\n\nSi on prévoit de faire plusieurs tableaux manuellement dans un document ou un projet, cela peut valoir le coup de générer un document dédié aux tableaux qui seront générés en markdown. Il suffira de récupérer le code source des tableaux et de le coller dans le document final.\nCela est préférable à la bascule entre les deux modes car Quarto tend à redéfinir certains balisage à sa sauce lorsqu’on repase du visual au source. C’est quasi automatique pour les sauts de ligne en imposant une insertion avec \\.\n\n\n\n\nTitre du tableau: sous le tableau avec : titre tableau\n\n\n\nTitre d'un tableau\n\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n: Titre tableau\n\n\n\n\n\nTable 3.1: Titre tableau\n\n\n\n\n\nVariables\n\\(Y_1\\)\n\\(Y_2\\)\n\n\n\n\n\\(X_1\\)\n100\n261\n\n\n\\(X_2\\)\n350\n198\n\n\n\\(X_3\\)\n125\n175\n\n\n\n\n\n\n\n\n\n\n\n\n\nModifier la largeur du tableau en format html\n\n\n\n\n\nAvec un rendu html6, la largeur du tableau prend automatiquement toute la largeur de la page. Avec un nombre réduit de colonnes ce n’est pas top. On peut réduire la largeur du tableau en modifiant la mise en page de la page qui contient le tableau.\nJ’anticipe ici un peu les éléments de mise en page propres à Quarto: on peut insérer le tableau dans une édition en mode colonne Section 3.2.1.2 avec une largeur réduite (ici 20% de la largeur de la page).\n\n\nRéduction de la largeur d'un tableau\n\n::: {.column width=\"20%\"}\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n:::\n\n\n\n\n\n\nVariables\n\\(Y_1\\)\n\\(Y_2\\)\n\n\n\n\n\\(X_1\\)\n100\n261\n\n\n\\(X_2\\)\n350\n198\n\n\n\\(X_3\\)\n125\n175\n\n\n\n\n\nAutre astuce (html): si on veut centrer rapidement et facilement le tableau sur la page, on peut utiliser un balisage html &lt;center&gt;Tableau&lt;/center&gt; :\n\n\nCentrer un tableau dont la largeur a été réduite\n\n&lt;center&gt;\n::: {.column width=\"20%\"}\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n:::\n&lt;/center&gt;\n\n\n\n\n\n\nVariables\n\\(Y_1\\)\n\\(Y_2\\)\n\n\n\n\n\\(X_1\\)\n100\n261\n\n\n\\(X_2\\)\n350\n198\n\n\n\\(X_3\\)\n125\n175\n\n\n\n\n\n\n\n\n\n\n3.1.9 Insertion d’une équation ou d’une formule\nQuarto utilise par défaut comme Rmarkdown l’éditeur mathjax.\n\nSi l’équation est insérée dans une ligne de texte : $équation/formule$, par exemple $y=x+1$ \\(y=x+1\\)\nSi l’équation est insérée sur une ligne entière : $$équation-formule$$, par exemple $$\\sum_{i=0}^n p_i=1$$ :\n\n\\[\\sum_{i=0}^n p_i=1\\]\n\nListe de symboles pour écrire des formules\nGuide de rédaction des formules",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Edition et formatage d'un document</span>"
    ]
  },
  {
    "objectID": "013-markdown.html#balisage-propres-à-quartormarkdown",
    "href": "013-markdown.html#balisage-propres-à-quartormarkdown",
    "title": "3  Edition et formatage d’un document",
    "section": "3.2 Balisage propres à Quarto/Rmarkdown",
    "text": "3.2 Balisage propres à Quarto/Rmarkdown\n:CSS Wiki\nPosit a introduit 3 autres types de balisage:\n\nUn pour modifier des éléments de mise en page:\n\nSe substitue aux balises html de type &lt;div&gt;: édition en plusieurs colonnes , contours, couleurs de fond…. Applique une classe CSS7 à un élément ou à une partie du document. Ne pas s’inquiéter, Quarto fournit plusieurs classes CSS à appliquer directement à un document.\n\nUn pour modifier des éléments de formatage du texte non pris en compte par le markdown:\n\nSe substitue aux balises html de type &lt;span&gt;. Demandera nécessairement quelques connaissances en css (on se limitera ici à la couleur d’un mot).\n\nUn système de shortcode pour insérer des éléments se substituant ou non à des balises html ou à des classes CSS.\n\nLes deux premiers types sont directement issu du balisange Pandoc8, le convertisseur de document utilisé par Quarto.\n\n3.2.1 Balises de mise en page\n\nLa balise &lt;div&gt; associée à une classe CSS est remplacée par une balise de type clôture (fence): **:::. La partie modifiée sera ouverte et fermée par :::\nCette contient au minimum 3 :\nLe nom donné à la modification de la mise en page est appelé classe et est indiqué à l’ouverture de la section div dans des accolades: ::: {.nom_classe_css  options}.\n\nUtilisation d’une classe CSS prédéfinie (par le thème ou par Quarto):\n\n\nBalisage div avec Quarto\n\n::: {.nom_classe_css  options}\nTexte/image....\n:::\n\nEn html, on aurait par exemple:\n{.mf filename=\"Balisage div html} &lt;div class=\"nom_classe_css\"&gt; &lt;p&gt; Texte/image ... &lt;/p&gt; &lt;/div&gt;\nRemarques:\n\nOn peut mettre plusieurs classes CSS à la suite pour modifier la mise en page d’une partie du document.\nOn peut modifier directement le style avec des attributs CSS sans définir de classe (pas recommandé):\n\n::: {style = \"attributs_css\"}.\n\nOn peut imbriquer plusieurs modifications dans une même zône du document. Pour s’y retrouver dans les ouvertures/fermetures, on peut augmenter le nombre de :.\n\n\n\nFaciliter la lecture de plusieurs balise à la suite\n\n:::: {.nom_classe1}\n:::  {.nom_classe2}\nTexte\n:::\n::::\n\nEt comme c’est plus sympa avec des exemples…\n\n3.2.1.1 Encadrés informatifs: les callouts\n\nIl s’agit d’un élément propre à Quarto (non implémenté dans Rmarkdown).\nC’est une zône de texte sous forme d’encadré avec un bord coloré et un icone selon le type d’information : note/info, tips/success, warning, important, danger.\nPour générer cette mise en page, sans plus d’option, on utilise la classe {.callout-nom_type}:\n\n{.callout-note}, {.callout-warning}\nPlusieurs options: {.callout-warning option}\nSi aucune option, on peut également appeler l’encadré directement avec: ::: callout-type\n\nOn peut mettre un titre à l’encadré (Section 3.1.4):\n\nMettre le titre sur la première ligne du texte de l’encadré.\nPenser à baisser le niveau du titre par rapport à celui de la section.\n\n\nEncadré d’avertissement :\n\n\nAjout d'un callout de type warning\n\n::: {.callout-warning}\nAttention si vous faites ça, vous allez avoir des problèmes.\n:::\n\nCe qui donne :\n\n\n\n\n\n\nAvertissement\n\n\n\nAttention si vous faites ça, vous allez avoir des problèmes.\n\n\nAvec callout-note (information):\n\n\nAjout d'un callout de type note/info\n\n::: callout-note\nLes **callouts** ne sont pas implémentés dans Rmarkdown\n:::\n\nCe qui donne:\n\n\n\n\n\n\nNote\n\n\n\nLes callout ne sont pas implémentés dans Rmarkdown.\n\n\nAjouter des options:\n\nIl y a plusieurs options associées à ces encadrés comme retirer l’icône, étendre le contenu lorsque celui est trop long, ……\nQuelques options:\n\ncollapse= true [seulement format html]: si le contenu est trop long, permet de l’afficher à la volée. Penser à mettre un titre à l’encadré.\nappareance: simple ou minimale.\n\nsimple: pas d’icône et couleur faiblement saturé sur le titre.\nminimale: pas d’icône et pas de couleur sur le titre.\n\nicon= false\n\n\n\n\n\n\n\n\nCollapse\n\n\n\n\n\nSyntaxe: ::: {.callout-tip collapse=true}\n\n\n\n\n\n\n\n\n\nApparence par défaut\n\n\n\nSyntaxe: ::: callout-tip\n\n\n\n\n\n\n\n\nApparence simple\n\n\n\nSyntaxe: ::: {.callout-tip appearance=simple}\n\n\n\n\n\n\n\n\nApparence minimale\n\n\n\nSyntaxe: ::: {.callout-tip appearance=minimal}\n\n\n\n\n\n\n\n\nSupprimer l’icône\n\n\n\n\nDans la section div: ::: {.callout-tip icon=false}\nDans le yaml/header du qmd: callout-icon: false\n\nRemarque: On peut refaire apparaitre l’icône dans les callout individuellement.\n\n\n\n\n\n\n3.2.1.2 Multicolonnes\n\nImbrication de plusieurs balises :\n\nDeux types de balises:\n\nOn déclare une édition en plusieurs colonnes: {.columns}\nOn génère chaque colonne: {.columns width=\"x%\"}\n\n\nComme les balises sont liées et imbriquées, on peut clôturer la première avec plus de : pour faciliter l’édition, par exemple 4: ::: {.column}.\n\n\n\nEdition en plusieurs colonnes\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* Texte de la colonne de gauche \n* Largeur: \n  * 50% de la page avec l'option `width=50%`\n:::\n\n::: {.column width=\"50%\"}\n* Texte de la colonne de droite\n  * 50% de la page avec l'option `width=50%`\n* Largeur: \n:::\n\n::::\n\nCe qui donne :\n\n\n\nTexte de la colonne de gauche\n\nLargeur :\n50% de la page avec l’option width=50%\n\n\n\nTexte de la colonne de droite\n\nLargeur :\n50% de la page avec l’option width=50%\n\n\n\n\n\n\n\n\n\nAstuce\n\n\n\nOn peut mettre une colonne vide pour créer une marge entre les colonnes textes\n\n\nAjout d'une colonne vide entre deux colonnes\n\n:::: {.columns}\n\n::: {.column width=\"47.5%\"}\n* Texte de la colonne de gauche   \n* Largeur : \n* 50% de la page avec l'option `width=50%`  \n\n:::\n\n::: {.column width=\"10%\"} \n:::\n\n::: {.column width=\"47.5%\"} \n\n* Texte de la colonne de droite    \n* Largeur : \n* 50% de la page avec l'option `width=50%`  \n\n:::\n::::\n\n\n\n\n\n\n3.2.2 Formatage du texte\n\nA mon sens moins utile, le markdown gérant l’essentiel du formatage de texte. Je passe donc brièvement dessus.\nDemande quelques connaissances en CSS. Tous ces éléments sont bien documentés sur internet.\nSyntaxe: [texte à modifier]{style css affecté au texte}.\n\n\n\nChanger la couleur d'un mot\n\nOn veut mettre le mot [texte]{style=\"color:red\"} rouge. \n\nOn veut mettre le mot texte en rouge.\nOn peut bien évidemment utiliser une classe CSS prédéfinie. Par exemple avec la classe .border:\n\n\nChanger l'apparence d'un mote avec une classe css existante\n\nOn veut mettre le mot [texte]{.border} avec un contour. \n\nOn veut mettre le mot texte avec un contour.\n\n\n3.2.3 Shortcodes d’insertion\nSyntaxe: {{&lt; type_shorcode options &gt;}}\nQuelques exemples.\n\n3.2.3.1 Sauts de page\nUn des très bons ajouts de Quarto (min v1.3). On a la possibilité quel que soit soit le format de sortie d’indiquer un saut de page. Pour le format html cela permet d’indiquer des sauts de page si le document doit être imprimer.\nLe shortcode est: {{&lt; pagebreak &gt;}}\n\n\n3.2.3.2 Insertion de video\nOn peut insérer des vidéos (Youtube, Vimeo…) avec {{&lt; video video_link option &gt;}}\n\n{{&lt; video https://www.youtube.com/watch?v=VEay0IMZT8w &gt;}} \n\n\n\n\nOn peut paramétrer le ratio ou la taille de la vidéo insérée:\n\nRatio avec l’option aspect-ratio (par défaut 16/9). Ici en 4/3:\n\n\n{{&lt; video lien_video aspect-ratio=\"4x3\" &gt;}}\n\n\nTaille avec width et height:\n\n\n{{&lt; video lien_video width=\"500\" height=\"350\" &gt;}}\n\n\n\n3.2.3.3 Insertion d’un autre document ou programme\nInsertion d’un document\n\nOn peut également insérer directement un document ou des lignes de codes issues d’un autre fichier:\n\n{{&lt; include nom_fichier &gt;}}\n\nExemple: on veut insérer directement le code source d’un fichier appelé include.qmd. Il pourrait, par exemple, être utilisé dans plusieurs formats d’une même documentation (article et présentation):\n\n{{&lt; include files/include.qmd &gt;}}.\n\n\nCode source du fichier que l’on veut insérer:\n\n\n\n\nFichier .qmd inséré\n\n\n\nLe résultat après l’inclusion:\n\nCe que vous lisez là sur fond vert est issu d’un autre fichier. Pour l’insérer dans le support, on utilise le shortcode {{&lt; include files/include.qmd &gt;}} après avoir enregistré le fichier qui sera inséré.\n\nLe nom de ce fichier est files/include.qmd.\nOn pourra l’utiliser dans plusieurs documents d’une documentation.\n\n\nInsertion d’un programme\n\nOn a un programme R dans un fichier.\nOn peut l’exécuter dans un document Quarto sans insérer le programme dans un bloc de codes (voir chapitre dédié aux blocs de code):\n\n{{&lt; include nom_programme.R &gt;}}\n\nOn a enregistré le script assez long **_include_prog.R** dans le répertoire files:\n\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf &lt;- read.csv(\"fecondite_ggp.csv\")\ndf = df %&gt;% mutate_if(is.character,as.factor)\n\ntmp &lt;- df %&gt;%\n  mutate(pays2=pays)   \n\nggplot(tmp) +\n  aes(x = year, y = y) +\n  geom_line( data=tmp %&gt;% dplyr::select(-pays), aes(group=pays2), color=\"grey\", lwd=0.1) +    \n  geom_line(colour = \"#C24168\", lwd=1.4) +\n  labs(title = \"Taux de fécondité\") +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),  \n        panel.grid.minor.y = element_blank()) + \n  labs(x = \"Années\", \n       y = \"ICF\", \n       title = \"Indices conjoncturels de fécondité par pays de 1950 à 2022\", \n       caption = \"Source: GGP - Datalab Ined\",) +\n  scale_x_continuous(guide = guide_axis(n.dodge = 2), breaks=seq(1950,2020, 10)) + \n  scale_y_continuous(breaks=seq(0,6,1)) +\n  facet_wrap(vars(pays), ncol = 4L)\n\n\n\nOn peut l’exécuter avec le shortcode include sans l’insérer explicitement dans le fichier .qmd:\n\n\nDans le document le graphique sera affiché:",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Edition et formatage d'un document</span>"
    ]
  },
  {
    "objectID": "013-markdown.html#footnotes",
    "href": "013-markdown.html#footnotes",
    "title": "3  Edition et formatage d’un document",
    "section": "",
    "text": "D’où le Down↩︎\nJusqu’en 2007 avec l’apparition des documents .docx, le code source de Word (.doc) reposait exclusivement sur du HTML. Très utile pour deboger les mises en forme des documents Word….↩︎\nUne horreur…↩︎\nGithub Flavored Markdown↩︎\nAttention aux compilations multiformats, si le document a un rendu html et pdf, il faudra mettre des contenus conditionnels (Section 12.2.2)↩︎\nEn pdf la largeur est ajustée sur les colonnes donc pas de soucis↩︎\nCascade Style Sheet, se reporter à Section 13.2↩︎\nMerci à Julien Rabaud pour la précision↩︎",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Edition et formatage d'un document</span>"
    ]
  },
  {
    "objectID": "014-yaml.html",
    "href": "014-yaml.html",
    "title": "4  Introduction au yaml",
    "section": "",
    "text": "4.1 Principes généraux\n:GIT YAML",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction au yaml</span>"
    ]
  },
  {
    "objectID": "014-yaml.html#principes-généraux",
    "href": "014-yaml.html#principes-généraux",
    "title": "4  Introduction au yaml",
    "section": "",
    "text": "Il s’agit du header du document qui comprend toutes les métadonnées du document: titre, date, options de mise en page, options d’exécution….\nLa syntaxe du yaml est très sensible à l’intendation1. Les règles restent néanmoins assez simples.\nIl s’agit du header du document qui comprend toutes les métadonnées du document: titre, date, options de mise en page, options d’exécution….il s’agit des différentes options entrant dans la partie &lt;head&gt; &lt;/head&gt; du code source html.\nLa syntaxe du yaml est très sensible à l’intendation2. Les règles restent néanmoins assez simples.\nLors de la compilation, le yaml est le premier élément qui est évalué. En cas d’erreur elle sera stoppée quasi instantanément.",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction au yaml</span>"
    ]
  },
  {
    "objectID": "014-yaml.html#balisage-et-commentaires",
    "href": "014-yaml.html#balisage-et-commentaires",
    "title": "4  Introduction au yaml",
    "section": "4.2 Balisage et commentaires",
    "text": "4.2 Balisage et commentaires\nBalisage du yaml\nEn tête du code source du fichier .qmd, la zône du yaml est balisée par 3 tirets:\n\n\nZône pour les options du yaml\n\n---\noptions du yaml\n---\n\nLes commentaires\nTout simplement avec #",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction au yaml</span>"
    ]
  },
  {
    "objectID": "014-yaml.html#les-règles-de-retrait-intendation",
    "href": "014-yaml.html#les-règles-de-retrait-intendation",
    "title": "4  Introduction au yaml",
    "section": "4.3 Les Règles de retrait: intendation",
    "text": "4.3 Les Règles de retrait: intendation\n\nOptions\n\nSi aucune autre option: On peut placer la première lettre ou l’on veut\n\n\n\n\n\n\n\n\n\n\nOK\n\n\n\n\n---\ntitre: \"Le yaml\"\n---\n\n\n\n\n\n\n\n\n\n\n\nOK\n\n\n\n\n---\n       titre: \"Le yaml\"\n---\n\n\n\n\n\nSi autres options: elle doivent toutes être alignées. Si la première option n’est pas sur le premier caractère de la ligne , la seconde commencer au même niveau.\n\n\n\n\n\n\n\n\n\nErreur\n\n\n\n\n---\n       titre: \"Le yaml\"\nformat: html\n---\n\n\n\n\n\n\n\n\n\n\n\nOK\n\n\n\n\n---\n       titre: \"Le yaml\"\n       format: html\n---\n\n\n\n\n\nSous options\n\nLes sous options commencent au moins niveau du second caractère de l’option ou de la sous-option de niveau supérieur (option parente).\n\nIl est d’usage de placer les sous options au niveau du troisième caractère (deux espaces)\n\n\nSi les espaces sont indiqués par un .\n\n\nRègles de retrait\n\n---\noption: \n..sous-option1: argument\n..sous-option2: argument\n....sous-sous-option21: argument\n....sous-sous-option22: argument\n---  \n\nExemple:\n\nOn veut ajouter un nom d’auteur/autrice: option author: \"Bidibule\n\n\n\nAjout de deux options\n\n---\ntitle: \"yaml d'un document\"\n\nauthor: \"Bidibule\"\n---\n\n\nSi on souhaite ajouter le lieu d’exercice, le nom devient une sous option de author et est renseigné avec la sous option name: \"Bidibule\". Sur le même principe le lieu d’exercice sera donné par l’option affiliation: \"Bidibules inc\".\n\n\n\nAjout de sous options\n\n---\ntitle: \"yaml d'un document\"\n\nauthor:\n  name: \"Bidibule\"\n  affiliation: \"Bidibules inc\"  \n---\n\nExemple 2: format hmtl et pdf\nLe html est le format par défaut d’un notebook ou d’une présentation via le format reveal js. Si on veut indiquer explicitement le format html, c’est l’argument de l’option format. Si on veut ajouter des sous options au format html comme des thèmes (document, bloc de code) et/ou un autre format (pdf), sur le même principe que l’exemple précédent, html: devient une sous option de l’option format. Si on ne souhaite pas ajouter d’autres options pour la compilation en pdf, la sous option est renseignée par pdf:default. Elle se trouve sur le même niveau de retrait que html:.\n\n\nOptions pour deux formats\n\n---\ntitle: \"yaml d'un document\"\n\nformat: \n  html:\n    theme: zephyr\n    highlight-style: dracula\n  pdf: default  \n---    \n\nCe qui nous donne au final le template suivant:\n\n\nUn yaml avec options et sous options\n\n---\ntitle: \"yaml d'un document\"\n\nauthor:\n  name: \"Bidibule\"\n  affiliation: \"Université X\" \n\nformat: \n  html:\n    theme: zephyr\n    highlight-style: dracula \n  pdf: default\n---    \n\n&lt;!-- corps du document qmd --&gt;",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction au yaml</span>"
    ]
  },
  {
    "objectID": "014-yaml.html#a-savoir",
    "href": "014-yaml.html#a-savoir",
    "title": "4  Introduction au yaml",
    "section": "4.4 A savoir",
    "text": "4.4 A savoir\nDans Rstudio\nSi RStudio repère une erreur dans le retrait, une croix rouge apparaitra à droite du numero de ligne. Pratique.\nExtension externe qui ne s’active pas\nIl arrive que certaines options installées sous forme d’extension ne s’active pas après la compilation. C’est désagréable. Je n’arrive pas à expliquer pourquoi, mais le changement de position dans le yaml ou en ajoutant/supprimant une ligne vide entre cette option et une autre peut résoudre le problème… où alors on attend que cela finisse par fonctionner après plusieurs compilations.\nPar rapport au yaml d’un projet\nLe yaml du document à la priorité sur le yaml du projet: pas pour tout, mais on peut donc contredire des éléments de configuration qui sont dans le fichier _quarto.yaml dans un fichier .qmd.\nExemple: on active une table des matière pour chaque .qmd du projet dans _quarto.yaml (toc: true). On peut la supprimer dans un ou plusieurs fichiers .qmd avec toc:false dans le yaml du fichier.\nDans cette section on a juste regardé les règles de retrait des options. Dans le fichier de configuration les sous options peuvent prendre la forme de liens vers des fichiers .qmd comme les différents chapitres d’un book. La même règle est appliquée. A ce stade, juste pour information:\n\n\nExemple d'un fichier _quarto.yml\n\n\nbook:\n  title: \"Formation Quarto\"\n  chapters:\n    - chap1.qmd\n    - chap2.qmd\n    - chap3.qmd",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction au yaml</span>"
    ]
  },
  {
    "objectID": "014-yaml.html#footnotes",
    "href": "014-yaml.html#footnotes",
    "title": "4  Introduction au yaml",
    "section": "",
    "text": "qui se traduit ici par retrait↩︎\nOn gardera le mot anglais, qui peut se traduire ici par retrait↩︎",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction au yaml</span>"
    ]
  },
  {
    "objectID": "015-codes.html",
    "href": "015-codes.html",
    "title": "5  Les blocs de codes",
    "section": "",
    "text": "5.1 Introduction\nPour les fichiers Rmarkdown (.rmd) ou Quatro (.qmd), le texte n’est pas inséré sous forme de cellules mais dans un éditeur classique, avec deux options: un mode source (balisage markdown/html) et un mode visual.\nCréation d’un bloc de codes\nAjout d’un moteur de calcul ou d’un autre langage (type texte):\nUn bloc de code (chunk)\n\n```{r filename=\"Un bloc de code (chunk)\"}\n# Code R\n\n1+1\n```\n\n\n[1] 2",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Les blocs de codes</span>"
    ]
  },
  {
    "objectID": "015-codes.html#introduction",
    "href": "015-codes.html#introduction",
    "title": "5  Les blocs de codes",
    "section": "",
    "text": "Chunk, Code block, cells: des expressions qui expriment la même chose:\n\nChunk: Rstudio/Rmarkdown.\nCode block: Quarto.\nCells: terme générique aux notebooks, par exemples Jupyter ou plus récemment Observable pour la visualisation typée javascript. Succession de cellules sous forme de texte formaté ou non, et de scripts (R, Python,…).\n\n\n\n\n\nIl est ouvert et fermé par ```\n\n\n\n\n\n\n\nAstuce\n\n\n\nOn peut générer un bloc automatiquement en cliquant sur ce bouton (à droite du Render):\n\n\n\n\n\nA l’ouverture, le moteur est renseigné dans des accolades: ```{nom_moteur}\nOn peut ajouter des options: ```{nom_moteur, options}\n\n\n\n\n\n\n\n\nLes moteurs\n\n\n\n\n\nExtraction du code avec Knitr versus Jupyter\n\nKnitr: Maintenant les moteurs R, Python et Julia sont directement utilisables, et on peut switcher dans un même document de l’un à l’autre.\nJupyter: on peut utiliser d’autres outils si un noyau (kernel) a été implémenté et installé. C’est le cas de Stata avec le kernel nbstata avec au moins une v17 de l’application. Avec Jupyter il n’est pas possible de switcher d’un moteur à un autre.\n\nDans le yaml on déclare le noyau avec jupyter: nom_noyau: jupyter: python3 (Python), jupyter: ir (R), jupyter: nbstata (Stata) …\nPour Python, Julia et Stata cette déclaration dans le yaml n’est plus obligatoire depuis la version 1.4.\n\n\nBloquer l’exécution du code\n\nEn ajoutant un point . avant la déclaration du moteur, le code ne sera pas exécuté: ```{.r}, ``` {.python}. Le code sera alors considéré comme un verbatim.\nLa couleur syntaxique sera conservée si elle est reconnue par Pandoc:\n\nMarkdown avec ```{.md} , ```{.mf}\nYaml: ```{.yaml}\nhtml, css, sass, js: ```{.html} , ```{.css}, ``{.js}\n\nPour R spécifiquement ``` {{r}} permet d’afficher l’ouverture et la fermeture du moteur R:\n\n```{r}\n# Tout le bloc de codes sera affiché dont ```{r}\n\n1+1\n```",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Les blocs de codes</span>"
    ]
  },
  {
    "objectID": "015-codes.html#options-des-blocs",
    "href": "015-codes.html#options-des-blocs",
    "title": "5  Les blocs de codes",
    "section": "5.2 Options des blocs",
    "text": "5.2 Options des blocs\n\n5.2.1 Introduction des options\nLes options peuvent être activées dans le yaml et/ou dans le bloc de code. La nouveauté avec Quarto et les versions récentes de rmarkdown est de pouvoir renseigner les options directement dans le corps du programme. Cette pratique est recommandée.\nOptions dans le yaml\nOptions qui s’appliqueront par défaut à tout les blocs du document. Dans un projet avec un fichier de configuration _quarto.yml, les options d’un document peuvent contredire celle qui s’applique à tous les documents du projet. Celles du document ont auront au final la priorité sur celles du projet1.\nExemple: si dans le yaml du projet le report des blocs de codes sont désactivées (echo:false), on peut réactiver l’option dans le yaml d’un document particulier avec echo: true.\n\n\nDans le fichier _quarto.yml\n\n---\nproject: \n  type: website\n\nexecute:\n  echo: false\n---  \n\n\n\nDans le Yaml d'un document\n\n---\ntitle: \"page sans affichage des codes\"\n\nexecute:\n  echo: true\n---  \n\nSur le même principe on pourra contredire dans un bloc individuellement une option qui s’applique par défaut à tout le document.\nOptions dans un bloc de codes\n\nPour les options communes à Quarto et Rmarkdown, la méthode ```{r, options} fonctionne toujours.\nNouveauté de Quarto et des versions récentes de rmarkdown: on peut insérer les options directement dans le corps du programme.\nCette nouvelle possibilité prend simplement la forme d’un commentaire introduit par #| au début du programme:\n\nSyntaxe |# option: true/false/expression/none/valeur_numérique....\nLes arguments true/false peuvent être mis en minuscule ou majuscule contrairement aux options renseignées directement dans la déclaration du moteur, qui sont en majuscules.\n\n\nAvec cette nouvelle méthode2:\n```{r}\n#| option1:...\n#| option2:...\n#| option3:...\n\n{{ Code R}}\n\n```\nExemple: pour supprimer l’exécution du code: option eval\n\nOption à l’ouverture du bloc: ```{r, eval= FALSE}\n\n\n```{r, eval=FALSE}\n1+1\n```\n\n\nDans le corps du bloc: #| eval: false\n\n```{r}\n#| eval: false\n\n1+1\n```\n\n\n5.2.2 Options d’exécution et de report des résultats\nLes principales options sont:\n\neval:true/false.\n\nExécution du programme. Si false, le programme sera un simple verbatim.\nPar défaut true.\n\necho: true/false/fenced3\n\nReport du programme dans le document.\nPar défaut true à l’exception du format revealjs (important).\n\nwarning et message: true/false.\n\nAffiche les messages et les warning de l’output.\npar défaut true.\n\n\nDans le yaml on aurait par défaut (sauf revealjs =&gt; echo:false):\n\n\nOptions d'exécution et de report par défaut\n\n---\ntitle: \"XXXXXXXXX\"  \n  \nexecute: \n  eval: true\n  echo: true\n  warning: true\n  message: true\n---\n\n\nEnregistrer et réutiliser les outputs (résultats)\n\nPermet de racourcir la durée de compilation d’une page.\nCertains outputs comme des graphiques peuvent mettre du temps à être exécutés.\nS’il n’ont pas été modifiés, on peut les enregistrer afin qu’ils soit directement ajoutés au document sans nouvelle exécution du programme.\nOption cache:true/false.\n\nDirectement dans le yaml du document: cache: true.\nAu choix dans un bloc de code: #| cache: true.\n\n\nReporter un résultat dans le document\n\nOn peut également dans le corp du document reporter directement un résultat en utilisant un fragment de code, souvent de type objet:\n\n`{moteur} fragment_code`\n\n\nExemple avec le calcul d’une moyenne et son report dans une phrase:\n\n\n\n\nListing 5.1: Calcul moyenne\n\n\nval = c(10,15,5,2,12,7)\nmoy = mean(val)\n\n\n\n\nOn reporte directement la moyenne dans le corp du texte:\n\n\nLa moyenne est de 8.5.\n\n\n\n5.2.3 Graphiques et tableaux\n\n5.2.3.1 Graphiques\n\n[Doc Quarto: Options1]\n[Doc Quarto: Options2]\nLes options sont introduites par fig-: fig-nom_option4\n\nExemple: Titre et son positionnement\nPar défaut les titres sont positionnés en dessous du graphique.\n\nTitre du graphique dans le bloc: fig-cap: \"XXXX\".\nPositionnement: dans le yaml seulement fig-cap-location: bottom (défaut) / top / margin.\n\nLocalisation en haut du graphique:\n\n\nLocalisation du titre des graphiques en haut\n\n---\nfig-cap-location: top\n---\n\nLe titre du graphique:\n#| fig-cap: \"**Position top du titre défini dans le yaml**\"\n\ndata(\"mtcars\")\nx &lt;- mtcars$wt\ny &lt;- mtcars$mpg\nplot(x, y) \n\n\n\n\n\n\n\n\nFigure 5.1: Position top du titre défini dans le yaml\n\n\n\n\n\n\n\n\n\n\n\nRemarque: on peut utiliser du formatage markdown dans le titre.\n\n\n5.2.3.2 Tableaux\nAttention, il ne s’agit pas ici des tableaux générés directement en markdown.\nLes options sont introduites par tbl-nom_option.\nPeu d’options, à retenir principalement le titre avec tbl-cap: \"XXXX\"\n\n[Doc Quarto: Options]\n\nLe titre est ici positionné en haut du tableau par défaut. Si on veut le mettre sous le tableau, dans le yaml du document: tbl-cap-location: bottom.\nChangement de la position du titre dans le yaml:\n---\ntbl-cap-location: bottom\n---\nTitre du tableau dans le bloc5:\n#| tbl-cap: \"Base voitures\"\n#| label: \"tbl-mtcars_df\"\n\ndata(\"mtcars\")\nknitr:: kable(head(mtcars[, 1:4]))\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n\n\nDatsun 710\n22.8\n4\n108\n93\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n\n\nValiant\n18.1\n6\n225\n105\n\n\n\n\n\n\nTable 5.1: Base voitures",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Les blocs de codes</span>"
    ]
  },
  {
    "objectID": "015-codes.html#options-propres-à-quarto",
    "href": "015-codes.html#options-propres-à-quarto",
    "title": "5  Les blocs de codes",
    "section": "5.3 Options propres à Quarto",
    "text": "5.3 Options propres à Quarto\n\nQuarto a introduit une série de nouvelles options propres aux outputs html, spécifiques ou non au yaml.\nDans le yaml, ces options sont des sous options du format html.\n\nDemonstration (cliquer sur &lt;/&gt; Code en haut à droite, ou sur Code au dessus du résultat de l’addition:\n\n\n\n\n\n\n\n5.3.1 Afficher/cacher le bloc de codes à la volée\n\nOption code-fold (yaml et corps de bloc).\nDans le yaml:\n\ncode-fold: false/true/show\nPar défaut l’argument est false.\nSi true: par défaut les blocs sont cachés et on peut les ouvrir individuellement.\nSi show: par défaut les blocs sont ouverts et on peut les cacher individuellement.\n\n\n\n\nAfficher/cacher le code à la volée\n\n---\nformat:\n  html:\n    code-fold: true\n---\n\n\nDans le bloc de code: #| code-fold: false/true/show\n\nExemple (pour un bloc):\nSi #| code-fold:true\n#| code-fold: true\n\n1+1\n\n\nCode\n1+1\n\n\n[1] 2\n\n\nSi #| code-fold:show\n#| code-fold: show\n\n1+1\n\n\nCode\n1+1\n\n\n[1] 2\n\n\n\n\n5.3.2 Accéder à la source du fichier Quarto\n\nIntroduit par l’option code-tools du format html dans le yaml.\nNon compatible avec le format de présentation revealjs…dommage.\n\n\n\nActiver l'accès au fichier source\n\n---\nformat:\n  html:\n    code-tools: true\n---\n\nActive l’ouverture dans une fenêtre du code source du fichier .qmd (sous option source).\nEquivalent à:\n---\nformat:\n  html:\n    code-tools:\n      source: true\n---\nSi l’option code-fold:true est activée, un onglet sera généré en haut et à droite de la page permettant d’afficher le code source .qmd et gérer à la volée l’affichage par défaut des blocs de code.\n---\nformat:\n  html:\n    code-tools:\n      source: true\n\ncode-fold: true\n---\n\n\n5.3.3 Accéder à la documentation web des fonctions\n\nPour R seulement. Implémentation dans Quarto du package downlit.\nPermet d’accéder à la documentation en ligne d’une fonction utilisée dans le programme.\nDans le yaml du document: code-link: true.\n\n\n\n5.3.4 Annotation et titre du bloc\n\n5.3.4.1 Commenter une ou plusieurs lignes de programme: annotation\nTrès utile pour documenter des lignes de programme.\n\nDepuis la version 1.3, Quarto a implémenté une fonctionnalité d’annotation des programmes. Elle permet de commenter une ou plusieurs lignes du programme contenu dans un bloc.\nA la fin d’une ligne on indique un numéro de l’annotation avec #&lt;numero&gt;\nAprès la fermeture du bloc, on rédige le commentaire pour chaque ligne commentée avec:\nnumero. commentaire...\n\nExemple:\n\nDans le bloc de code:\n\n\n\nDans le corp du texte, juste sous le bloc de codes:\n\n1. J'ouvre la base mtcars.\n2. Je récupère les variables wt (x) et mpg (y).\n3. J'exécute un scatter plot.\nRésultat:\n\n\n\n1data(\"mtcars\")\n2x &lt;- mtcars$wt\ny &lt;- mtcars$mpg\n3plot(x, y)\n\n\n1\n\nJ’ouvre la base mtcars\n\n\n2\n\nJe récupère les variables wt (x) et mpg (y)\n\n\n3\n\nJ’exécute un scatter plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemarques:\n\nPour les documents en format html (notebook, revealjs), on peut afficher de manière dynamique les commentaires. Dans le yaml:\n\ncode-annotation: hover: le commentaire est affiché lorsqu’on passe avec la souris sur la ligne. commentée.\ncode-annotation: select: le commentaire est affiché lorsqu’on clique sur le numéro du commentaire à droite de la ligne.\n\nPour les formats non dynamiques (pdf, word…) seulement l’option statique par défaut est disponible. Dans le yaml elle correspond à l’option: code-annotation: below\nIl n’est pas possible de sélectionner le type d’affichage du commentaire pour chaque bloc individuellement.\n\n\n\n5.3.4.2 Ajouter un titre au bloc de code\nPour finir, et à mon sens pas si gadget que cela, on peut ajouter un titre au bloc de code avec l’option filename=\"XXXXX\" directement à la suite du choix du moteur (fonctionne avec r et python: ```{r filename=\"titre\"}\n```{r filename=\"On va faire une addition\"}\n1+1\n```\nRésultat:\n\n\n\nOn va faire une addition\n\n1+1\n\n\n[1] 2\n\n\nOn peut également inséré le titre directement dans le corps du programme avec l’option #| filename: \"titre du programme\"\n```{r}\n#| filename: \"On va faire une addition\"\n\n1+1\n```\n\n\n\n\n\n\nQuelques limites\n\n\n\n\nPour le format PDF le rendu n’est pas terrible, je ne conseille pas de l’utiliser, pour l’instant, dans une documentation.\nVisibleme problème lorsque filename est associé dans un bloc de code avec la mise en forme de plusieurs graphiques sous forme de colonne avec la classe :::{layout=\"[c1,c2...]} ou l’option #| ncol: n [Section 15.3.1]. Le bloc de code est interprété comme un graphique…bizarre. A tester de votre côté.",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Les blocs de codes</span>"
    ]
  },
  {
    "objectID": "015-codes.html#footnotes",
    "href": "015-codes.html#footnotes",
    "title": "5  Les blocs de codes",
    "section": "",
    "text": "Une exception que l’on peut déjà retenir concerne le thème bootstrap appliquée au projet↩︎\nPour Stata les options seront introduites par *|↩︎\nfenced, alternative à ```{r}.↩︎\nrmarkdown: fig.nom_option↩︎\nL’option tbl-label: est explicitée dans la section dédiée aux références croisées↩︎",
    "crumbs": [
      "**Produire une documentation avec Quarto**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Les blocs de codes</span>"
    ]
  },
  {
    "objectID": "021-git1.html",
    "href": "021-git1.html",
    "title": "6  Installation et connection",
    "section": "",
    "text": "6.1 Introduction\nAyant une utilisation assez minimale de git, et plutôt réservée au partage de documentation, je recommande fortement de lire le support réalisé par l’Insee dans la documentation UtilitR, indéxé dans la partie Gallery du site de Quarto. https://www.book.utilitr.org/03_fiches_thematiques/fiche_git_utilisation.",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Installation et connection</span>"
    ]
  },
  {
    "objectID": "021-git1.html#introduction",
    "href": "021-git1.html#introduction",
    "title": "6  Installation et connection",
    "section": "",
    "text": "6.1.1 Principes et atouts de Git\n:GIT WIKI \nSur son utilisation le plus courante et là où il est le plus documenté, l’outil Git permet de réaliser des opérations entre fichiers stockés dans un répertoire local (ou de travail) et un répertoire - plus ou moins - distant (remote). Dans un travail en équipe, sous cet aspect “cloud” , il permettra donc relier plusieurs utilisateurs sur un même projet. Sous son aspect originel de logiciel de contrôle de versions, ces opérations se feront sur des éléments ayant fait l’objet d’un changement entre deux temps choisis par l’utilisateur.\nAttention l’outil git est totalement indépendant des plateformes1 qui font sa popularité, on peut travailler exclusivement en local sur une même machine, en choississant un répertoire de travail/développement et un répertoire qui fera seulement office de stockage à un instant t. Mieux encore, sans logique de transferts et sous le seul angle de contrôle de versions d’un ou plusieurs fichiers, n’importe quel répertoire de travail peut être gité2 pour contrôler toutes les étapes de développement d’un projet.\nCette partie s’inscrivant dans un support dédié à la construction d’une documentation avec un outil de programmation lettrée , on n’abordera donc pas toutes les possibilités et les manipulations offertes par git. C’est donc plutôt sous l’angle d’opérations de transferts de fichiers pour déployer un contenu Quarto qu’est abordé cette partie.\nAtouts:\n\nLes opérations de transferts sont effectuées sur des deltas, c’est à dire sur des modifications qui ont été déclarées par l’utilisateur à un instant t (commit). Ces modifications prennent la forme de création, suppression ou changement du contenu de fichiers.\nOn peut exclure des fichiers de ces opérations de versionnage et de transferts.\nGit permet de garder la trace de toutes les modifications apportées à des fichiers:\n\nHistorique des opérations récupérées sous forme d’une timeline, dont la nature de la modification est indiquée par un titre. Attention ces traces ne sont pas effectuée pas les enregistrements de fichiers mais par une opération spécifique et engendrée par l’utilisateur. Dans le jargon git, cette opération est appelée commit. Le versionnage se fera entre 2 commits même si ces fichiers ont été enregistrés de multiples fois entre ces deux temps.\nOn peut accéder à tous les éléments modifiés. Si on supprime un fichier, git considérera qu’on a supprimé l’ensemble du texte d’un fichier et non physiquement un fichier. On pourra accéder à tout moment à la totalité du texte supprimé via la suppression du fichier.\nLa visualisation des modifications intervenues dans des fichiers est facilitée par des codes couleurs: Rouge pour l’état au commit précédent, Vert pour l’état au nouveau commit.\n\nLes branches: Dans un répertoire versionné par git, une branche dite principale automatiquement créée (main ou master3). On peut créer et travailler sur des branches parallèles et contrôler la fusion des éléments modifiés avec la branche principale. Dans un travail collaboratif via une opération de clonage, le/la propriétaire du dépôt distant sera en charge de valider et de réaliser ces opérations de fusion avec la branche principale. Toutes ces opérations seront également indéxées dans le versionnage, et on pourra suivre l’historique de création, modification et fusion des branches secondaires avec la branche principale.\nLes conflits: oui c’est un atout de git…\n\n\n\n\n\n\n\nClonage et duplication\n\n\n\nEn collaboratif la branche principale est clonée par les personnes participant au projet, le propriétaire du répertoire distant donnant les autorisations dans ce sens aux autres participant.e.s. Le travail sur branches sera ici plus que recommandé, en particuliers lorsque plusieurs personnes travailleront sur un même fichier. Le propriétaire du dépôt réalisera les fusions, et donc la mise à jour de la branche principale. Sur les célèbres plateformes, si le dépôt est public il pourra être librement cloné. et également un trav Git permet aussi un travail collaboratif plus ouvert, hors équipe, en donnant la possibilité à quiconque de proposer une modification. Le répertoire (public) pourra être dupliqué (fork). Les modifications des fichiers seront systématiquement envoyés sur une branche secondaire du dépôt distant. Au propriétaire de les accepter ou non.\n\n\n\n\n6.1.2 Github versus Gitlab\n\n6.1.2.1 Github\n:GITHUB WIKI\n\nPropriété de Microsoft depuis 2018. Risque de tout perdre si Microsoft décide de supprimer l’outil. L’exemple de l’IDE Atom supprimé en 2019 après son rachat est un cas d’école récent.\n\nSeulement sur le site plateforme. Pas de récupération posible du code source pour installer un git local ou institutionnel (Humanum, Insee, Service informatique de l’Ined…).\n\nFonctionnalités clés en main, plus facile d’accès a priori pour les personnes moins à l’aise avec le jargon informatique.\n\nA noter l’existence d’un outil appelé Github Desktop qui facilite la réalisation les opérations git de base, avec en plus la possibilité de switcher à la volée d’un projet à un autre. A titre personnel, je réalise toutes les opérations avec mes depôts Github à l’aide de ce github desktop.\n\nQuarto ou plutôt Posit en général joue la carte 100% Github avec l’intégration d’outils dédiées. Plus généralement les package R pour faciliter la connection initiale entre RStudio et un compte sur une plateforme git sont pensés pour fonctionner avec cette plateforme. Avec le package usethis on peut générer un dépôt github sans passer par la case clonage, et donc par la création du dépôt sur la plateforme au préalable.\nDu côté moins, en mode private (restreint) on ne peut pas déployer de pages sans passer à la caisse. C’est très ennuyeux.\nDu côté plus, toujours en mode private Github ne limite pas (encore) le nombre de collaboration. Sur Gitlab, ce nombre a été récemment limité à 5 personnes.\n\n\n\n6.1.2.2 Gitlab\n:GITLAB WIKI\n\nMême si la composition du capital peut faire grincer quelques dents, Gitlab reste relativement indépendant d’un géant comme Microsoft.\nRécupération du code source de Gitlab, ce qui rend possible la création d’une plateforme Git sur un serveur institutionnel .\nPour le déploiement de contenu type html/Qharto, on aura quelques étapes supplémentaires à réaliser.\nCôté plus, en mode private on peut déployer des pages sans passer à la caisse contrairement à Github. On peut également gérer très librement ses adresses url. C’est top.\nCôté moins, toujours en mode private, forte limitation du nombre de collaborateurs à 5 (anciennement 10). C’est ennuyeux.\nRetour d’expérience un peu désagréable: avec un compte strictement individuel, possible prise contact par l’équipe commerciale de Gitlab, avec relances si on ne souhaite pas donner suite à leur proposition de rendez-vous.",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Installation et connection</span>"
    ]
  },
  {
    "objectID": "021-git1.html#installation",
    "href": "021-git1.html#installation",
    "title": "6  Installation et connection",
    "section": "6.2 Installation",
    "text": "6.2 Installation\n\nGit étant indépendant des fameuses plateformes Github et Gitlab, il doit être installé. Mais peut-être est-il déjà installé? C’est normalement le cas avec RStudio. Je conseille néanmoins d’installer la dernière version de git directement, ce qui permettra également de l’utiliser en dehors de RStudio.\n\nVérification dans un terminal (dont Rstudio): git --version\nSinon téléchargement sur le site officiel: https://git-scm.com/download/\n\n\nAprès l’installation ou la vérification de l’installation de Git:\n\nNe pas oublier d’associer git à une adresse mail, et accessoirement à votre civilité ou à un avatar.\n\nDans un terminal (Rstudio, invite commande windows,…):\ngit config --global user.email EMAIL-ADRESSE\ngit config --global user.name \"PRENOM et/NOM\"",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Installation et connection</span>"
    ]
  },
  {
    "objectID": "021-git1.html#connection-initiale-avec-une-plateforme",
    "href": "021-git1.html#connection-initiale-avec-une-plateforme",
    "title": "6  Installation et connection",
    "section": "6.3 Connection initiale avec une plateforme",
    "text": "6.3 Connection initiale avec une plateforme\n\n\n\n\n\n\nNote\n\n\n\n\nProcédures de connection via https et clé SSH effectuées fin 2023/début 2024 et mai 2024 via le serveur margaux de l’Ined.\n\nHTTPS (token/mdp):\n\npackage usethis: github.\npackage gitcreds: github et gitlab.\n\nSSH:\n\nprotocole: ed25519.\n\n\nMobile Ined:\n\nConnection https existantes pour Github et Gitlab =&gt; nouveaux token générés.\nPas de connection SSH existante avec protocole ed25519. Création d’une nouvelle clé.\n\nServeur margaux Ined (mai 2024)\n\nParti de zero.\nHTTPS: Nouveau token généré pour cette connection.\nPas de connection SSH existante. Création d’une nouvelle clé avec protocole ed25519.\n\n\n\n\n\n6.3.1 Connection via un token/password\n\n6.3.1.1 Github\nGénérer un Token\n\nPackage usethis\n\n\n\n\nPackage usethis \n\ninstall.packages(\"usethis\")\nlibrary(usethis)\n\n\nEn exécutant la commande suivante, une fenêtre s’ouvre pour générer directement un token dans github.\n\n\n\nCréation d'un token\n\nusethis::create_github_token()\n\n\n\n\n\n\n\n\nNote: au cas où… ce token n’est bien évidemment plus valide.\n\nAttention à la date d’expiration du token.\n\nPar défaut 30 jours, on peut augmenter la durée.\nLa durée maximale est d’un an.\n\nCliquer en bas de la page sur Generate token.\nOn reçoit un mail à la création du token et quelques jours avant sa date d’expiration.\n\nAjouter le token dans RStudio\n\nPackage gitcreds\n\n\n\n\nPackage gitcreds\n\n install.packages(\"gitcreds\")\n library(gitcreds)\n\n\n\nPar défaut il va sélectionner Github, on peut toutefois renseigner l’adresse générique de la plateforme\n\n\n\n\nAjouter le token dans Rstudio\n\nlibrary(gitcreds)\ngitcreds_set(url = \"https://github.com\")\n\n\nSi aucun token n’a déjà été ajouté, on colle directement dans la console la valeur du token généré dans l’étape précédente .\n? Enter password or token: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nSi on change par la suite de token, plusieurs options sont disponibles:\n-&gt; Your current credentials for 'https://github.com':\n\n  protocol: https\n  host    : github.com\n  username: PersonalAccessToken\n  password: &lt;-- hidden --&gt;\n\n-&gt; What would you like to do? \n\n1: Keep these credentials\n2: Replace these credentials\n3: See the password / token\nL’option 2 permet de changer de token.\n\n\n6.3.1.2 Gitlab\nGénérer un token\nLe token/password est généré directement sur le compte Gitlab.\nEdit profile =&gt; Acces Token =&gt; add new token.\n\n\n\n\n\n\n\n\n\nEdit profile\n\n\n\n\n \n\n\n\n\n\nAccess token\n\n\n\n\n \n\n\n\n\n\nPersonal access token\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSélection Read/write repository\n\n\n\n\n \n\n\n\n\n\nRécupérer le token\n\n\n\n\n\nOn peut accéder sur Github à la page de création des token en allant sur Profile  Settings (tout en bas)  Developer Settings (Menu vertical à gauche).\nAjouter le token dans RStudio\n\nMême procédure qu’avec Github avec le package gitcreds.\nOn devra explicitement indiquer l’adresse générique de Gitlab dans la fonction.\n\n\n\n\npackage gitcreds\n\ninstall.packages(\"gitcreds\")\nlibrary(gitcreds)\n\n\n\n\n\nAjouter dans Rstudio le token\n\nlibrary(gitcreds)\ngitcreds_set(url = \"https://gitlab.com\")\n\n\nSi aucun token n’est déjà été ajouté, on colle directement dans la console la valeur du token généré dans l’étape précédente .\nSélection : 2\n\n-&gt; Removing current credentials...\n\n? Enter new password or token: \n? Enter password or token: &lt;Coller ici le token qui a été généré et copié dans gitlab&gt;\nSi on change par la suite de token, plusieurs options sont disponibles:\n-&gt; Your current credentials for 'https://github.com':\n\n  protocol: https\n  host    : github.com\n  username: PersonalAccessToken\n  password: &lt;-- hidden --&gt;\n\n-&gt; What would you like to do? \n\n1: Keep these credentials\n2: Replace these credentials\n3: See the password / toke\n\n\n6.3.1.3 Vérifier la connection\nVous pouvez vérifier la connection en clonant un dépôt. Coller par exemple le lien suivant lors de la création du projet:\n\n\nTest dépôt Github\n\nhttps://github.com/mthevenin/test_connection_formation.git\n\n\n\nTest dépôt Gitlab\n\nhttps://gitlab.com/mthevenin/test_connection_formation.git\n\n\n\n\n6.3.2 Via une clé de cryptage SSH\n:GIT SSH \nProcédure un peu plus longue, mais à l’exception d’une étape la procédure est commune aux deux plateformes.\n\nJe ne traiterai pas du sujet HTTPS (token) versus SSH (cryptage), mais visiblement les préférences que je peux lire penche plutôt vers le HTTPS. Je note néanmoins beaucoup plus de tutoriels orientée vers la solution SSH.\nOn peut paramétrer et utiliser les deux techniques de sécurité, le choix de l’une ou l’autre pourra se faire lors du clônage d’un dépôt distant.\nClé SSH: repose sur un cryptage.\n\nLes protocoles de cryptage évolue dans le temps. C’est la quatrième et dernière génération qui est proposée par RStudio.\nCette dernière génération est appelée ed25519.\n\nUne même clé SSH peut-être utilisée pour Github et Gitlab. Lorsqu’on travaille sur plusieurs machine différentes (dont une version serveur de Rstudio) on devra engendré autant de clés SSH dans RStudio pour établir la connexion.\n\n\n6.3.2.1 Générer une clé dans Rstudio\n\nTools \nGlobal Options \nGit/SVN dans la barre de menu verticale \nCreate SSH key: On génère la clé sous la zône d’enregistrement \nView public key: On visualise et récupère la clé SSH en la copiant \n\n\n\n\n\n\n\n\n\n\nCréation de la clé SSH\n\n\n\n\n \n\n\n\n\n\nRécupération de la clé SSH\n\n\n\n\n\n\n\n6.3.2.2 Github\n\n\n\n\n\nflowchart LR\n  A(Avatar) --&gt; B(Settings)\n  B --&gt; C(SSH and GPH Keys)\n  C --&gt; D(New SSH key)\n    D --&gt; E(Coller la clé)\n    subgraph AJOUTER LA CLE\n    E --- F(Mettre un titre)\n    F --&gt; G(ADD SSH KEY)\n    end\n\n\n\n\n\n\n\nCliquer sur l’avatar à droite \nSur la barre verticale qui s’ouvre, aller sur Settings \nAller sur la page SSH and GPH keys \nAller sur New SSH key en haut à droite \nColler la clé générée dans RStudio, si on ajoute plusieurs clés, renseigner le titre pour identifier son rôle \nCliquer sur Add SSH key\n\n\n\n\n\n\n\n\n\n\nAller sur l’avatar\n\n\n\n\n \n\n\n\n\n\nAller sur settings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPage SSH et GPH keys\n\n\n\n\n \n\n\n\n\n\nAjouter la clé\n\n\n\n\n\n\n\n6.3.2.3 Gitlab\n\n\n\n\n\nflowchart LR\n  A(Avatar) --&gt; B(Preference)\n  B --&gt; C(SSH KEY)\n  C --&gt; D(Add new key)  \n    D --&gt; E(Coller la clé)\n    subgraph AJOUTER LA CLE\n    E --- F(Mettre un titre)\n    F --- G(Changer la date d'expiration)\n    G --&gt; H(ADD KEY)\n    end\n\n\n\n\n\n\n\nCliquer sur votre avatar \nAller sur preference \nCliquer sur SSH Keys \nCliquer sur Add new key \nColler votre clé générée dans RStudio \nAjouter un titre si vous comptez avoir plusieurs clés \nModifier la date d’expiration (X si aucune expiration) \nCliquer sur Add key\n\n\n\n\n\n\n\n\n\n\nAvatar=&gt;Préférences\n\n\n\n\n\n\n\nAller dans SSH keys\n\n\n\n\n\n\n\nAjouter la clé\n\n\n\n\n\n\n\n6.3.2.4 Activer la clé\n\n\n\n\n\n\nNote\n\n\n\nCette étape peut être réalisée directement après avoir générée la clé\n\n\nDans le terminal:\n\nVérifier que l’authentification SSH fonctionne.\n\neval $(ssh-agent -s)\nOutput, par exemple: Agent pid 1463.\n\nAjouter la clé\n\nssh-add ~/.ssh/id_ed25519\nOutput: Identity added: /c/Users/thevenin_m/.ssh/id_ed25519 (ined\\thevenin_m@MOB0XXXX)\nSi un message de ce type apparait, taper yes\nThe authenticity of host 'github.com (140.82.121.4)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvXXXXXXX\\(*_*)/XXXXXXXXXr4UvCOqU.\nThis key is not known by any other names.\nOn peut enfin vérifier que tout est ok avec les messages de bienvenu suivants:\n\nGithub:\n\nssh -T git@github.com\nHi mthevenin! You've successfully authenticated, but GitHub does not provide shell access.\n\nGitlab:\n\nssh -T git@gitlab.com\nWelcome to GitLab, @mthevenin!\n\n\n\n6.3.2.5 Vérifier la connection\nVous pouvez vérifier la connection en clonant un dépôt. Coller par exemple le lien suivant lors de la création du projet:\n\n\nTest dépôt Github\n\ngit@github.com:mthevenin/test_connection_formation.git\n\n\n\nTest dépôt Gitlab\n\ngit@gitlab.com:mthevenin/test_connection_formation.git\n\n\nSi lors du clonage le message suivant s’affiche, taper yes:\n\n\n\n\nNormalement cela ne devrait pas être le cas si vous n’avez oublié d’exécuté dans le terminal ssh-add ~/.ssh/id_ed25519.",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Installation et connection</span>"
    ]
  },
  {
    "objectID": "021-git1.html#footnotes",
    "href": "021-git1.html#footnotes",
    "title": "6  Installation et connection",
    "section": "",
    "text": "On parle également de forge↩︎\nj’ai pas trouvé mieux↩︎\nL’assassinat de Georges Floyd en 2020 est passé par là↩︎",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Installation et connection</span>"
    ]
  },
  {
    "objectID": "022-git2.html",
    "href": "022-git2.html",
    "title": "7  Clonage, pull, push et branches",
    "section": "",
    "text": "7.1 Création d’un dépôt git et son clonage\nUne fois la connection entre RStudio et une plateforme établie:",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Clonage, pull, push et branches</span>"
    ]
  },
  {
    "objectID": "022-git2.html#création-dun-dépôt-git-et-son-clonage",
    "href": "022-git2.html#création-dun-dépôt-git-et-son-clonage",
    "title": "7  Clonage, pull, push et branches",
    "section": "",
    "text": "Les opérations se feront toujours dans un projet.\nLa méthode la plus employées est la création du dépôt à distance, il est toutefois possible de tout réaliser via R (package usethis) si on est sur la plateforme Github\n\n\n7.1.1 Création d’un dépôt distant\n\nGitlabGithub\n\n\n\nSe mettre sur homepage si nécessaire en cliquant sur l’icone gitlab  (en haut à gauche)\nCliquer sur New Project\n\nCreate blank project [pour ce chapitre]\nCreate from template [pour le chapitre suivant]\n\n\n\n7.1.1.1 Création d’un dépôt sans utiliser de template\n\n\n\n\n\n\nPar défaut: le dépôt est en mode private. Il n’est visible que par les personnes collaborant au projet.\n\nSaisir un nom de dépôt.\nOption de l’url:\n\nOn peut choisir son nom d’avatar après https://gitlab.com/\nPar défaut le dossier final est le nom du dépôt saisi. On peut le changer.\n\nPrivate/Public:\n\nPar défaut private. On peut le passer en mode public.\nOn pourra changer ce mode dans les paramètres du projet [voir plus loin].\n\nGarder la création d’un fichier README.md.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.1.1.2 Changer la visibilité et supprimer un projet\n\nAller dans la barre verticale à gauche: Setting  General\nVisibilité: Passer de public à private et inversement:\n\nCliquer sur expand Visibility, project features, permissions  Project visibility .\n\nSupprimer un dépôt: Tout en bas de la page aller sur Advanced.\n\n\n\n\n\n\n\n\n\n\n\n\nFichier .gitignore\n\n\n\nCe fichier est important. A la création du dépôt distant, il n’est pas généré. Pas de soucis, avec Rstudio il sera automatiquement ajouté à votre répertoire local lors de la création du projet, avec déjà certains fichiers exclus des transferts (.Rproj.user, .Rhistory, .RData, .Ruserdata).\n\n\n\n\n\n\nSur la page du profil, aller sur Repositories et cliquer sur New.\nDonner un nom au répertoire.\nSélectionner le type de visibilité (par défaut Public). On pourra changer à souhait de visibilité dans les paramètres du dépôt (Settings).\nSélectionner l’ajout un fichier README.md.\nVous pouvez ajouter un fichier .gitignore (dont un avec un template R), mais celui ci sera généré automatiquement avec la création du projet sous RStudio.",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Clonage, pull, push et branches</span>"
    ]
  },
  {
    "objectID": "022-git2.html#clonage-dun-dépôt-distant-dans-rstudio",
    "href": "022-git2.html#clonage-dun-dépôt-distant-dans-rstudio",
    "title": "7  Clonage, pull, push et branches",
    "section": "7.2 Clonage d’un dépôt distant dans RStudio",
    "text": "7.2 Clonage d’un dépôt distant dans RStudio\n\nLes manipulations sont strictement identiques avec Gitlab et Github.\nLe clonage du répertoire distant dans Rstudio se fera ici via protocole HTTPS.\n\nLes étapes:\n\n7.2.1 Dans le répertoire distant\n\nDans le dépôt cliquer sur l’icône Code \nCopier le lien du dépôt (ici via https).\n\n\n\n\n\n\n\n\n7.2.2 En local dans RStudio\n\nCréer un nouveau projet: File  New project\nSélectionner Version control \nGit \nColler le lien récupéré dans le dépôt \nSélectionner un répertoire pour le projet \nCréer le projet\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n \n\n\n\n\n\n\nLorsque le projet a été créé après clonage du dépôt distant:\nUn onglet Git apparait dans l’environnement:\n\nUn menu permet d’effectuer directement des opérations de versionnage et de transferts de fichiers.\nDes fichiers sont affichés:\n\nLes fichiers générés à la création du projet comme .gitignore et ici test_support.Rproj. Ce sont donc des nouveaux éléments par rapport au dépot distant.\n\nDes fichiers ne sont pas affichés:\n\nLe fichier README.md généré lors de la création du dépôt distant puis cloné sur le répertoire local.\nLes fichiers renseignés automatiquement dans le fichier .gitignore: .Rproj.user, .Rhistory, .RData, .Ruserdata.\n\nOn peut toujours visualiser l’ensemble des fichiers du projet sont dans la fenêtre Files.\nDans le terminal (bash):\n\nLe répertoire est calé sur la racine du projet.\nLa branche de destination est indiquée entre parenthèses, main ou (master).\n\n\nA ce stade, on peut déjà mettre à jour le répertoire distant avec les éléments générés lors de la création du projet.\n\n\n\n\n\n\nGénérer un projet et créé un dépot sur Github à partir de R avec le package usethis\n\n\n\n\n\nA faire peut être sous forme de fiche pour ne pas alourdir ce support. Avec trois fonctions du package usethis, on peut générer relativement rapidement un dépôt github associé à un projet tout en restant sur la console R.\nRapidement les différentes étapes:\n\nInstallation et chargement du package usethis.\nCréation d’un projet R: fonction create_project().\nCréation d’une instance git dans le projet: use_git().\nCréation d’un dépôt distant sur github: use_github().\n\nPrévoir la création de deux sessions RStudio lors de ces étapes.",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Clonage, pull, push et branches</span>"
    ]
  },
  {
    "objectID": "022-git2.html#les-principales-opérations-git-pour-transférer-des-fichiers",
    "href": "022-git2.html#les-principales-opérations-git-pour-transférer-des-fichiers",
    "title": "7  Clonage, pull, push et branches",
    "section": "7.3 Les principales opérations git pour transférer des fichiers",
    "text": "7.3 Les principales opérations git pour transférer des fichiers\n\n\n\n\n\n\nImportant\n\n\n\nEncore une fois, on reste ici sur un objectif de déploiement d’une documentation. Les commandes git status, git add ou git commit sont avant tout des opérations permettant d’effectuer le versionnage du projet: la première pour vérifier le statut des fichiers (modification, création, suppression), la seconde pour sélectionner des fichiers à versionner, et la troisième pour figer un état du projet.\nPour des raisons pédagogiques on privilégiera dans un premier temps l’exécution par clic bouton dans la fenêtre git de Rstudio. Néanmoins, on peut conseiller de passer directement par les commandes, par défaut très simple, via le terminal.\n\n\n\n7.3.1 Statut et séléction des fichiers\nDans l’onglet Git on peut sélectionner les fichiers qui vont être transférés sur le dépôt distant en les cochant (colonne Staged). Leur statut passe de ? (jaune) à A (Added).\nRemarque: le statut des fichiers peut être visualisé dans le terminal avec la commande git status. Cette commande ne réalise aucune opération.\n\n\n\n\n\nS’il y a beaucoup de fichiers1, il est préférable de passer directement par la ligne de commande dans le terminal, surtout si on souhaite sélectionner l’ensemble.\nDans le terminal, pour sélectionner et ajouter un ou plusieurs fichiers au versionnage:\n\n\nAjout d'un fichier\n\ngit add nom_fichier\n\n\n\nAjout de tous les éléments modifiés\n\ngit add .\n\n\n\n7.3.2 Fixer un état de la chronologie du projet: commit\n\nDans l’onglet GIT: cliquer sur Commit .\n\nOn remarque que le contenu texte des fichiers est affiché. Ici tout est en fond vert car ce sont des nouveaux fichiers et non des modifications de fichiers existants.\nOn doit obligatoire renseigner l’objet de ce commit dans la fenêtre Commit message: par exemple ici “First add”. On valide avec bouton Commit.\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n \n\n\n\n\n\n\n\nCommande du terminal:\n\n\n\nSyntaxe de la commande commit\n\ngit commit -m \"message/titre\"\n\n\n\n7.3.3 Transférer les fichiers du local au distant: push\nPour effectuer ce transfert on fait un PUSH.\nFèche montante dans la fenêtre git ou dans la fenêtre commit.\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\nDans le terminal:\n\n\nTransférer les fichiers\n\ngit push\n\nEn résumé le transfert peut être effectué rapidement dans le terminal avec 3 commandes, git status n’ayant qu’une visée informative. Si on sélectionne tous les fichiers modifié depuis le précédents commit:\ngit add .\ngit commit --m \"objet/titre\"\ngit push\nSur le répertoire distant, ici sur Gitlab, les deux fichiers ont bien été ajoutés.\n\n\n\n\n\n\n\n7.3.4 Du distant au local: pull\nHors travail via des branches secondaires qui seront fusionnées avec la branche principale, il n’est pas conseillé de modifier directement les fichiers du projet dans répertoire distant. Si c’est le cas2, il ne sera pas possible de faire remonter directement avec un PUSH le local vers le distant. Il faudra au préalable une synchronisation descendante du distant vers le local. Cette opération est réalisée avec un PULL.\n\n\n\n\n\n\nAvertissement\n\n\n\nS’il n’est pas conseillé d’éditer un fichier manuellement sur le distant, ça l’est est encore moins de modifier sans synchronisation préalable un même fichier sur le local et le distant à partir d’une même version du projet. Sinon cela sera un passage assuré vers la case CONFLICT… et il faudra choisir entre les deux versions modifiées.\n\n\nExemple en modifiant le fichier README.md dans le dépôt distant (gitlab).\n\nDans le dépôt distant, aller sur le fichier README.md \nCliquer sur le bouton edit \nSur Gitlab préférer l’option Edit a single file \nOn versionne avec le bouton Commit change en bas (ici Update Readme.md, mais on peut changer le titre du commit).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDe retour sur le répertoire local, si on veut PUSHER des modifications locales (hors fichier Readme.md), l’opération sera rejetée. Il faut donc que les modifications apportées aux dépôt distant soient récupérées en local.\nPar exemple ici, on a ajouté un nouveau fichier: ProgrammeR.R. La fenêtre indique que le push a été rejeté:\n\n\n\n\n\nPour effectuer cette récupération des éléments modifiés directement dans le dépôt distant et mettre les deux répertoire sur un même niveau, il faut effectuer un PULL:\n\nVia l’onglet Git + cliquer sur PULL.\nVia la fenêtre commit + cliquer sur PULL.\nVia le terminal utiliser la commande git pull.\n\nUne fois cette opération réalisée, le nouveau programme pourra êtré déposé sur le dépôt distant.\nAvec les commandes:\n\n\nrécupération des modifications dans le dépôt distant\n\ngit pull\n\n\n\nAjout d'un fichier dans le dépôt distant \n\ngit add .\ngit commit --m \"Add ProgrammeR.R\"\ngit push\n\n\n\n\n\n\n\nImportant\n\n\n\nL’opération PULL ne supprimera pas le fichier ProgrammeR.R créé dans le répertoire local et absent du dépôt distant. Il n’existe pas en distant, donc pas de delta sur ce niveau. La mise à jour ne concernera que la modification du fichier README.md.\nPar contre, si on supprime un fichier sur le dépôt distant et qu’il est présent sur le répertoire local, il sera supprimé du local lors du PULL. En cas de regret pas de panique, la suppression aura fait l’objet d’un commit et on pourra donc toujours récupérer cet éléments supprimé.\nSi en local on avait modifié le fichier Readme, à une virgule ou à un espace près, lui même modifié préalablement sur le dépôt distant….CONFLICT. Et c’est justement ce qu’on va faire dans la section suivante.",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Clonage, pull, push et branches</span>"
    ]
  },
  {
    "objectID": "022-git2.html#les-conflits",
    "href": "022-git2.html#les-conflits",
    "title": "7  Clonage, pull, push et branches",
    "section": "7.4 Les conflits",
    "text": "7.4 Les conflits\nOn va générer un conflit très simple sur un fichier readme.md en l’éditant dans un premier temps sur le dépôt distant puis sur le répertoire local, sans avoir effectué un pull.\n\nEdition sur le dépot distant avec le texte “Modification du readme dans gitlab”\n\nApplication d’un commit\n\nEdition sur le répertoire local avec le texte “Modification du readme dans RStudio”\n\nTentative de pusher cet modification dans le répertoire distant\n\n\nRésultat:\n\nun message d’erreur apparait signalant le rejet du push.\nSi on fait git pull:\n\nle fichier readme dans la fenêtre git est tagé en jaune\nDans l’éditeur, le fichier est modifié: la première modification dans gitlab est reportée.\nIl va falloir choisir qu’elle modification on veur apporter au projet.\n\n\nL’état dans RStudio au moment du conflit\n\n\n\n\n\nConflit\n\n\n\n\nL’ensemble des opérations effectuées:\n\n\n\n\n\nRésolution du conflit\n\n\n\n\nDans le fichier readme.md la partie en conflit est balisée et la modification effectuée en amont sur gitlab a été reportée:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n  Modification du readme dans RStudio\n=======\nModification du readme dans gitlab  \n&gt;&gt;&gt;&gt;&gt;&gt;&gt; 7c9442d47454d13263230b659af853eeed84afe5\nRésolution du conflit\nOn va donc devoir choisir entre les deux modifications. Ici on va prendre celle réaliser sur RStudio:\n\nOn conserve le texte de la modification RStudio\nOn supprime les balises\n\n  Modification du readme dans RStudio\n\nOn refait l’opération de transfert du local au distant\n\n\n\n\n\n\nConflit\n\n\n\n\nEt tout rentre dans l’ordre \\(^_^)/\nCela va nous amener tout naturellement à parler du travail sur des branches secondaires à la branche principale.",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Clonage, pull, push et branches</span>"
    ]
  },
  {
    "objectID": "022-git2.html#introduction-au-travail-sur-les-branches",
    "href": "022-git2.html#introduction-au-travail-sur-les-branches",
    "title": "7  Clonage, pull, push et branches",
    "section": "7.5 Introduction au travail sur les branches",
    "text": "7.5 Introduction au travail sur les branches\n\nDans un travail en équipe, la question ne se pose même pas…oui. Et quelques soit le partage des rôles: travail sur des fichiers différents ou travail sur des mêmes fichiers. Important: le propriétaire du dépôt devra également travailler sur une branche secondaire…aucun privilège sur ce côté là.\nEn solo, la pratique de travail sur branche(s) secondaire(s) est recommandée. Je pense toutefois que cela dépend de ce qu’on fait:\n\nUne documentation Quarto ou Rmarkdown…pas encore convaincu.\nUn programme d’analyse… pourquoi pas.\nLe dévelopement d’une application, d’une fonction, d’un package: cela pourra être bien utile lorsqu’on sera amené à tester plusieurs voies de programmation.\n\n\nEn restant en local, on validera les modifications réalisées dans une branche annexe sur la branche principale par une opération de fusion (git merge). On pourra également fusionné dans l’autre sens si des modifications on été faites sur la branche principale (mais ce n’est pas le but). Pour une fusion sur un dépôt distant, par exemple localisé sur Github ou Gitlab, une demande de fusion est effectuée préalablement. Elle est appelée pull request. C’est au propriétaire du dépôt de valider les modifications, et en cas de conflit avec la branche principale la fusion sera complètement bloquée.\nLe travail sur branches secondaires permet donc de conserver l’intégrité à tout moment de la branche principale. Sur le même principe une branche secondaire peut se voire attribuer elle-même une ou plusieurs secondaires. Il n’y a donc pas de limite à la ramification.\nEn cas de conflit lors d’une demande de fusion:\n\nEn local les éléments de conflit seront reporté sur la branche secondaire, et la fusion ne sera possible qu’une fois sa résolution réalisée. Une remarque s’impose ici. Si on ne travaille pas sur la branche principale, ce qui doit être la pratique lorqu’on développe sur une branche secondaire, aucun conflit ne doit pouvoir se produire.\nEn distant et en équipe avec un pull request, la fusion étant bloquée c’est à la personne qui a fait la demande de fusion de résoudre le conflit en local. Les éléments entrant en conflit avec la branche principale seront reportés sur sont répertoire au niveau local. Une fois le conflit résolu, il devra effectuer un nouveau pull request.\n\nTout ceci étant à ce stade bien abstrait, on va par l’exemple faire quelques opérations sur branche secondaire avec RStudio: un premier exemple en restant au niveau local et un second exemple avec un pull request sur un dépôt github.\nPour le premier exemple on va utiliser l’interface html dynamique ungit.\n\n7.5.1 Utilisation basique des branches en local\n\nCréation d’un projet Rstudio\n\nNew project =&gt; New directory =&gt; New directory. On coche la case Create with a Git repository\n\nDans le terminal, on s’assure d’en avoir 2. Dans l’un des deux on ouvre l’interface ungit avec tout simplement ungit. On switch sur l’autre terminal.\n\n\n\n\n\n\nCréation du projet avec répertoire git\n\n\n\n\n.3 Premier commit sur la branche principale avec la création d’un nouveau fichier\ntouch prog.R\ngit add .\ngit commit -m \"first add\"\n\n\n\n\n\nCommit sur la branche principale\n\n\n\n\nCréation d’une branche\n\nCommande git branch\nSyntaxe: git branch nom_branche\n\nAller sur la nouvelle branche\n\nCommande git checkout\nSyntaxe: git checkout nom_branche\n\nIci on va appelé la nouvelle branche modif:\ngit branch modif\ngit checkout\n\n\n\n\n\nCréation d’une nouvelle branche et switch sur cette branche\n\n\n\n\nOn va modifier le fichier prog.R\n1+1\n2+2\n3+3\nOn fait sur la nouvelle branche un commit sur cette modification.\ntouch prog.R\ngit add .`\ngit commit -m \"modif prog\"\n\n\n\n\n\nCommit sur une modification de prog.R dans la branche secondaire\n\n\n\n\nFusion dans la branche principale des modifications réalisées dans la branche secondaire\n\nOn retourne dans la branche principale avec git checkout master\nOn remarque que le fichier prog.R est dans l’état avant sa modification dans la branche modif. Dans l’interface d’ungit l’arborescence est clairement indiquée.\n\n\n\n\n\n\nRetour sur la branche principale\n\n\n\n\n\nPour fusionner le commit dans la branche principale:\n\nCommande git merge\nSyntaxe: git merge nom_branche\n\n\nIci:\ngit merge modif\nLes modifications apportées au fichier prog.R lui sont alors appliquées dans la branche principale\n\n\n\n\n\nFusion des modifications dans la branche principale\n\n\n\n\n\n\n7.5.2 Fusion d’une branche secondaire sur un dépôt distant (Github)\nCréation d’un dépôt distant - clonage - modification une branche secondaire\n\nOn va générer un dépôt distant sur github (pull_request)\nOn va le cloner dans un projet R\nOn va créer une branche secondaire (modif). Dans cette branche:\n\nOn va créer un fichier (prog.R) et le modifier\nOn fait un commit sur ces modifications\n\n\n\n\n\n\n\nEngendrer un pull request sur le dépôt distant\nEn restant dans la branche secondaire on utilise git push origin nom_branche. Ici:\ngit push origin modif\nEn output du terminal, il est indiqué qu’un pull request a été ajouté au dépôt distant.\n$ git push origin modif\nEnumerating objects: 6, done.\nCounting objects: 100% (6/6), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (5/5), 550 bytes | 110.00 KiB/s, done.\nTotal 5 (delta 0), reused 0 (delta 0), pack-reused 0\nremote:\nremote: Create a pull request for 'modif' on GitHub by visiting:\nremote:      https://github.com/mthevenin/pull_request/pull/new/modif\nremote:\nTo https://github.com/mthevenin/pull_request.git\n * [new branch]      modif -&gt; modif\nLorsqu’on retourne sur le dépôt distant:\n\n\n\n\n\nLa branche main sur le dépôt distant\n\n\n\n\nSur le dépôt distant, la branche main n’a pas été modifiée. Seulement le fichier readme généré à la création est présent.\nSi on switch sur la branche modif, les fichiers qui ont fait l’objet du commit sont bien présents.\n\n\n\n\n\nLa branche modif sur le dépôt distant\n\n\n\n\nLorsqu’on clique sur Compare & pull request on est invité à proposer une demande de fusion au propriétaire du dépôt. On valide la demande en cliquant sur Create pull request\n\n\n\n\n\nFaire une demande de fusion\n\n\n\n\nEn collaboratif, le propriétaire sera prévenu par mail qu’une demande de fusion a été effectuée. Ici, en solo, la fenêtre de validation s’ouvrira directement. La présence de conflits sera indiquée. Si tout est ok, on valide la fusion la fusion en cliquant sur Merge pull request puis sur Confirm merge. Si un conflit est présent, il ne sera pas possible d’effectuer cette fusion.\n\n\n\n\n\nValidation de la fusion\n\n\n\n\nLorsqu’on revient sur la branche principale du dépôt distant\n\n\n\n\n\nLa branche main après fusion\n\n\n\n\nEt sur la branche principale en local?\nElle n’a pas été synchronisée. Même si on ne travaille pas dessus, on peut rapidement effectuer cette synchronisation avec un pull.\ngit checkout main\ngit pull\nL’output:\n$ git checkout main\nSwitched to branch 'main'\nYour branch is up to date with 'origin/main'.\nthevenin_m@MOB02095 MINGW64 ~/Desktop/pull_request (main)\n$ git pull\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1/1), 903 bytes | 53.00 KiB/s, done.\nFrom https://github.com/mthevenin/pull_request\n   a8c4daf..15740db  main       -&gt; origin/main\nUpdating a8c4daf..15740db\nFast-forward\n .gitignore         |  4 ++++\n prog.R             |  3 +++\n pull_request.Rproj | 13 +++++++++++++\n 3 files changed, 20 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 prog.R\n create mode 100644 pull_request.Rproj\nSur Gitlab, sous forme d’animation3, à partir du git pull origin nom_branch:\n\n\n\n\n\nPull request sur Gitlab",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Clonage, pull, push et branches</span>"
    ]
  },
  {
    "objectID": "022-git2.html#footnotes",
    "href": "022-git2.html#footnotes",
    "title": "7  Clonage, pull, push et branches",
    "section": "",
    "text": "Dans un projet Quarto de type website c’est le cas lorsqu’on réalise une compilation d’ensemble↩︎\nClassique pour les fichiers Readme.md↩︎\nAvec un petit manque de fluidité sur les manips par manque de pratique sur Gitlab↩︎",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Clonage, pull, push et branches</span>"
    ]
  },
  {
    "objectID": "023-git3.html",
    "href": "023-git3.html",
    "title": "8  Déploiement de pages",
    "section": "",
    "text": "8.1 GITHUB",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Déploiement de pages</span>"
    ]
  },
  {
    "objectID": "023-git3.html#github",
    "href": "023-git3.html#github",
    "title": "8  Déploiement de pages",
    "section": "",
    "text": "8.1.1 Déploiement d’une simple page html\n\nOn génère un dépôt sur la plateforme en mode Public \nOn ajoute un fichier nommé .nojekill \n\nCe fichier est vide.\nOn peut réaliser cette étape en local une fois le clonage du dépôt effectué, mais c’est très rapide à faire directement sur le dépôt distant.\n\nDans Rstudio, on crée un projet en clônant le dépôt distant \nOn Génère le notebook avec un fichier .qmd (ou .rmd si on souhaite rester sur rmarkdown):\n\nLe fichier doit s’appeler index.html.\n\nOn transfère les modifications sur le dépôt distant (git push)\n\n\n\n\n\n\n\nNote\n\n\n\nOn est pas obligé d’envoyer les fichiers sources .qmd ou .rmd, c’est ici l’output html et les fichiers associés (.css, .js…) qui seront lu par le navigateur. On peut donc ajouter des exceptions dans le fichier .gitignore si on souhaite restreindre le les fichiers présents dans le répertoire distant.\n\n\n\n\n\n\n\n\n\n\n\nFichier .nojekill (1)\n\n\n\n\n\n\n\nFichier .nojekill (2)\n\n\n\n\n\n\n\nFichier .nojekill (3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLe notebook dans RStudio\n\n\n\n\n\n\n\nLe notebook dans le dépôt distant\n\n\n\n\n\n\nRetourner sur le dépôt distant et rafraîchir la page pour voir si les fichiers du notebook a bien été ajouté \nAller dans les paramètres du dépôt (Settings) et cliquer dans le menu vertical à gauche sur Pages \nDans Branch, sélectionner main et sauvegarder \nAttendre quelques dizaines de secondes et rafraichir la page. L’adresse est affichée, et on peut y accéder en cliquant sur le lien.\n\n\n\n\n\n\n\n\n\n\nDéploiement (1)\n\n\n\n\n\n\n\nDéploiement (2)\n\n\n\n\n\n\n\nDéploiement (3)\n\n\n\n\n\n\n\nDéploiement (4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.1.2 Déploiement avec un fichier de configuration _quarto.yml\n\nFonctionne également pour une simple page. Je recommande plutôt cette méthode pour son caractère plus général.\nLe gros des étapes précédentes sont identiques. Ce qui change:\n\nCréation d’un fichier _quarto.yml où l’on va indiquer le répertoire de destination des fichiers html et fichiers associés (css, js).\nCe répertoire devra s’appeler doc.\nDans github, on devra modifier ce répertoire de destination.\n\n\nLe fichier _quarto.yaml\nCette question sera un plus approfondie dans le chapitre consacrée au contenu de type website, book dans la dernière partie du support.\n\nPour la seule question du déploiement de pages ou de site, ce fichier _quarto.yml de type texte doit contenir la destination du répertoire contenant le ou les fichiers .html .css, .scss, js….\nLe répertoire de destination doit s’appeler docs.\n\nCet élément obligatoire du yaml est:\nproject:\n  type: website\n  output-dir: docs\n\nPour une simple page, on peut le générer directement dans le dépôt distant après sa création: new file =&gt; nom du fichier: _quarto.yml =&gt; puis coller les éléments ci-dessus.\nPour un contenu plus enrichi, comme un website, on ajoutera une barre de navigation horizontale et/ou une barre verticale, et on indiquera les fichiers .qmd (ou .rmd) qui alimenteront le contenu.\n\nSi on prend le template d’exemple de Quarto2, on remarque que le répertoire de destination n’est pas indiqué. Par défaut, il s’appelle _site. Il faut changer son nom: output_dir: docs.\n\n\n\n\n_quarto.yml généré automatiquement\n\nproject:\n  type: website\n\nwebsite:\n  title: \"deploy_page2\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo      \n    css: styles.css\n    toc: true\n\n_quarto.yml pour déploiement sur Github\nproject:\n  type: website\n  output-dir: docs  # Ajouter cette ligne d'option\n\nwebsite:\n  title: \"deploy_page2\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo      \n    css: styles.css\n    toc: true\n\n\nUne fois le dépôt distant cloné et le site généré en local, on le push:\n\nOn va dans les paramètres du dépôt (Settings) et dans Pages \nDans branch on sélectionne la branche main et on change le répertoire de roots à docs \nOn sauvegarde, et on rafraichit la page jusqu’à ce que l’adresse du site apparaissent avec le lien. Compter quelques dizaines de secondes.\n\n\n\n\n\n\n\n\n\n\nFichier _quarto.yml\n\n\n\n\n\n\n\nRépertoire docs dans dépôt distant\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDéploiement (1)\n\n\n\n\n\n\n\nDéploiement (2)",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Déploiement de pages</span>"
    ]
  },
  {
    "objectID": "023-git3.html#gitlab",
    "href": "023-git3.html#gitlab",
    "title": "8  Déploiement de pages",
    "section": "8.2 GITLAB",
    "text": "8.2 GITLAB\n\n\n\n\n\n\nAtouts de Gitlab\n\n\n\nDéploiement en mode private sans coût\nL’atout principal de Gitlab par rapport à Github est la possibilité de déployer un contenu html en mode privé sans coût additionnel.\nChoix du nom de domaine\nGitlab est nettement plus souple sur le choix des adresses http. Par défaut, au moment du déploiement une adresse unique est proposée. On peut la changer pour un nom de domaine classique : https://username.gitlab.io/repository_name/\n\n\nNe maîtrisant absolument pas la programmation des templates .gitlab-ci.yml, on procèdera par simple pas à pas.\n\n8.2.1 Générer le déploiement d’une page test et d’une url associée\nEléments générés lors du déploiement:\n\nUn fichier gitlab-ci.yml qui devra être conservé.\nUn répertoire public qui contiendra le contenu html.\n\nPour générer ces éléments:\n\nOn crée un dépôt en mode public ou private:\nLorsqu’on clique sur New project on selectionne Create from template.\nOn sélectionne Pages/plain HTML dans la liste et on clique sur Use template.\n\n\n\n\n\n\n\n\n\n\n\nNouveau projet\n\n\n\n\n\n\n\nProjet avec template\n\n\n\n\n\n\n\nChoix template html\n\n\n\n\n\n\n\nCréation du projet:\n\nOn reprend les éléments décrits dans le chapitre précédent (Section 7.1.1) avec le nom du projet, le nom de domaine du projet (différent du site déployé) et le choix de la visibilité.\nOn remarque qu’un template gitlab-ci.yml est ajouté. Il doit être conservé.\nPour déployer la page ou le site avec son nom de domaine, sur le menu vertical à gauche, on clique sur Build et sur Pipelines.\n\n\n\n\n\n\n\n\n\n\n\n\nProjet avec template\n\n\n\n\n\n\n\nPprojet généré\n\n\n\n\n\n\nExecution du job de déploiement\n\nDans la page qui s’affiche, en haut à gauche cliquer sur Run Pipeline \nDans la nouvelle page qui s’affiche, cliquer de nouveau sur Run Pipeline \nDans la nouvelle page, cliquer sur Deploy. Après une dizaine de secondes, on vous indique que le job a été exécuté avec succès.\n\n\n\n\n\n\n\n\n\n\n\nBuild (1)\n\n\n\n\n\n\n\nBuild (2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild (3)\n\n\n\n\n\n\n\nBuild (4)\n\n\n\n\n\n\nCréation de l’url\n\nDans le menu vertical à gauche, aller dans Deploy  Pages.\nUne URL unique est générée, on peut cliquer sur le lien pour visualiser la page test.\nOn peut vouloir une url plus classique par exemple: https://mthevenin.gitlab.io/deploy-page/:\n\nPour générer cet url: décocher Use unique domaine et sauvegarder.\nCliquer sur le lien pour visualiser la page test.\n\n\n\n\n\n\n\n\n\n\n\nURL (1)\n\n\n\n\n\n\n\nURL (2)\n\n\n\n\n\n\n\nURL (3)\n\n\n\n\n\nLa page test générée:\n\n\n\n\n\n\n\n\n\n\n\n\n\nParamétrer la visibilité (maj 20 mars… j’avais oublié)\n\n\n\n\n\n\nLorsque la page test est déployée le message suivant va être affiché, même si le repertoire est public.\n\n\nVisiblement pour rendre la page visible à “tout le monde”:\n\nAller dans Settings =&gt; General\nDescendre jusqu’à pages\nSélectionner Everyone With Access\nSauvegarder en bas de la liste de gestion de la visibilité\n\n\n\n\n\n\n\n\n8.2.2 Déployer son contenu html\nQue ce soit une simple page de type notebook ou présentation revealjs, ou un contenu plus enrichi de type website, un fichier de configuration propre à Quarto (_quarto.yml) et indiquant clairement la destination des fichiers html doit être créé. Ce répertoire de destination est nommé public. Il a déjà été créé par gitlab lors de la phase de déploiement de la page test.\nPour cette seule opération, le contenu du fichier _quarto.yml est:\nproject:\n  type: website\n  output-dir: public\nOn peut également générer ce fichier directement dans Gitlab:\n\n\n\n\n\n\n\n\n\n\n_quarto.ymlgitlab (1)\n\n\n\n\n\n\n\n_quarto.yml gitlab (2)\n\n\n\n\n\n\n\n_quarto.yml gitlab (3)\n\n\n\n\n\n\n\n_quarto.yml gitlab (4)\n\n\n\n\n\n\nDans RStudio\n\nCréer un projet en clonant le dépôt distant.\n\nSi le fichier _quarto.yml qui indique le répertoire de destination (public) n’a pas déjà été créé dans le dépôt gitlab, le générer à partir d’un simple fichier texte.\nCréer à minima un fichier index.qmd et le compiler en html.\n\nMettre à jour le dépôt distant: git add .  git commit --m \"titre commit\"  git push.\nRafraichir la page html. Cela peut prendre quelques seconde à une minute.\n\n\n\n\n\n\n\n\n\n\n\n_quarto.yml Rstudio\n\n\n\n\n\n\n\nindex.qmd Rstudio",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Déploiement de pages</span>"
    ]
  },
  {
    "objectID": "023-git3.html#footnotes",
    "href": "023-git3.html#footnotes",
    "title": "8  Déploiement de pages",
    "section": "",
    "text": "Je ne dis pas que ce n’est pas possible sur Gitlab mais il faudra reparamétrer le fichier de configuration gitlab-ci.yml, ce qui n’est pas dans mes cordes↩︎\nDans RStudio: New project  New directory  Quarto Website↩︎",
    "crumbs": [
      "**Déploiement sur plateforme git**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Déploiement de pages</span>"
    ]
  },
  {
    "objectID": "031-introduction.html",
    "href": "031-introduction.html",
    "title": "9  Introduction aux formats",
    "section": "",
    "text": "9.1 Les différents formats\nDocuments simples:\nContenu de cette partie:\nIl n’est bien évidemment de lister l’ensemble des options. La documentation de Quarto est complète sur ce point.\nDocumentation de référence:",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction aux formats</span>"
    ]
  },
  {
    "objectID": "031-introduction.html#les-différents-formats",
    "href": "031-introduction.html#les-différents-formats",
    "title": "9  Introduction aux formats",
    "section": "",
    "text": "Notebook ou article:\n\nhtml: défaut.\nPdf: demande le package tinytex sous RStudio.\nWord (ou Libre Office).\nNotebook Jupyter.\n\nPrésentation:\n\nhtml: revealjs (defaut).\npdf: beamer, demande le package tinytex sous RStudio.\nPowerpoint (ou Libre Office).\n\n\n\n\nOptions liés aux différents formats dans le yaml, certaines étant propres à un type de format et d’autres communes.\nPour chaque format, présentations de quelques options ou règles propres.\nCompilation simultanée en plusieurs formats.\n\n\n\n\n\n\n\n\nFormat\nLiens\n\n\n\n\nHtml notebook/article\n\nBasique\nAvancé\n\n\n\nHtml presentation (revealjs)\n\nBasique\nAvancé\nGallery\n\n\n\nPDF notebook/article\n\nBasique\nAvancé\n\n\n\nPDF presentation (beamer)\n\nBasique\nAvancé\n\n\n\nOffice (ms - open) notebook/article\n\nBasique\nAvancé\nMS template\n\n\n\nOffice (ms - open) Powerpoint\n\nBasique\nAvancé\n\n\n\n\n\n\n\n\n\n\n\n\nDurée de compilation pour le format pdf\n\n\n\nEn raison d’une durée de compilation assez longue, il est conseillé dans un premier temps de privilégier l’output html.",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction aux formats</span>"
    ]
  },
  {
    "objectID": "031-introduction.html#introduction-des-options-par-format",
    "href": "031-introduction.html#introduction-des-options-par-format",
    "title": "9  Introduction aux formats",
    "section": "9.2 Introduction des options par format",
    "text": "9.2 Introduction des options par format\n\nLes options ou arguments communs, comme un titre, sont introduites comme options principale.\nLes options propres à un format sont des sous-options de l’option format qui a été spécifiée.\nLes options communes peuvent avoir des attributs différents, on les renseigne comme sous-options de chaque format.\n\n\n9.2.1 L’option format\n\nPour les notebooks ou les présentations, le format par défaut est le html. On peut le changer dès la création du document dans le menu file.\nL’option pour spécifier le type de document ou présentation est format:.\n\nPar exemple pour une présentation de type beamer (Latex/pdf):\n---\nformat: beamer\n---\nou\n---\nformat: \n  beamer: default\n---",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction aux formats</span>"
    ]
  },
  {
    "objectID": "031-introduction.html#options-communes-et-spécifiques-aux-formats",
    "href": "031-introduction.html#options-communes-et-spécifiques-aux-formats",
    "title": "9  Introduction aux formats",
    "section": "9.3 Options communes et spécifiques aux formats",
    "text": "9.3 Options communes et spécifiques aux formats\n\n9.3.1 Options communes\nExemple: activation de la table des matières pour les formats html et pdf\n\nOption toc: true\n\n---  \nformat:\n  html: default\n  pdf: default\n\ntoc: true\n\n---\nest identique à:\n---\nformat: \n  html:\n    toc: true\n  pdf:\n    toc: true\n---\n\n9.3.1.1 Options ou attributs spécifiques aux formats\nOption différente\n\nEn sous option du format sélectionné.\nExemple: changement de thème pour le html (theme: nom_theme), report d’une table des graphiques (lof:true) et d’une table des tableaux pour le format pdf.\n\n---\nformat:\n  html: \n    theme: zephyr\n  pdf:\n    lof: true\n    lot: true\n  \ntoc: true        \n---\nOption commune et attributs différents\n\nEn sous option du format, on change les attributs de l’option commune.\nExemple pour le report du nombre de sous sections dans la table des matières. L’option commune aux deux formats est toc_depth: valeur (par défaut 3). Si on choisit 2 pour le format html et 4 pour le pdf.\n\n---\nformat:\n  html: \n    toc: true\n    toc_depth: 2\n  pdf:\n    toc: true\n    toc_depth: 4 \n    \n---\nDe nouveau si l’option était commune aux deux formats, on pourrait directement la renseigner en option principale.\n---\nformat:\n  html: default \n  pdf:  default\n   \ntoc: true\ntoc_depth: 2    \n---\n\n\n\n\n\n\n… même un titre peut être propre à chaque format\n\n\n\n---\nformat:\n  html: \n    titre: \"HTML\"\n  pdf: \n    titre: \"PDF\"  \n---\nLe titre du document html sera “HTML” et le titre du document pdf sera “PDF”.",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction aux formats</span>"
    ]
  },
  {
    "objectID": "032-html.html",
    "href": "032-html.html",
    "title": "10  Format HTML",
    "section": "",
    "text": "10.1 Fonctionnalités communes article et présentation",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Format HTML</span>"
    ]
  },
  {
    "objectID": "032-html.html#fonctionnalités-communes-article-et-présentation",
    "href": "032-html.html#fonctionnalités-communes-article-et-présentation",
    "title": "10  Format HTML",
    "section": "",
    "text": "10.1.1 Fichiers de sortie\nPour le notebook/article et les présentations revealsjs, par défaut l’output est composé du fichier html, et d’un répertoire contenant des fichiers associées de type css, scss ou javascript. Cela permet d’avoir un fichier html pesant moins lourd. A savoir tout de même que si l’on souhaite transmettre un document par mail, le repertoire associé doit être également inclus aux pièces jointes. Il est donc conseillé de le compresser avant l’envoi.\nLe nom du répertoire contenant tous les styles et fonctionnalité associées est nom_qmd-files.\nSi l’on souhaite un fichier html unique.\n\nDeux options:\n\nself-contained: true/false.\nembed-ressources: true/false.\n\nPar défaut false pour les deux. La documentation actuelle, recommande d’utiliser l’option `embed-ressources , en particulier pour les présentations revealjs.\n\n\n\n10.1.2 Lightbox: agrandissement des images/graphiques\nL’option Star de Quarto.\n\nJusqu’à la version 1.35 cette option était sous forme d’extension à installer à chaque nouveau document ou projet. Cette option a été pleinement intégrée au logiciel avec la v1.4.\nPermet d’afficher une image/graphique dans une fenêtre autonome.\nFacilite une mise en page sous forme de vignettes, et donc d’aggrandir les images.\nOn peut grouper différentes images et naviguer entre elles lorsqu’elles sont aggrandies.\n\n\n\n\n\n\n\nAvertissement\n\n\n\nEn forme de vignettes (Section 15.3), si on prévoit une compilation non dynamique (pdf, docx, beamer, powerpoint) il faudra conditionner la mise en page des images selon le format de sortie pour que le format statique ne reporte pas les images dans des tailles trop petites, donc illisibles (Section 12.2.2).\n\n\nDans le yaml\nPour tout le document:\n\nPar défaut: lightbox: false.\nPour l’activer: lightbox: true.\n\nDans le bloc de code\nAppliquée individuellement à une image avec une classe css\n\n\n\n\n\n\nJanvier 2024: .no-lightbox ou .nolightbox pour une image\n\n\n\n\nla documentation Quarto indique que l’option de désactivisation est {.no-lightbox}. Chez moi cela ne fonctionne pas.\nCela fonctionne avec l’option {.nolightbox} qui est le nom directement hérité de l’extension externe, devenue caduque.\n\n\n\n\nSi dans le yaml, l’option est activée, on peut la désactiver individuellement avec {.nolightbox} appliquée diretement à l’image: ![](imgage.png){.nolightbox}.\n\nPour ce support, elle est activée par défaut. Pour désactivée la première image (chapitre installation de Quarto et gestion des fichiers):\n![](img1/c12.png){.nolightbox}\n\n\n\n\nOption avec {.nolightbox}\n\n\n\nAppliquée lightbox à tous les graphiques générées dans un bloc\n\nEn option du bloc de code. On utilise l’option: #| lightbox: true/false\n\nSi on veut désactiver l’option pour les deux graphiques suivant.\n```{r}\n\n#| lightbox: false\n#| layout-ncol: 2\n\n\ndata(\"mtcars\")\n\nx &lt;- mtcars$wt          \ny &lt;- mtcars$mpg \nz &lt;- mtcars$disp\n\nplot(x, y)         \nplot(x, z) \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrouper des images\n\nOption très intéressante qui permet de naviguer entre une série d’images\nDans l’image ouverte, l’option est activée lorsque &gt; (avancer) et &lt; (retour) apparaissent clairement à gauche et à droite.\nL’option pour associer des images et naviguer entre elles est `group=“nom_groupe”\n\n\nImages insérées en markdownGraphiques générés dans un programme\n\n\nOn ajoute l’option {group=\"nom_groupe\"} à l’image insérée\n![](img1/c12.png){group=\"groupe1\"}  \n\n![](img1/c13.png){group=\"groupe1\"}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn ajout à l’option #| lightbox, la sous option #| group=\"nom_groupe.\n\n```{r}\n#| lightbox:\n#|   group: nom_groupe\n\n# programme R \n```\n\n```{r}\n#| layout-ncol: 2\n#| lightbox: \n#|   group: \"scatter plot\"\n\ndata(\"mtcars\")\n\nx &lt;- mtcars$wt          \ny &lt;- mtcars$mpg \nz &lt;- mtcars$disp\n\nplot(x, y)         \nplot(x, z) \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10.1.3 Onglets\n\nLes sections sous forme d’onglets ont été introduits très tôt dans Rmarkdown. Ce n’est donc pas une nouveauté.\nNouveauté Quarto: Si plusieurs sections à onglets on les mêmes entrées il est possible de caler toutes les sections sur une même entrée tout au long du document.\n\nExemple: on a plusieurs sections sous forme d’onglets avec chacune une section R, Stata et Python. Par défaut l’onglet R sera la première visible. Si on se met sur l’ongle Python, toutes les autres sections d’onglets se mettront par défaut Python.\nSyntaxe de base:\n\nDans une section div (:::), on ajoute la classe css {.panel-tabset}.\nOn peut ajouter une couleur de fond aux onglets avec la classe .nav-pills.\n\n::: {.panel-tabset}\n\n## Titre onglet 1 \n\nContenu onglet 1\n\n## Titre onglet 2\n\nContenu onglet 2\n:::\nDonne:\n\nTitre onglet 1Titre onglet 2\n\n\nContenu onglet 1\n\n\nContenu onglet 2\n\n\n\nSynchronisation des onglets:\n\nOn ajoute seulement l’option group=\"nom_group\" à toutes les sections sous forme d’onglets.\n\n::: {.panel-tabset  group=\"nom_group\" }\n\n## Titre onglet 1 \n\nContenu onglet 1\n\n## Titre onglet 2\n\nContenu onglet 2\n:::\nExemple:\nLes deux sections d’onglets sont reliés de la façon suivante:\n::: {.panel-tabset  group=\"lang\" }\nCourbes de séjour Kaplan-Meier\n\nSasRStataPython\n\n\nods exclude Lifetest.Stratum1.ProductLimitEstimates;\nproc lifetest data=trans;\ntime stime*died(0); run;\n\n\nPackage survival\nlibrary(survival)\nfit &lt;- survfit(Surv(stime, died) ~ 1, data = trans)\nfit\nsummary(fit)\nplot(fit)\n\n\nstset stime, f(died)\nstci, p(75)\nstci\nstci, p(25)\nsts graph\n\n\nPackage statmodels\nimport matplotlib.pyplot as plt\nimport statsmodels as sm\n\nkm = sm.SurvfuncRight(trans[\"stime\"], trans[\"died\"])\nkm.summary()\n\n\n\n\nModèle semi-paramétrique Cox\n\nSasRStataPython\n\n\nproc phreg data=trans;\nmodel stime*died(0) = year age surgery /TIES=EFRON ;\nrun;\n\n\ncoxfit = coxph(formula = Surv(stime, died) ~ year + age + surgery, data = trans)\nsummary(coxfit)\n\n\nstcox year age surgery, nolog noshow efron\n\n\nPackage statmodels\nmod = smf.phreg(\"stime ~  year + age + surgery \",trans, status='died', ties=\"efron\")\nrslt = mod.fit()\nprint(rslt.summary())",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Format HTML</span>"
    ]
  },
  {
    "objectID": "032-html.html#fonctionnalités-propres-à-un-notebookarticle",
    "href": "032-html.html#fonctionnalités-propres-à-un-notebookarticle",
    "title": "10  Format HTML",
    "section": "10.2 Fonctionnalités propres à un notebook/article",
    "text": "10.2 Fonctionnalités propres à un notebook/article\nQuelques options sont spécifiques à un contenu de type page html, et donc absente du format revealjs.\n\n10.2.1 Langues, résumé et description\n\n10.2.1.1 Langues\n\nQuarto donne la possibilité de choisir une langue qui va s’appliquer au titres de certaines métadonnées du document: auteur, résumé, sommaire….\nSans surprise l’anglais est la langue par défaut.\n\nSi on souhaite changer la langue du titre: lang: langue [Liste des langues].\nPar exemple, si on veut passer en français: dans le yamllang: fr.\n\n\n\n\n\n\n\n\n\nPar défaut (en)\n\n\n\n\n\n\n\nEn français (fr)\n\n\n\n\n\nSi ces traductions ne conviennent pas, on peut choisir. Par exemple: * toc-title: “XXXX” * author-title: “XXXX”\nDans le yaml, en enlevant l’option lang:fr:\n---\ntitle: \"Changement de la langue avec option titre\"\n\nauthor: \n  name: \"Bidibule\"\n\nformat: \n  html: default \n\ntoc: true\n\nabstract: |\n Résumé de mon document\n\ntoc-title: \"SOMMAIRE\"\nauthor-title: \"AUTRICE\"\nabstract-title: \"SYNTHESE\"\n\n---\n\n\n\n10.2.1.2 Résumé et description\n\nSyntaxe un peu particulière:\n\nUne barre verticale est insérée après le nom de l’option.\nLe résumé ou la description est sur la ligne suivante avec avec au moins un espace.\nOn ne peut pas mettre simultanément un résumé et une description.\nDifférence entre les deux? Un résumé à un titre, par défaut ABSTRACT.\n\nOption pour un résumé: abstract: |\nOption pour une description: description: |\n\n---\nabstract: |\n Résumé de mon document\n---\n---\ndescription: |\n Description de mon document\n---\n\n\n10.2.1.3 Modification du grid de la page\n\nUn document html comprend 3 colonnes:\n\nA gauche la sidebard. Vide dans un document simple, elle permet de mettre un menu ou un chapitrage pour des contenus de type website ou book. Cette colonne renverra donc vers d’autres document .qmd\nAu centre le body qui comprend le contenu du document.\nA droite la margin qui comprendra la table des matières du document, éventuellement des reports d’output (graphiques/images, tableaux, notes…).\n\nDepuis la version 1.35 il est possible de modifier la largeur de ces trois colonnes.\n\n\n\n\n\n\n\n\nFigure 10.1: Doc quarto - grid par défaut\n\n\n\n\n\nLa modification du grid se fait dans le yaml avec l’option grid en sous-option du format html.\nLes largeurs (maximales) des 3 colonnes de grid peuvent être modifiées avec 3 sous options. Avec les valeurs par défaut:\n\nsidebar-width: 250px\nbody-width:    800px\nmargin-width:  250px\n\nIl y a également un espace entre les colonnes, avec une valeur commune (option gutter-width). Toujours par défaut:\n\ngutter-width: 1.5em\n\n\nAttention, ce ne sont pas des largeurs absolues mais des largeurs maximales. Selon le contenu présent dans le document ou le site web (table des matières, chapitrage ou liens dans la sidebar à gauche) les largeurs seront adaptées.\nDonc dans le yaml de chaque document, on aurait donc par défaut :\n---\ntitle: \"Grid par défaut\"\n\nformat:\n  html:\n    grid:\n      sidebar-width: 250px\n      body-width:    800px\n      margin-width:  250px\n      gutter-width:  1.5em\n---\nSi on veut modifier les valeurs maximales largeurs, par exemple en baissant celle de la colonne de gauche (vide), et en augmentant celle des deux autres, tout en ajoutant une table des matières à droite et en sachant qu’il n’y a pas de contenu dans la colonne de gauche (sidebar):\n---\ntitle: \"Modification du grid\"\n\nformat:\n  html:\n    grid:\n      sidebar-width: 20px\n      body-width:    1200px\n      margin-width:  550px\n      gutter-width:  1.5em\n\ntoc: true\n---\n\n\n\n\n\n\n\n\n\nGrid par défaut\n\n\n\n\n\n\n\nGrid modifié\n\n\n\n\n\n\n\n\n10.2.2 Thèmes\nJuste une courte introduction, on abordera pas ici directement la question des fichiers .css et .scss ([#sec-scss]).\nIls peuvent néanmoins être créés et utilisés pour modifier un thème sélectionné.\n\nQuarto comme Rmarkdown utilise les thèmes de type html bootstrap et plus particulièrement les 26 proposée gratuitement par le site: bootswatch.\n\nLe thème bootstrap html5 (défaut).\nLes 25 thèmes gratuits par bootswatch.\nOn peut visualiser les rendus des différents thèmes. Par exemple le theme vapor.\nTous les fichiers css sont disponibles et téléchargeables, ce qui facilite une customisation du thème choisi via des éléments css ou des variables SAS (scss).\n\nEn nombre limité, des extensions proposent des thèmes : bookup de Julien Barnier, thème institutionnel de l’INRAE…\n\nVisualisation des thèmes\nLe thème par défaut est default html 5 Lien.\nSyntaxe\nOn change le thème en sous option de celle du format html avec theme: nom_theme.\n---\ntitle: \"Changement theme\"\n\nformat:\n  html:\n    theme: nom_theme\n---\n\n\n\n\n\n\n\n\n\nThème par défaut: lien\n\n\n\n\n\n\n\nThème superhero Lien",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Format HTML</span>"
    ]
  },
  {
    "objectID": "032-html.html#sec-reveal",
    "href": "032-html.html#sec-reveal",
    "title": "10  Format HTML",
    "section": "10.3 Présentation revealjs",
    "text": "10.3 Présentation revealjs\n\nRemplace deux formats de présentation html de Rmarkdown.\nBeaucoup d’options, plus ou moins gadget.\nVoir court support qui reprend les élements qui vont suivre mais dans ce format: https://mthevenin.gitlab.io/quarto_revealjs/\n\n\n10.3.1 Les blocs de code\n\n10.3.1.1 Activer leur affichage\nPar défaut les codes ne sont pas affichés:\n\nPour les afficher par défaut, renseigner dans le yaml : echo: true ou code-fold: true.\nOu jouer avec ces deux options dans chaque bloc individuellement.\n\n\n\n10.3.1.2 Line highlight\n\nOptions qui permet de mettre en avant une ou plusieurs lignes d’un programme dans un bloc et de naviguer entre ces lignes.\nOption code-line-numbers: \"n°_lignes\"\n\n```{r}\n#| code-lines-numbers: \"choix ligne(s)\"\n\n# programme\n```\n\nPar exemple:\n\n“2” ligne 2.\n“2,5” lignes 2 et 5.\n“2-5” lignes 2 à 5.\n“|2|4” toutes les lignes, puis ligne 2, puis ligne 4\n\n\n```{r}\n\n#| eval: false\n#| code-line-numbers: \"|1|4|6\"\n\ndata(\"mtcars\")          \nx &lt;- mtcars$wt         \ny &lt;- mtcars$mpg         \nplot(x, y) \nz &lt;- mtcars$disp\nplot(x, z) \n```\nDonne la séquence suivante:\n\n\n\n\n\n\n\n\n\ntoutes le lignes\n\n\n\n\n\n\n\nLigne 1\n\n\n\n\n\n\n\nLigne 4\n\n\n\n\n\n\n\nLigne 4\n\n\n\n\n\n\n\n10.3.1.3 Code animation\n\nPermet d’afficher un programme par bloc successif.\nChaque bloc est généré dans une slide.\n\nPour un bon rendu, le bloc doit être sur la même ligne sur chaque slide. Important.\nPour réaliser cette animation on utilise dans le titre des slide, l’option {auto-animate: \"true\"}: ## Titre slides {auto-animate: \"true\"}\n\n\n\n\n\n\n\n\n\n10.3.2 Eléments d’affichage et de mise en page\n\n10.3.2.1 Liens\n\nL’affichage du contenu d’un lien est insérée dans la présentation, mais avec la possibilité de fermer directement la page ouverte (croix en haut à droite) et d’ouvrir le lien dans un onglet différent.\nDans le yaml, on active cette option avec preview-links: true. Je conseille cette activation si la présentation comporte des liens externes.\n\n\n\n10.3.2.2 Affichage incrémental des éléments d’une liste\nOption incremental\n\nDans le yaml on peut l’activer pour toutes les listes:\n\n---\nformat:\n  revealjs:\n    incremental: true\n---\n\nDans chaque liste on peut l’activer ou la désactiver avec une classe css:\n\nactivation: ::: {.incremental}\ndésactivation: ::: {.nonincremental}\n\n\n\n::: {.incremental}\n\n* ligne 1 \n* ligne 2\n* ligne 3\n\n:::\n\n\n10.3.2.3 Affichage dynamique d’une liste\n\nOn peut ajouter un effet aux éléments d’une liste qui apparaissent de manière successive avec la classe css {.fragment option}. On lui ajoute une autre classe css selon l’effet recherché, par exemple:\n\n{.fragment .fade-up}\n{.fragment .fade-left}\n\n\n[Liste des effets]\n\n\n10.3.2.4 Réduction l’affichage du texte\n\nDans le titre de la slide, on introduit la classe css {.smaller}\nPar exemple:\n\n## Réduire la taille d'affichage d'une slide {.smaller}\n\nSera également appliqué aux blocs de code.\n\n\n\n\n\n\n\n\n\n\nDéfaut\n\n\n\n\n\n\n\nAvec {.smaller}\n\n\n\n\n\n\n\n10.3.2.5 Dépasser la limite verticale des slides\n\nOption très pratique.\nOn peut contourner la limite verticale des slides en faisant défiler son contenu vers le bas.\nDans le yaml de la présentation, on utilise l’option scrollable: true en sous option du format revealjs\n\nformat:\n  revealjs:\n    scrollable: true\n\n\n10.3.2.6 Faciliter la mise en page d’une slide\nPlusieurs possibilités:\n\nUtiliser des onglets: {.panel-tabset} (Section 10.1.3)\n\nUn programme et son output dans une même slide:\n\n\n::: {.panel-tabset}\n### Programme \n&lt;progamme&gt;\n\n### output\n&lt;output: graphique, tableau de résultat, extrait base de données&gt;\n\n:::\n\nUtiliser un affichage en 2 colonnes: {.columns} et {.column} (Section 3.2.1.2)\n\nPar exemple deux listes:\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n* item11\n* item12\n* item13\n\n:::\n\n::: {.column width=\"50%\"}\n\n* item21\n* item22\n* item23\n:::\n\n::::\n\nUtiliser l’option #| output-location: option\n\nEn option du bloc de code.\nAdapté à une mise en page avec report du programme et de son output.\nPlusieurs options:\n\ncolumn: à droite.\nfragment: en dessous avec touche .\ncolumn-fragment: à droite avec touche  [la meilleure à mon sens].\nslide: slide suivante\n\n\n\n```{r}\n#| eval: false\n#| output-location: column-fragment\n\ndata(\"mtcars\")               \nx &lt;- mtcars$wt                     \ny &lt;- mtcars$mpg              \nplot(x, y)                   \n```\n\n\n\n\n\n\n\n\n\nA l’ouverture de la slide\n\n\n\n\n\n\n\nAprès avoir appuyé sur la touche -&gt;\n\n\n\n\n\n\n\n10.3.2.7 Thème et couleur du fond\n\nThème:\n\nComme pour un document ou website html, plusieurs thèmes disponibles. [Lien].\nOn peut les modifier en associant un .css et/scss au fichier qmd.\nSi on choisit le thème dark, fans le yaml:\n\n\n---\nformat: \n  revealjs:\n    theme: dark\n---  \n\nChangement de la couleur de fond s’une slide:\nAu titre de la slide ajouter: {background-color=couleur}\n\nUn code hexadécimal.\nUne couleur css prédéfinie [lien: liste nom couleur css dans couleur nommée]].\n\n\nExemple avec code hexadécimal ou nom css pour une même couleur:\n\n## Titre slide {background-color=\"darkturquoise\"}.\n## Titre slide {background-color=#00CED1}.\n\n\n\n10.3.2.8 Divers\n\nPlusieurs options dans le titre de la slide:\n\nLes ajouter dans une même accolade.\n{.smaller} + {background color..} =&gt; ## Titre {.smaller background-color=#00CED1 }.\n\nAjouter des numéros aux slides\n\nDans le yaml, ajouter l’option slide-number:true\n\n\n\n\n\n\n\n\nExportation en format PDF\n\n\n\nContrairement au notebook/article, il n’y a pas de conversion possible via pandoc. Pour convertir une présentation en format PDF, on doit passer par\nDans la présentation en format html:\n\nAppuyé sur e\nDans le navigateur, ici de préférence Chrome1, aller dans le menu et sélectionner imprimer ou directement ctrl p.\nSélectionner dans la destination “Enregistrer au format PDF”.\nVérifier que Marges soit sur “aucune”.\nEnregistrer.\n\nAttention à la mise en forme de la présentation, qui doit être assez simple. Par exemple pour les tabsets, seul le premier onglet pourra être sera affiché.\nOn peut se rendre ces différences avec l’exportation suivante (présentation format d’origine reveal):",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Format HTML</span>"
    ]
  },
  {
    "objectID": "032-html.html#footnotes",
    "href": "032-html.html#footnotes",
    "title": "10  Format HTML",
    "section": "",
    "text": "J’ai rencontré des problèmes d’affichage des titres de slide sur Firefox↩︎",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Format HTML</span>"
    ]
  },
  {
    "objectID": "033-pdf.html",
    "href": "033-pdf.html",
    "title": "11  Document PDF",
    "section": "",
    "text": "11.1 Les types de documents\nPour un document de type rapport:\nFormat PDF seulement:\nmultiformat:",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Document PDF</span>"
    ]
  },
  {
    "objectID": "033-pdf.html#les-types-de-documents",
    "href": "033-pdf.html#les-types-de-documents",
    "title": "11  Document PDF",
    "section": "",
    "text": "Option documentclass\n\narticle: scrartcl [défaut]\nrapport: scrreprt\nbook: scrbook\n\nCes différents types de documents ne se distinguent que sur leur pagination, comme la présence d’une page titre.\n\n\n\n---\ntitre: \"XXXXXX\"\n\nformat: pdf\n\ndocumentclass: scrreprt\n  \ntoc: true\n---\n\n---\ntitre: \"XXXXXX\"\n\nformat:\n  html: default\n  pdf:\n    documentclass: scrreprt\n  \ntoc: true\n---",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Document PDF</span>"
    ]
  },
  {
    "objectID": "033-pdf.html#liste-des-tableaux-et-liste-des-graphiquesimages",
    "href": "033-pdf.html#liste-des-tableaux-et-liste-des-graphiquesimages",
    "title": "11  Document PDF",
    "section": "11.2 Liste des tableaux et liste des graphiques/images",
    "text": "11.2 Liste des tableaux et liste des graphiques/images\n\nDans le yaml pour activer une table des graphiques/images et/ou une table des tableaux:\n\ngraphiques/images: lof: true\ntableaux: lot: true\n\nPour indexer proprement les tableaux et les graphiques générés dans un bloc de codes, ils doivent avoir explicitement un titre.\n\nGraphique/image:\n\nGénéré par un programme: #|fig-cap: \"Titre\"\nInsertion markdown d’une image: ![Titre](lien image)\n\nTableau (dont base de donnée):\n\nGénéré par un programme: tbl-cap: \"XXXX\"\nInsertion tableau en markdown, le titre est directement placé sous le tableau : Titre.\n\n\n\n| Col1 | Col2 |\n|------|------|\n|   A  |  C   |\n|   B  |  D   |\n\n: Tableau markdown",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Document PDF</span>"
    ]
  },
  {
    "objectID": "033-pdf.html#divers",
    "href": "033-pdf.html#divers",
    "title": "11  Document PDF",
    "section": "11.3 Divers",
    "text": "11.3 Divers\n\n11.3.1 Les sauts de page (rappel)\n\nAvec Quarto, utiliser le shortcode {{&lt; pagebreak &gt;}} valable également pour le format html pour l’impression.\n\n\n\n11.3.2 Modifier les marges du document\n\nDans le yaml, option geometry avec 4 sous options listées avec un tiret. Les marges sont mesurées en millimètres:\n\n---\ngeometry: \n  - top=Amm\n  - left=Bmm\n  - right=Cmm\n  - bottom=Dmm  \n---\nPour le document en pdf j’ai légèrement réduit les marges avec:\n---\ngeometry: \n  - top=25mm\n  - left=20mm\n  - right=20mm\n  - bottom=25mm   \n---\n\n\n11.3.3 Changement de police\n\nDans le yaml avec l’option fontfamily: nom_font\nListe de toutes les polices [lien]\nIci on utilise la police cabin\n\n---\nfontfamily: cabin\n---",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Document PDF</span>"
    ]
  },
  {
    "objectID": "034-multiformat.html",
    "href": "034-multiformat.html",
    "title": "12  Multiformat",
    "section": "",
    "text": "12.1 Compilation en plusieurs formats dans un document\nDans le yaml:",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiformat</span>"
    ]
  },
  {
    "objectID": "034-multiformat.html#compilation-en-plusieurs-formats-dans-un-document",
    "href": "034-multiformat.html#compilation-en-plusieurs-formats-dans-un-document",
    "title": "12  Multiformat",
    "section": "",
    "text": "---\nformat: \n  html: default\n  pdf:  default\n  docx: default\n---\n\nSi plusieurs formats sont renseignés dans le yaml, à droite du document (margin) sous la table des matières un menu Other formats permet d’accéder directement aux autres formats spécifiés.\nOn peut supprimer ce menu dans le yaml avec l’option format-links: false\nOn peut effectuer une compilation multiformat avec le bouton RENDER ou via le terminal de RStudio.\nTant qu’on a pas compilé au moins une fois avec un format alternatif au html, Quarto ne compilera pas simultanément en plusieurs formats. Cela n’est d’ailleurs pas spécialement conseillé avec le PDF en raison de la durée de compilation bien plus longue que pour le format html ou docx1.\n\n\n12.1.1 Avec le bouton RENDER\nAprès avoir enregistré le fichier, on peut accéder directement à un sous menu permettant de choisir le format de sortie. C’était déjà le cas avec Rmarkdown.\n\n\n\n\n\n\n\n\nCompilation multiformat avec le bouton Render\n\n\n\n\nDans le menu du bouton Render, on doit compiler au moins une fois le document pour les autres formats individuellement.\n\n\n\n12.1.2 Dans le terminal\nOn exécute la ou les lignes de commandes suivantes:\nCompilation simultanée de tous les formats indiqués dans le yaml:\nquarto render &lt;nom_fichier.qmd&gt;\nCompilation d’un format spécifique:\nquarto render &lt;nom_fichier.qmd&gt; --to pdf\nquarto render &lt;nom_fichier.qmd&gt; --to docx\n\n\n12.1.3 Compilation multiformat avec un fichier _quarto.yaml.\n\nAttention si la configuration du document se trouve dans un fichier _quarto.yml tous les formats seront compilés simultanéments lors du Render.\n\nOn peut simplement privilégier un format spécifique en ajoutant une zône de commentaire à la ligne qui spécifie le format. Pour une seule compilation en html.\n\n---\nformat: \n   html: default\n#  pdf:  default\n#  docx: default\n---\n\nOn peut bien évidemment utiliser cette méthode pour désactiver temporairement la compilation avec des formats alternatifs lorsque le yaml se trouve directement dans le fichier qmd.",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiformat</span>"
    ]
  },
  {
    "objectID": "034-multiformat.html#sec-multiform",
    "href": "034-multiformat.html#sec-multiform",
    "title": "12  Multiformat",
    "section": "12.2 Contenu conditionnel",
    "text": "12.2 Contenu conditionnel\n\n12.2.1 Contenu non adapté à tous les formats\n\nCertains éléments, par exemple de mise en page, ne sont pas adaptés à tous les formats\nOn pourrait dans une documentation comme celle-ci et éditée dans plusieurs formats, réserver des éléments explicatifs propre à chaque format au format qui sera affichier: attention si html on devra faire ça , attention si pdf on devra faire cela etc…\nQuarto donne la possibilité contrôler la compilation du contenu format par format.\nAttention toutefois, pour un contrôle qui s’applique à une mise en page on va multiplier dans le code source du document un même type d’élement . En raison de cette contrainte, j’ai rapidement compris que je ne pourrais pas diffuser ce support simultanément en html et en pdf.\n\nOn prendra comme exemple une mise en page des images sous forme de vignettes à l’option lightbox.\nTrès pratique pour le format dynamique html, le rendu pour des formats statiques (pdf,docx) ne sera en revanche pas satisfaisant.\n\nEn html, on génère et positionne 4 graphiques sur une même ligne. L’option lightbox permet d’agrandir les graphiques et de naviguer entre eux\n\n```{r}\n#| layout-ncol: 4\n#| lightbox:\n#|   group: cars\n\ndata(\"mtcars\")\ndf = mtcars\n\nplot(df$mpg, df$cyl)\nplot(df$mpg, df$wt)\nplot(df$mpg, df$qsec)\nplot(df$mpg, df$disp)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEn compilant simultanément en pdf, le rendu est le suivant:\n\n\n\n\n\n\n\n\n\n\n12.2.2 Contrôler le contenu affiché\n\nQuarto a implémenté des classes css qui permettent de contrôler le contenu qui sera affiché par type de format:\n\n::: {.content-visible &lt;sélection format&gt;}\n::: {.content-hidden  &lt;sélection format&gt;}\n\nLes options de sélection:\n\nwhen-format=\"type_format\"\nunless-format=\"type_format\"\n\n\n[Documentation site officiel]\n\nDans notre exemple:\n\nL’affichage des graphiques sous forme de vignettes sera réservé au format html\nPour les formats statiques, les graphiques seront affichés à leur taille réelle, les uns après les autres.\nOn devra renseigner le programme deux fois en modifiant les options:\n\n\n\nPour le format html [identique plus haut]:\n\n{.content-visible when-format=\"html\"}\n\n\n::: {.content-visible when-format=\"html\"}\n\n```{r}\n#| layout-ncol: 4\n#| lightbox:\n#|   group: cars\n\ndata(\"mtcars\")\ndf = mtcars\n\nplot(df$mpg, df$cyl)\nplot(df$mpg, df$wt)\nplot(df$mpg, df$qsec)\nplot(df$mpg, df$disp)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPour les formats statiques pdf,docx:\n\n{.content-hidden when-format=\"html\"}\n\n\n\n::: {.content-hidden when-format=\"html\" }\n\n```{r}\ndata(\"mtcars\")\ndf = mtcars\n\nplot(df$mpg, df$cyl)\nplot(df$mpg, df$wt)\nplot(df$mpg, df$qsec)\nplot(df$mpg, df$disp)\n```\n:::\n\n\n\n\n\n\n\n\n\nPdf page 1\n\n\n\n\n \n\n\n\n\n\nPdf page 2\n\n\n\n\n \n\n\n\n\n\nPdf page 3",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiformat</span>"
    ]
  },
  {
    "objectID": "034-multiformat.html#footnotes",
    "href": "034-multiformat.html#footnotes",
    "title": "12  Multiformat",
    "section": "",
    "text": "Le code source étant du xml depuis 2007, d’où le x. Avant le code source des fichiers .doc était tout simplement en html↩︎",
    "crumbs": [
      "**Formats**",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiformat</span>"
    ]
  },
  {
    "objectID": "041-theming.html",
    "href": "041-theming.html",
    "title": "13  Theming html",
    "section": "",
    "text": "13.1 Les 26 thèmes bootstrap\nSi on souhaite utiliser le thème zephyr:\nsSi la documentation est en html seulement on peut passer l’option de la manière suivante:",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Theming html</span>"
    ]
  },
  {
    "objectID": "041-theming.html#les-26-thèmes-bootstrap",
    "href": "041-theming.html#les-26-thèmes-bootstrap",
    "title": "13  Theming html",
    "section": "",
    "text": "Les 26 thèmes bootstrap libres sous la norme actuelle html (5) sont directement utilisables dans Quarto.\nDans le yaml du document ou du fichier _quarto.yml on change le thème en option du format html: theme: nom_theme.\n\n---\nformat: \n  html:\n    theme: nom_theme\n---  \n\n---\nformat: \n  html:\n    theme: zephyr\n---  \n\n---\ntheme: zephyr\n---  \n\n13.1.1 Thèmes light/dark\n\nDans les 26 thèmes, un même thème a une variante light et une variante dark:\n\nThème light: flatly.\nThème dark: darly.\n\nAvec Quarto, on peut utiliser switcher de l’un à l’autre.\nL’option theme aura donc deux thèmes en sous option:\n\nlight: nom_theme.\ndark:  nom_theme.\n\n\nAvec les thèmes flatly et darkly:\n---\nformat: \n  html:\n    theme:\n      light: flatly\n      dark:  darkly\n---\n\nAu delà de ces deux thèmes, on peut créer un thème de type dark à partir d’un thème light existant, et inversement.\nOn devra utiliser un fichiers sccs et renseigner manuellement les affectations des couleurs.\nAvec des variables SASS propres à Quarto, on peut faire ces modifications assez facilement. Attention toutefois à bien maîtriser la logique des couleurs entrant dans un thème html.\n\nSi on souhaite générer une version dark du thème zephyr:\n\nOn utilisera un fichier .scss qui affectera les couleurs pour obtenir un thème dark, par exemple zephyr_dark.scss.\nOn l’ajoutera à l’option dark de la façon suivante.\n\n---\nformat: \n  html:\n    theme:\n      light: zephyr\n      dark: [zephyr, zephyr_dark.scss]\n---\n\n\n13.1.2 Changer directement des éléments du thème dans le yaml\n\nSans passer par des manipulations de styles css dans le document, Quarto met à disposition des options qui s’appliquent directement au yaml pour modifier des éléments du thème, comme la couleur des liens Quelques options\nPour une simple question d’homogénéité avec les couleurs prédéfinies du thème il est préférable d’utiliser les couleurs qui sont utilisées dans le thème.\nCes couleurs sont disponibles dans un fichier .scss du thème. Il est très facile de les récupérer, via le site bootswatch ou via des mises à disposition sur un dépôt git:\nPar Quarto\nPar ce support\n\nAvec les couleurs du thème zephyr:\n\n\n\n\nRécupérer facilement les couleurs d’un thème\n\n\n\nPar exemple, pour modifier la couleur des liens (avec une couleur propre au thème): on l’option linkcolor:\n---\nformat: \n  html:\n    theme: zephyr\n    linkcolor: \"#d63384\"\n---  \nAvec un peu d’entraînement il est néanmoins préférable et bien plus facile de passer par un fichier .scss en appliquant les variables SASS clé en main de Quarto pour réaliser ce type de modification.",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Theming html</span>"
    ]
  },
  {
    "objectID": "041-theming.html#sec-scss",
    "href": "041-theming.html#sec-scss",
    "title": "13  Theming html",
    "section": "13.2 Introduction aux CSS et aux variables SASS",
    "text": "13.2 Introduction aux CSS et aux variables SASS\n:CSS Wiki\n:SASS Wiki\n\n\n\n\n\n\n\nNote\n\n\n\nJe conseille vivement de lire l’excellente présentation de Samantha Csik sur ce thème: https://ucsb-meds.github.io/customizing-quarto-websites/#/title-slide\n\n\n\nPour le CSS et surtout la variables SASS, je n’ai a priori aucun savoir ni aucune compétence particulière. Je manipule des styles css depuis ses débuts, mais sur des éléments très simples comme les couleurs, contours, épaisseurs…. Les ressources web sont nombreuses sur le sujet, et on trouvera toujours une réponse des plateformes comme w3schools ou Mmdn_.\nCSS: Cascade Style Sheets, depuis 1996.\n\nDans un fichier .css.\n\nSASS: Syntactically Awesome Style Sheets, depuis 2006.\n\nDans Quarto dans un fichier .scss.\nQuarto met met à disposition des variables Sass prédéfinies pour modifier un thème à la volée.\n\nUne feuille de style .css peut-être complètement remplaçée par un fichier .scss.\n\n\n13.2.1 CSS\nExemple pour modifier l’aspect d’un texte\n\nNom de la classe css: .modiftext\nDans un fichier .css:\n\n.modiftext {\ncolor: red;\nfont-weight: bold;\nfont-size: 20px;\n}\n\nNom de la classe: .modiftext. Ne pas oublier de séparer les attributs avec un ; dans des accolades {attribut1; attribut2;….}.\nLa couleur du texte: color: red;\nL’épaisseur du texte: font-weight: bold1;\nLa taille du texte: font-size: 20px;\n\nUtilisation d’un fichier .css\n\nDans le yaml:\n\n---\nformat: \n  html: \n    css: styles.css\n---\nAjout du style au fichier css et affectation de la classe au texte\n\nOn ajoute la classe .modiftext dans le fichier css.\nOn ajoute la classe dans le texte à modifier: **[texte]{.modiftext}\nOn compile le document qmd. Ces modifications seront affectées au texte.\nSi on veut modifier le style de la classe .modiftext, on modifie les attributs dans le fichier .css et on enregistre. Ils seront directement appliqués.\n\nTout ça en gif animé.\n\n\n\n\nChanger le style d’un texte avec un fichier css\n\n\n\n\n\n13.2.2 SASS\nDe nouveau on se limitera aux couleurs.\n\n13.2.2.1 Fichier scss et variables sass\n\nHors projet Rstudio: on génère un ficher .scss à partir d’un simple fichier texte.\nDans un projet de type website, book…: un ficher scss est automatiquement généré.\nDans le yaml:\n\nSans thème bootstrap:\n---\nformat:\n  html:\n    theme: nom_fichier.scss\n---\nAvec un thème bootstrap:\n---\nformat:\n  html:\n    theme: [flatly, nom_fichier.scss]\n---    \nOu\n---\nformat:\n  html:\n    theme: \n      - flatly\n      - nom_fichier.scss\n---\nOrganisation d’un fichier .scss\n\nCommentaires: //\nUne Zône de définition des variables Sass: obligatoire avec Quarto.\nAvec quarto, une série de variables SASS prédéfinies permettent de modifier automatiquement le style du document.\n\n/*-- scss:defaults --*/\n\n&lt;variables sass&gt;\n\nUne Zône de création de classes css: optionnelle.\n\n/*-- scss:rules --*/\n\n&lt;styles css&gt;\n\nAvec Quarto on pourrait avoir une structure de fichier de la forme:\n\n/*-- scss:defaults --*/\n\n$variable_sass1: attribut\n$variable_sass2: attribut\n\n$variable_sass_quarto: attribut   //affectera directement le style du document\n\n/*-- scss:rules --*/\n\n.classe_css{attribut1:$var_sass1; attribut2: $var_sass2;....}\nOn peut affecter des variables en cascade. Dans l’exemple suivant issu d’un thème bootstrap, les couleurs sont affectés à une variable Sass dont le nom se réfère directement à une couleur.\nOn peut affecter ces variables Sass à de nouvelles variables sass dont les noms structurent les couleurs des 26 thèmes bootstrap (un même nom de variable Sass pour tous les thèmes: $primary: $blue;, $danger: $red;…\nExemple d’affectation en cascade des couleurs avec variables Sass\n\n/*-- scss:defaults --*/\n\n// Couleurs échelle de gris non reportées\n\n$blue:    #2c3e50 ;\n$indigo:  #6610f2 ;\n$purple:  #6f42c1 ;\n$pink:    #e83e8c ;\n$red:     #e74c3c ;\n$orange:  #fd7e14 ;\n$yellow:  #f39c12 ;\n$green:   #18bc9c ;\n$teal:    #20c997 ;\n$cyan:    #3498db ;\n\n$primary:       $blue     ;\n$secondary:     $gray-600 ;\n$success:       $green    ;\n$info:          $cyan     ;\n$warning:       $yellow   ;\n$danger:        $red      ;\n$light:         $gray-200 ;\n$dark:          $gray-700 ;\n\n\n\n13.2.3 Modification du thème avec les variables Sass de Quarto\n\n\n\n\n\n\nNote\n\n\n\nOn peut appliquer un fichier .scss au format reveals.js. Comme le nombre de variables Sass Quarto pour modifier un thème revealsjs est plus limité que pour les documents [lien], site… on peut se faire la main sur les présentations dans un premier temps.\n\n\n\nLes variables Sass de Quarto permettent pratiquement à elles seules de faire un thème complet pour un document ou un site, ou de modifier drastiquement un thème bootstrap existant.\nl’ensemble des ces variables, dont le nombre augmente à chaque nouvelle version, sont directement récupérables sur le [site officiel]\nAucune difficulté ici, pour modifier un élement du thème il suffit d’affecter un attribut à ces variables, à partir d’une variable Sass précédemment définie ou d’un attribut quelconque: couleur, taille, épaisseur….\n\nExemple: la couleur de fond d’une page\n$body-bg: couleur;\n// Une couleur quelconque\n$body-bg: red;\n// Une variable sass d'un thème bootstrap\n$body-bg: $warning;\nTout ça en gif animé.\n\n\n\n\nChanger le style d’un thème avec des variables Sass\n\n\n\n\n13.2.3.1 Les variables Sass de Quarto utilisées pour modifier le thème du support\n$toc-color: $pink;\n$link-color: $pink;\n$code-block-border-left: $purple;\n$code-color: $purple;\n\n\n\n13.2.4 Ajout de styles css dans un fichier scss\n\nDans la partie /*-- scss:rules --*/ du fichier, on peut créer des styles css en utiisant les variables Sass générées précédemment. Par exemple pour définir un style de couleur du texte avec 8 couleurs du thème bootstrap:\n\n\n/*-- scss:defaults --*/\n\n// liste des variables Sass: $couleurs1.... =&gt; $primary, $couleurs2 =&gt; $secondary,...\n\n/*-- scss:rules --*/\n\n.col_primary{color: $primary}\n.col_secondary{color: $secondary}\n.col_success{color: $success}\n.col_info{color: $info}\n.col_warning{color: $warning}\n.col_danger{color: $danger}\n.col_light{color:$light}\n.col_dark{color: $dark}\nOn peut alors ajouter ces styles à des éléments du documents: mot, phrases, paragraphes….\n\nUn mot ou une phrase avec un shortcode texte:\n\nOn change la couleur du [mot success]{.col_success} avec la classe `.col_success`.\nDonnera le résultat suivant:\n\nOn change la couleur du mot success avec la classe .col_success.\n\n\n\nUn paragraphe dans une section &lt;div&gt;: ::: {.nom_classe}:\n\n::: {.col_warning}\nOn change la couleur du texte du paragraphe avec la classe `col.warning`.\n:::\nDonne le résultat suivant:\n\nOn change la couleur du texte du paragraphe avec la classe col.warning.",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Theming html</span>"
    ]
  },
  {
    "objectID": "041-theming.html#footnotes",
    "href": "041-theming.html#footnotes",
    "title": "13  Theming html",
    "section": "",
    "text": "identique à la valeur 900↩︎",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Theming html</span>"
    ]
  },
  {
    "objectID": "042-cross_ref.html",
    "href": "042-cross_ref.html",
    "title": "14  Notes, références croisées et bibliographie",
    "section": "",
    "text": "14.1 Insérer des notes de bas de page\nOn va insérer la note en renseignant directement son numéro1\nOn va insérer la note en la rédigant directement dans la phrase 2.\nPetit warning: d’après mon expérience, si on bascule du mode visual au mode source les notes renseignées avec la méthode2 sont transformée en méthode 1 (le contenu de la note étant directement mise sous le paragraphe où elle est appelée.",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Notes, références croisées et bibliographie</span>"
    ]
  },
  {
    "objectID": "042-cross_ref.html#sec-note",
    "href": "042-cross_ref.html#sec-note",
    "title": "14  Notes, références croisées et bibliographie",
    "section": "",
    "text": "Plusieurs syntaxes pour insérer une note. (attention aux bascules avec le visual mode qui en privilégie une)\nLes notes sont rédigés dans des crochets.\nOn indique qu’il s’agit d’une note avec ^\nMéthode 1: Insérer un numero de note et la renseigner dans un endroit du document qmd: en dessous de la phrase ou du paragraphe qui appelle la note, en fin de document…. A privilégier peut-être pour des notes longues.\n\nOn va insérer la note en renseignant son numéro[^1]  \n\n[^1]:  C'est la première note, dont le contenu est rédigé ici directement sous la phrase.\n\n\nMéthode 2: la note est directement rédigée dans la phrase avec ^[Contenu de la note].\n\nOn va insérer la note en la rédigant directement dans la phrase ^[Contenu de la note, qui sera ici la seconde du chapitre].",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Notes, références croisées et bibliographie</span>"
    ]
  },
  {
    "objectID": "042-cross_ref.html#insérer-des-références-croisées",
    "href": "042-cross_ref.html#insérer-des-références-croisées",
    "title": "14  Notes, références croisées et bibliographie",
    "section": "14.2 Insérer des références croisées",
    "text": "14.2 Insérer des références croisées\n\nDocumentation: https://quarto.org/docs/authoring/cross-references.html\nLes références croisées sont des liens internes qui s’appliquent à divers éléments d’un document:\n\nImage(s) insérée en markdown.\nGraphique(s) généré(s) par un programme.\nTableau(x) inséré(s) en markdown.\nTableau(x) générés dans un programme.\nBloc de codes\nEncadrés informatifs (callout).\nChapitres et sections\nEquations.\n\n\nEn passant sur le lien une fenêtre s’ouvre donnant la totalité ou un apperçu du lien.\n\n14.2.1 Nouvelle syntaxe et nouveaux éléments avec la version 1.4\n\nOn peut insérer le label directement dans une section div.\nNouveaux éléments concernés comme les vidéos.\n\n\nPrincipe\n\nPour ajouter un élément qui fera l’objet d’un renvoi dans une autre partie du du document, on doit ajouter un label en option de cet élément.\nLa création de ce label dépend de la façon dont est généré l’élément.\n\nPour une image ou un graphique:\n\nMarkdown: {#fig-nom_label}\nProgramme: en option du bloc #| label: nom_label\nOn appelle l’élément référencé avec @nom_label3.\n\n\n\n\n\n\n\n\n\nEléménts\nMarkdown /Section div (:::)\nOption bloc de code\n\n\n\n\nGraphique/Image\n{#fig-nom_label}\n#| label: \"nom_label\"\n\n\nTableau\n{#tbl-nom_label}\n#| label: tbl-nom_label\n\n\nProgramme\n::: {#lst-nom_label}\n#| lst-label: lst-nom_label\n\n\nCallout\n{.callout-typ #prefix-nom_label}[Table 14.1]\n\n\n\nEquation/formule\n{#eq-nom_label}\n\n\n\nChapitre/section\n{#sec-nom_label}\n\n\n\nVideo\n::: {#fig-nom_label}\n\n\n\n\n\n\n14.2.2 Image markdown\nEn option de l’image: ![Titre](lien_image){#fig-nom_label}.\n\nPar exemple pour les trois éléments du grid d’un document html (Chapitre sur le format html):\n\n![Doc quarto-grid par défaut](https://quarto.org/docs/output-formats/images/grid.png){#fig-gridhtml}\n\nInsérer dans une phrase fig-gridhtml. Résultat:\n\n\nSe rappeler que la mise en page d’un document html comporte 3 colonnes: la sidebar à gauche, le body au centre, et la margin à droite [Figure 10.1].\n\n\n\n\n\n\n\nImportant\n\n\n\nPlusieurs options à l’image\nSi on a déjà une option, dans l’exemple width=70%, on met le label à l’intérieur des mêmes accolades: {width=70% #fig-gridhtml}.\n\n\n\n\n\n14.2.3 Graphique généré par un programme\nPour les graphiques, le label est directement renseigné en option du bloc de codes avec #| label: nom_label.\n#| label: \"nom label\"\n#| echo: fenced\n#| label: \"fig-scatter_cars\"\n#| fig-cap: \"**Position top du titre défini dans le `yaml`**\"\n\ndata(\"mtcars\")\nx &lt;- mtcars$wt\ny &lt;- mtcars$mpg\nplot(x, y)\nInsérer dans une phrase @fig-scatter_cars. Résultat:\n\nRelation entre le poids de la voiture et la distance parcourue pour 3.8 litres d’essence [Figure 5.1]…..sans surprise.\n\n\n\n\n14.2.4 Tableau markdown\n\nMême principe que pour les images. On ajoute le label en option sous le tableau généré avec des pipes.\nOn remplace simplement #fig-nom_label par #tbl-nom_label\n\n\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n\n: Titre tableau {#tbl-tableau_md}\nInsérer dans une phrase @tbl-tableau_md. Résultat:\n\nTableau généré en markdown avec le mode visual [Table 3.1]\n\n\n\n14.2.5 Tableau généré par un programme\n\nMême principe que pour les graphiques. On ajoute le label en option dans le bloc de code avec #| label: \"tbl-nom_label\".\n\n#| label: \"tbl-mtcars_df\"\n#| tbl-cap: \"Base voitures\"\n\ndata(\"mtcars\")\nknitr:: kable(head(mtcars[, 1:4]))\nInsérer dans une phrase: @tbl-mtcars_df. Résultat:\n\nSe reporter à l’extrait de la base mtcars [Table 5.1]\n\n\n\n\n14.2.6 Un bloc de codes\n\nPour référencer un bloc de code, deux possibilités:\n\nVia les options du bloc\nAvec la version 1.4 de Quarto, dans une section div.\n\nLe référencement se fait avec le prefixe lst-:\nEn option du bloc de codes:\n\nLe label de la référence est donné par l’option #| lst-label: nom_label.\nOn peut mettre un titre au label: #| lst-cap: titre.\n\n\nDans le chapitre sur les blocs de code:\n```{r}\n#| lst-label: lst-code\n#| lst-cap: \"Calcul moyenne\"\n\nval = c(10,15,5,2,12,7)\nmoy = mean(val)\n```\n\nDans une section div: {#lst-nomlabel}\n\n::: {#lst-nom_label}\n&lt;programme&gt;\n:::\n\nRésultat (options du bloc):\n\n\nLe programme pour calculer la moyenne [Listing 5.1]\n\n\n\n\n14.2.7 Callout\n\nTrès utile, par exemple pour ne pas avoir à multiplier, par exemple, un rappel dans un même document ou support.\nDans l’ouverture de la section div (:::) on va ajouter un label à l’encadré informatif.\nComme on ajoute une option, on devra utiliser directement la classee css associée:\n\nSans la label: ::: callout-tip\nAvec un label: ::: {.callout-tip #prefix-nom_label}\n\nLes préfixes: les labels doivent être préfixés de la manière suivante:\n\n\n\n\n\n\nTable 14.1: Préfixe selon le type d’encadré\n\n\n\n\n\nType de callout\nprefixe du label\n\n\n\n\nnote\n#nte-\n\n\ntip\n#tip-\n\n\nwarning\n#wrn-\n\n\nimportant\n#imp-\n\n\ncaution\n#cau-\n\n\n\n\n\n\n\n\nPar exemple dans le chapitre 3, on veut rappeler qu’il peut-être utile d’utiliser la balise  pour ajouter des sauts des lignes. On a ajouté dans ce callout le label #tip-multi_br\n::: {.callout-tip #tip-multi_br}\n### Plusieurs sauts de ligne\n\nSelon le traducteur Markdown il est possible ou non d'augmenter le nombre de saut de ligne en ajoutant des backslash. Par exemple pour sauter 3 lignes `\\\\\\`.\\\nCe n'est pas possible avec Quarto ou Rmarkdown. La solution est alors d'ajouter une ou plusieurs balises html `&lt;br&gt;`. Pour un document en format PDF on peut ajouter la balises Latex `\\linebreak`[^012-markdown-5]\n:::\n\nInsérer dans une phrase: @tip-multi_br. Résultat:\n\n\nSi on veut faire plusieurs sauts de ligne avec une balise html [Tip 3.1]\n\n\n\n\n14.2.8 Section\n\nOn peut renvoyer vers une section particulière du document en ajoutant le label après le titre avec #sec-nom_label. C’est une forme de lien au final.\n\nDans cette page, si je veux renvoyer à la section “Insérer une note”:\n## Insérer des éléments bibliographiques {#sec-note}  \nInsérer dans une phrase: @sec-note. Résultat:\n\nSe reporter à la section sur les notes de bas de page [Section 14.1].\n\n\n\n\n14.2.9 Equation/formule\n\nSeulement pour les équations/formule sur une ligne entière: $$formule$$\nAprès l’équation/formule on ajoute directement le label {#eq-nom_formule}\n\n$$\\sum_{i=0}^n p_i=1$$  {#eq-probsum}\n\\[\\sum_{i=0}^n p_i=1 \\tag{14.1}\\]\nInsérer dans une phrase: @eq-probsum. Résultat:\n\nRappel: une des propriétés des probabilités est Équation 14.1\n\nOn remarque le numéro de l’équation/formule dans le document est reporté à sa droite.\n\n\n\n\n\n\nAffichage du contenu dans la popup\n\n\n\n\nEn passant sur la référence on voit une popup apparaitre.\n\nDans les renvois vers un autre chapitre, et donc un autre document, cette popup est vide4.\nDans les deux dernières références croisées, le renvoi était sur le même document. Le début de la section bibliographie et la formule s’affiche dans la popup.\n\n\n\n\n\n\n14.2.10 Une vidéo\nDans une section div (:::) ajouter le label ::: {fig-nom_label} au shortcode de la video. Par exemple pour la vidéo de l’entretien de JJ.Allaire qui se trouve en introduction du support:\n\n\n\nInsérer dans une phrase: @fig-video. Résultat:\n\nSe reporter à l’entretien de JJ.allaire [Figure 1]",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Notes, références croisées et bibliographie</span>"
    ]
  },
  {
    "objectID": "042-cross_ref.html#sec-biblio",
    "href": "042-cross_ref.html#sec-biblio",
    "title": "14  Notes, références croisées et bibliographie",
    "section": "14.3 Insérer des éléments bibliographiques",
    "text": "14.3 Insérer des éléments bibliographiques\n\nAvoir un fichier .bib qui comprend a minima toutes les références qui seront citées.\nDans le yaml, on ajoute le ou les fichiers avec l’ option bibliography: nom_fichier.bib\n\n---\nbibliography: festy.bib\n---\nDans le fichier festy.bib, une référence est par exemple:\n@incollection{cortina_same-sex_2020,\n    address = {\"Cham, Suisse\"},\n    series = {European {Studies} of {Population}},\n    title = {Same-{Sex} {Couples} and {Their} {Legalization} in {Europe}: {Laws} and {Numbers}},\n    volume = {24},\n    isbn = {978-3-030-37054-1},\n    url = {https://doi.org/10.1007/978-3-030-37054-1_3},\n        author = {Cortina, Clara and Festy, Patrick},\n}\nDans le corps de texte on appelle la référence bibliographique avec le nom du ou des auteur.re.s @nom_reference_biblio, ici @cortina_same-sex_2020\nInsertion de la référence dans le corps du texte de **@cortina_same-sex_2020**\n\nInsertion 1 de la référence dans le corps du texte de Cortina et Festy (2020).\n\nInsertion 2 de la référence dans le corps du texte de Festy (2013).\n\nEn fin du document qmd, d’une section ou d’un chapitre, on peut insérer l’ensemble des références bibliographiques citées dans une section div avec la classe quarto {#refs}. Cette section n’a aucun contenu.\nPar exemple à la fin de cette section:\n### Bibliographie\n\n::: {#refs}\n:::\n\n14.3.1 Bibliographie",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Notes, références croisées et bibliographie</span>"
    ]
  },
  {
    "objectID": "042-cross_ref.html#footnotes",
    "href": "042-cross_ref.html#footnotes",
    "title": "14  Notes, références croisées et bibliographie",
    "section": "",
    "text": "C’est la première note, dont le contenu est rédigé ici directement sous la phrase.↩︎\nContenu de la note, qui sera ici la seconde du chapitre↩︎\nMême principe que pour une référence bibliographique↩︎\nAu cas où, en tout cas chez moi↩︎",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Notes, références croisées et bibliographie</span>"
    ]
  },
  {
    "objectID": "043-layout.html",
    "href": "043-layout.html",
    "title": "15  Eléments de mise en page",
    "section": "",
    "text": "15.1 Rappel sur l’édition en multicolonne",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eléments de mise en page</span>"
    ]
  },
  {
    "objectID": "043-layout.html#rappel-sur-lédition-en-multicolonne",
    "href": "043-layout.html#rappel-sur-lédition-en-multicolonne",
    "title": "15  Eléments de mise en page",
    "section": "",
    "text": "A réserver plutôt à des éléments texte: paragraphe ou liste. Particulièrement utile pour les présentations de type revealjs.\nUne colonne simple: dans une section div: classe css {.column width=\"x%\"}\n\n::: {.column width=\"33%\"}\nQuelques indications sur des mises en pages spécifiques pour des documents de type articles/notebook en format html.\n::: \n\nQuelques indications sur des mises en pages spécifiques pour des documents de type articles/notebook en format html.\n\n\nPlusieurs colonnes:\n\nOn indique une mise en page sur plusieurs colonnes avec une déclaration préalable: section div introduite avec 4 : (imbrication) et la classe {.columns}:\n:::: {.columns}\n\n\n:::: {.columns}\n::: {.column width=\"33%\"}\nQuelques indications sur des mises en pages spécifiques pour des documents de type articles/notebook en format html.\n::: \n::: {.column width=\"33%\"}\nCela concernera l'édition sous forme de colonnes, l'insertion d'éléments dans la zône du grid située à droite (margin) et la mise en page de plusieurs images ou graphiques sous forme de vignettes.\n::: \n::: {.column width=\"33%\"}\nSur ce dernier aspect, il s'agit de tirer profit de l'option **`lightbox`**.\n::::\n\n\nOn trouvera ici quelques indications sur des mises en pages spécifiques pour des documents de type articles/notebook en format html.\n\nCela concernera l’édition sous forme de colonnes, l’insertion d’éléments dans la zône du grid située à droite (margin) et la mise en page de plusieurs images ou graphiques sous forme de vignettes.\n\nSur le second aspect, il s’agit de tirer profit de l’option lightbox.\n\n\n\nOn peut augmenter l’espace entre deux colonnes en ajoutant des colonnes vide et en jouant sur la largeur.\n\n:::: {.columns}\n::: {.column width=\"29%\"}\nQuelques indications sur des mises en pages spécifiques pour des documents de type articles/notebook en format html.\n::: \n::: {.column width=\"6%\"}\n:::\n::: {.column width=\"29%\"}\nCela concernera l'édition sous forme de colonnes, l'insertion d'éléments dans la zône du grid située à droite (margin) et la mise en page de plusieurs images ou graphiques sous forme de vignettes.\n::: \n::: {.column width=\"6%\"}\n:::\n::: {.column width=\"29%\"}\nSur ce dernier aspect, il s'agit de tirer profit de l'option **`lightbox`**.\n:::\n::::\n\n\nQuelques indications sur des mises en pages spécifiques pour des documents de type articles/notebook en format html.\n\n\n\nCela concernera l’édition sous forme de colonnes, l’insertion d’éléments dans la zône du grid située à droite (margin) et la mise en page de plusieurs images ou graphiques sous forme de vignettes.\n\n\n\nSur ce dernier aspect, il s’agit de tirer profit de l’option lightbox.",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eléments de mise en page</span>"
    ]
  },
  {
    "objectID": "043-layout.html#insertion-déléments-dans-la-marge-à-droite-du-document",
    "href": "043-layout.html#insertion-déléments-dans-la-marge-à-droite-du-document",
    "title": "15  Eléments de mise en page",
    "section": "15.2 Insertion d’éléments dans la marge à droite du document",
    "text": "15.2 Insertion d’éléments dans la marge à droite du document\nPour les éléments de type image/graphique, penser à activé l’option lightbox qui permettra de les agrandir dans une fenêtre.\n\n\n\n\n\n\nFormat PDF\n\n\n\nPour le format pdf, utiliser dans le yaml les options suivantes\n\nGraphiques: cap-location:margin\nTitres des graphiques: fig-cap-location: margin\nTitre des tableaux: fig-cap-location: margin\n\n\n\n\n15.2.1 La classe css générique .column-margin\nSyntaxe:\n::: {.column-margin}\n\nElements à insérer\n\n:::\nImage Markdown\n\nPenser à activer l’option lightbox qui permettra d’agrandir\n\n::: {.column-margin}\n![Logo Quarto](https://quarto.org/quarto.png)\n:::\n\n\n\n\n\nLogo Quarto\n\n\nGraphique généré dans un programme\n\nUn peu compliqué pour reporter proprement cela dans le support…mais ça marche.\nIl me semble préférable d’utiliser directement l’option dans le bloc de code pour éviter un balisage.\n\nUne liste\n::: {.column-margin}\n\n* item1\n  * item11\n  * item12\n* item2 \n:::\n\n\n\nitem1\n\nitem11\nitem12\n\nitem2\n\nUne formule\n::: {.column-margin}\n$$x^2-1=(x-1)(x+1)$$\n:::\n\n\n\\[x^2-1=(x-1)(x+1)\\]\nUn tableau markdown\n\n\n\nTableau markdown\n\n\nCol1\nCol2\n\n\n\n\nA\nB\n\n\nC\nD\n\n\n\n::: {.column-margin}\n| Col1 | Col2 |\n|------|------|\n| A    | B    |\n| C    | D    |\n: Tableau markdown\n:::\nA noter que l’on peut appliquer directement ::: column-margin.\n\n\n15.2.2 Options dans un bloc de codes\n\nOption #| column: margin.\nPour les graphiques, l’ajout d’un label semble obligatoire, je ne comprend pas vraiment pourquoi.\n\nGraphique\n\n\n\n\n\n\n\n\n\nFigure 15.1: Consommation selon l’origine\n\n\n\n\n```{r}\n#| label: fig-mpg\n#| column: margin\n#| fig-cap: \"Consommation selon l'origine\"\n#| warning: false \n#| message: false\n\nlibrary(ggplot2)\nmtcars$am = as.factor(mtcars$am)\n\nggplot(mtcars, aes(x=mpg, fill=am)) +\n       geom_density(alpha=0.4)\n```\nTableau\n\n\n\n\nExtrait base mtcars\n\n\n\nmpg\ncyl\ndisp\n\n\n\n\nMazda RX4\n21.0\n6\n160\n\n\nMazda RX4 Wag\n21.0\n6\n160\n\n\nDatsun 710\n22.8\n4\n108\n\n\n\n\n```{r}\n#| tbl-cap: \"Extrait base mtcars\"\n#| column: margin\n\nknitr::kable(\n  mtcars[1:3, 1:3]\n)\n```\n\n\n15.2.3 Note à droite du texte\nLes notes font l’objet d’un traitement particulier. Le positionnement dans la marge se fait avec l’utilisation de la classe css .aside. Attention comme la note est directement visible, aucun numéro ne lui est affecté.\nOn peut ajouter une note directement à droite du texte avec la classe css\n**.aside**[Comme elle se situe directement à droite du texte, aucun numéro\nde note n'est généré]{.aside}\nOn peut ajouter une note directement à droite du texte avec la classe css .asideComme elle se situe directement à droite du texte, aucun numéro de note n’est généré.",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eléments de mise en page</span>"
    ]
  },
  {
    "objectID": "043-layout.html#sec-img",
    "href": "043-layout.html#sec-img",
    "title": "15  Eléments de mise en page",
    "section": "15.3 Mise en page sous forme de vignettes des images/graphiques",
    "text": "15.3 Mise en page sous forme de vignettes des images/graphiques\nDeux types d’insertion: fixe ou libre\n\n15.3.1 Mise en forme fixe\n\nClasse css ou option d’un bloc de codes: layout-ncol\n\nInsertion markdown: ::: {layout-ncol=nbre_col}\n\nAttention, la classe css n’est pas préfixée par un ..\n\nBloc de codes: option #| layout-ncol: nbre_col\n\n\nExemple: insertion d’images markdown sous forme de vignettes\n::: {layout-ncol=4}\n![](img5/img1.png){group=\"g1\"}\n\n![](img5/img2.png){group=\"g1\"}\n\n![](img5/img3.png){group=\"g1\"}\n\n![](img5/img4.png){group=\"g1\"}\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExemple: deux graphiques générés par un programme\n```{r}\n#| echo: false\n#| warning: false \n#| message: false\n#| layout-ncol: 2\n\nlibrary(ggplot2)\nmtcars$am = as.factor(mtcars$am)\n\nmpg = ggplot(mtcars, aes(x=mpg, fill=am)) +\n  geom_density(alpha=0.4)\n  \ndisp = ggplot(mtcars, aes(x=disp, fill=am)) +\n  geom_density(alpha=0.4)\n\nmpg\ndisp\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.3.2 Mise en forme libre\n\nClasse css {layout= ... }. De nouveau non préfixée par un .\n\nPlus compliqué au premier abord en raison de la syntaxe, mais plus souple pour jouer sur l’espace entre deux images.\nOn va renseigner les ratios d’affichage entre les différentes images par des valeurs.\nOn peut modifier l’espace entre deux images.\n\nEn option d’un bloc de codes: #| layout: ...\n\nSyntaxe par l’exemple avec deux images:\n\n:::{layout= \"[valeur1,valeur2]\"}\n\nValeur1 et valeur2 n’indique pas une taille d’affichage des images mais le ratio d’affichage entre les deux.\n\n\nLes images seront affichées de manière identique lorsque les valeurs sont identiques1.\n::: {layout=\"[50,50]\"}\n![](img5/img1.png) \n\n![](img5/img2.png)\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\nSi on remplace [50,50] par [1,1]:\n::: {layout=\"[1,1]\" }\n![](img5/img1.png) \n\n![](img5/img2.png)\n\n:::\nL’affichage des vignettes ne change pas:\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaintenant si on modifie le ratio de la manière suivante:\n::: {layout=\"[1,0.5]\" }\n![](img5/img1.png) \n\n![](img5/img2.png)\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa seconde image n’est affiché qu’à 50%, et aligné vers le haut.\nVu comme ça, l’utilité n’est pas évidente. Si les images sont enregistrées avec des hauteurs différentes, cela peut-être néanmoins intéressant que l’espace soit rempli identiquement pour les deux images.\nExemple: On a une image nativement moins haute que l’autre de 25%: avec un ratio égal à 1 on aurait:\n::: {layout=\"[1,1]\"}\n![](img5/img4.png) \n\n![](img5/img10.png)\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSi on veut égaliser les hauteurs d’affichage, on rééquilibre le ratio: {layout=\"[0.75,1]\"}2.\n\n::: {layout=\"[0.75,1]\"}\n![](img5/img4.png) \n\n![](img5/img10.png)\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSi on ne souhaite pas modifier le ratio d’affichage, il est visuellement plus correct d’aligner verticalement les images vers le bas avec l’option layout-valign=\"bottom\"\n\n::: {layout=\"[1,1]\" `layout-valign=\"bottom\"`}\n![](img5/img4.png) \n\n![](img5/img10.png)\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPour afficher des images sur plusieurs lignes on ajoute une nouvelle liste d’images séparée de la précédente avec , et en cloturant le tout dans des crochets:\n\n::: {layout=\"[[liste ligne 1],[liste ligne 2]]\"}.\n\n\n::: {layout=\"[[1,1,1,1],[1,1,1,1]]\"}\n![](img5/img1.png)\n\n![](img5/img2.png)\n\n![](img5/img3.png)\n\n![](img5/img4.png)\n\n![](img5/img5.png)\n\n![](img5/img6.png)\n\n![](img5/img7.png)\n\n![](img5/img8.png)\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn peut modifier (agrandir) l’espace entre 2 images avec des valeurs négatives entre deux images.\n\nPar défaut avec 2 images:\n::: {layout=\"[1,1]\"}\n![](img5/img4.png)\n\n![](img5/img8.png)\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\nSi on veut accroître la distances entre les deux images d’un dizième de la largeur des images\n::: {layout=\"[1,-0.1,1]\"}\n\n![](img5/img4.png)\n\n![](img5/img8.png)\n:::\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nSi on veut que la distance soit égale à la largeur des images\n::: {layout=\"[1,-1,1]\"}\n\n![](img5/img4.png)\n\n![](img5/img8.png)\n:::\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\nFonctionne également, sous forme d’option, avec des graphiques générés dans un bloc de codes.\n\n```{r}\n#| eval: false\n#| warning: false\n#| message: false\n#| layout: \"[[1],[0.5,0.5]]\"\n\nlibrary(ggplot2)\n\nmtcars$am = as.factor(mtcars$am)\n\nmpg=ggplot(mtcars, aes(x=mpg, fill=am)) +\n  geom_density(alpha=0.4)\n\ndisp=ggplot(mtcars, aes(x=disp, fill=am)) +\n  geom_density(alpha=0.4)\n\nwt=ggplot(mtcars, aes(x=wt, fill=am)) +\n  geom_density(alpha=0.4)\n\nwt\nmpg\ndisp\n```",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eléments de mise en page</span>"
    ]
  },
  {
    "objectID": "043-layout.html#footnotes",
    "href": "043-layout.html#footnotes",
    "title": "15  Eléments de mise en page",
    "section": "",
    "text": "Elles sont ici enregistrées avec des tailles identiques également↩︎\nMême résultat avec [1,1.25]↩︎",
    "crumbs": [
      "**Theming, références croisées, mise en page**",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eléments de mise en page</span>"
    ]
  },
  {
    "objectID": "051-introduction.html",
    "href": "051-introduction.html",
    "title": "16  Généralités",
    "section": "",
    "text": "16.1 Les types de contenu\nCe chapitre constitue une courte introduction aux contenus enrichis tels que les sites, book et blog. Jusqu’à présent, et quelque soit le format de l’output, le support traitait seulement le contenu d’un seul fichier. On va simple passer à une documentation générées par plusieurs fichers sources. Les 3 types de documentation traités ici se distinguent par la façon dont les différents documents qui les composents:\nAu final avec Quarto seulement deux types de projets stricto sensu sont reconnus: le projet de type website et le projet de type book.\nVoici les quelques associations possibles\nPour créer un projet par type de contenu: file  new project  new directory =&gt; choix du type de contenu.",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Généralités</span>"
    ]
  },
  {
    "objectID": "051-introduction.html#les-types-de-contenu",
    "href": "051-introduction.html#les-types-de-contenu",
    "title": "16  Généralités",
    "section": "",
    "text": "Website:\n\nLiens plus ou moins autonomes indéxés dans une ou deux barres de navigation (une horizontale - navbar- et/ou une verticale -sidebar-).\n\nLa présence d’un fichier _quarto.yml est obligatoire.\nUne parti du contenu associé au site peut-être externe.\n\nBook:\n\nChapitrage strict.\nLes documents seront indéxés dans une barre de navigation verticale.\nLa présence d’un fichier _quarto.yml est obligatoire.\nCompilation d’ensemble en pdf…\n\nBlog:\n\nSerie d’articles autonomes indéxées dans un listing selon leur date de publication et liés optionnellement entre eux par la définition de catégories.\nIl n’y a pas formellement de projet de type blog, il s’agit d’une variante d’un projet de type website.\nBien que fortement conseillé, il n’est pas obligatoire d’y associer un fichier _quarto.yml.\nLes différents articles seront enregistrés dans un répertoire spécifique. Ces répertoires seront également dans localisés dans un sous répertoire du répertoire racine. Il pourra contenir un fichier de configuration propre aux article appelé _metadata.yml.\nPlusieurs blogs peuvent être créés dans un même projet blog.\n\n\n\n\nOn peut associer dans un même projet plusieurs types de contenu.\nLe plus souple est le website car on peut y associer un book ou un blog.\nOfficiellement il n’est pas possible de créer un projet de type book et d’y associer un contenu de type blog. Cela est néanmoins possible, mais avec de fortes limitations.\n\n\n\nProjet de type website [navbar]:\n\nAjout d’un book [sidebar]\nAjout d’un blog [listing]\n\nProjet de type book [sidebar]:\n\nAjout d’un website [navbar]\nAvec de fortes limitations, ajout d’une liste manuelle d’articles sous forme de blog. ## Création du projet\n\nPour débuter ou pour se faire la main, je conseille de partir d’un projet généré automatiquement dans new project. A force on ira piocher des informations sur les répertoires git mettant à disposition les codes sources, et on réutilisera directement les configurations issus de projets créer précédemment (ce que je fait systématiquemen maintenant).",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Généralités</span>"
    ]
  },
  {
    "objectID": "051-introduction.html#compilation-densemble",
    "href": "051-introduction.html#compilation-densemble",
    "title": "16  Généralités",
    "section": "16.2 Compilation d’ensemble",
    "text": "16.2 Compilation d’ensemble\nOn peut bien évidemment compiler les fichiers un par un. Pour la moindre modification du fichier _quarto.yml qui porterait sur l’ajout ou la suppression de fichier, un changement de chapitrage pour les books, ou une modification d’une option qui s’applique à tous les fichiers sources (options du thème par exemple) demandera un compilation d’ensemble\nPour compiler l’ensemble des fichiers .qmd contenus dans le projet, dans le terminal:\nquarto render\nUtile pour le format book on peut préciser le format de l’output et éviter une compilation multiformat si elle n’est pas nécessaire\nquarto render --to pdf\n\n\n\n\n\n\nAvertissement\n\n\n\nSi on visualise le rendu directement dans le répertoire de destination, _site, docs ou public pour un déploiement sur github ou gitlab, certaines options semblent ne pas fonctionner ou s’activer correctement. C’est le cas de la barre de recherche. C’est normal car elles reposent sur serveur propre à une fonctionnalité javascript. Pour vérifier que tout s’active normalement, il faut donc se fier au rendu du viewer de Rstudio. On peut exécuter dans le terminal quarto preview pour checker toutes les fonctionnalités incluses dans la documentation. Attention l’ouverture et la navigation via le serveur local généré avec quarto preview est plus longue par rapport aux fichiers html stockés dans le répertoire de destination.",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Généralités</span>"
    ]
  },
  {
    "objectID": "051-introduction.html#le-fichier-_quarto.yml",
    "href": "051-introduction.html#le-fichier-_quarto.yml",
    "title": "16  Généralités",
    "section": "16.3 Le fichier _quarto.yml",
    "text": "16.3 Le fichier _quarto.yml\nLe fichier _quarto.yml comporte à minima les éléments suivants:\n\nLe type de projet: website ou book\nSelon le type de projet:\n\nLa liste des fichiers qui lui seront directement associés: fichiers .qmd dans le répertoire du projet ou fichiers externes de type lien html.\nDes options propres au type de contenu. Par exemple pour le mode book, afficher un icône qui permet de télécharger la version pdf.\n\nPour la très grande majorité des options, il est toujours possible dans le yaml d’un fichier .qmd de changer certains paramètres définis globalement dans le fichier _quarto.yml:\n\nExemples: on peut désactiver la table des matière1, changer les options par défaut d’exécution des blocs de codes dans un ou plusieurs fichiers.qmd.\nContre exemple: les éléments liés au thème ne peuvent pas être modifiés directement dans le yaml d’une page",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Généralités</span>"
    ]
  },
  {
    "objectID": "051-introduction.html#le-fichier-_quarto.yml-1",
    "href": "051-introduction.html#le-fichier-_quarto.yml-1",
    "title": "16  Généralités",
    "section": "16.4 Le fichier _quarto.yml",
    "text": "16.4 Le fichier _quarto.yml\n\n16.4.1 Options du project\n\nproject:\n\nIndiquer le type de projet: type: website ou type: book.\nIndiquer le répertoire de destination (par défaut **_site): output-dir: nom_repertoire**.\n\nPour Github: output-dir: docs.\nPour Gitlab: output-dir: public.\n\n\n\nproject:\n  type: website\n  output-dir: public\nCe _quarto.yml est suffisant pour générer un blog.\n\n\n16.4.2 L’option freeze\nPar définition ce type de documentation impliques plusieurs fichiers .qmd, voire des dizaines. Par défaut quarto render repasse tout à la moulinette. La durée de compilation peut être excessivement longue, surtout si un nombre limité de fichiers ont été créés ou modifiés entre deux compilations.\nQuarto donne la possibilité de réduire la durée de compilation aux fichiers dont les blocs de code ont été modifiés avec la sous option de execute: freeze: auto/true/false:\n\nfreeze: auto: hors scripts tous les fichiers sont compilés. La compilation des blocs de codes se fait seulement en cas de modification.\nfreeze: true: hors scripts tous les fichiers sont compilés. Même si un script a été modifié, les blocs de code ne sont pas exécutés de nouveau. On devra compiler le document individuellement pour exécuter les blocs de codes. Cette option est privilégié pour les contenus de type blog.\nfreeze: false: Tout est de nouveau compilé.\n\n\n\n16.4.3 Plusieurs fichiers .yml\nOn peut créer des fichiers yaml en plus du fichier _quarto.yml. Il seront fusionnés avec le fichier de configuration principal lors de la compilation. C’est ce que fait par exemple Quarto lorsqu’on génère un projet blog via New project . Dans les fichiers générés on aura:\n\nLe fichier _quarto.yml qui définit le type de projet (un simple website).\nUn fichier metadata.yml dans le répertoire post qui fixe la règle d’exécution des blocs de code des articles.\n\nPar défaut ces yaml supplémentaires s’appellent _metadata.yml. Si le fichier de configuration _quarto.yml semble trop long on peut le scinder en plusieurs fichiers dans la répertoire racine du projet:\n\nOn génère plusieurs fichiers .yml avec des noms différents.\nDans le fichier _quarto.yml on liste les autres fichiers .yml qui devront être fusionnés avec lui lors de la compilation avec l’option metadata_files:.\n\n\n_quarto.yml_navbar.yml_format.yml\n\n\n\n\n_quarto.yml\n\nproject:\n  type: website\n  output_dir: public\n\nmetadata_files:\n  - _navbar.yml\n  - _format.yml\n\n\n\n\n\n_navbar.yml\n\nwebsite: \n  navbar:\n    left:\n      - href: index.qmd\n        text: \"Accueil\"\n      - href: page1.qmd\n        text: \"Titre1\"\n      - href: page2.qmd\n        text: \"Titre2\"\n\n\n\n\n\n_format.yml\n\n\nformat:\n  html:\n    theme:\n      light: [flatly, styles.scss]\n      dark:  [darkly, styles_dark.scss]\n    css: styles.css\n    code-tools:\n      source: true\n      toggle: false\n    grid:\n      sidebar-width: 350px\n      body-width: 950px\n      margin-width: 300px\n      gutter-width: 1.5rem\n    mainfont: \"roboto\"",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Généralités</span>"
    ]
  },
  {
    "objectID": "051-introduction.html#footnotes",
    "href": "051-introduction.html#footnotes",
    "title": "16  Généralités",
    "section": "",
    "text": "Ce que j’ai fait pour la page d’accueil de ce support↩︎",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Généralités</span>"
    ]
  },
  {
    "objectID": "052-site.html",
    "href": "052-site.html",
    "title": "17  Website",
    "section": "",
    "text": "17.1 Le squelette de site généré automatiquement\nOn va partir du site généré par Quarto en créant un project (Files  New project  New directory  Quarto website).\nLes fichiers générés:\nA la première compilation, le nom du site est celui donné au projet. Le rendu est le suivant:\nLe fichier _quarto.yaml généré automatiquement comporte les éléments suivants:\nPar défaut, le dossier de destination de l’output sera dans un répértoire généré avec le nom **_site. On peut le changer pour un déploiement sur Gitlab ou github: puclic** ou docs. Par exemple pour gitlab:\nPour la page d’accueil:\nPour le fichier about.qmd il n’y a pas de nom explicité alors que dans le menu, le nom du lien est About. Si on explicite pas dans _quarto.yml le nom du lien, c’est le titre apparaissant dans le fichier .qmd qui sera utilisé. Dans le yaml du fichier about.qmd:\nSi on ne renseigne pas de nom du lien dans le fichier .qmd également, dans le menu le nom reporté sera celui de l’output, ici quarto.html.",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Website</span>"
    ]
  },
  {
    "objectID": "052-site.html#le-squelette-de-site-généré-automatiquement",
    "href": "052-site.html#le-squelette-de-site-généré-automatiquement",
    "title": "17  Website",
    "section": "",
    "text": "Un fichier de configuration quarto.yaml\nDeux fichiers .qmd:\n\nindex.qmd. Ce fichier est obligatoire, c’est la page d’accueil du site.\nabout.qmd. Un fichier additionnel de contenu.\n\n\n\n\n\n\n\n\n\n\n\n\nAccueil du site\n\n\n\n\n \n\n\n\n\n\nPage “About”\n\n\n\n\n\n\n\n project:\n  type: website\n\nwebsite:\n  title: \"website\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\nLe type du projet (website)\n\n project:\n  type: website\n\n project:\n  type: website\n  output-dir: public\n\nConfiguration du website: option website.\n\nwebsite:\n  title: \"website\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nLe titre du site title: \"website\" intègre un lien quipermet de revenir à la page d’accueil du site, ici le fichier index.qmd.\nLes éléments entrant dans la barre horizontale de navigation (liens) sont listés par l’option navbar.\nPosition des éléments du menu: left ou right\n\nOn peut utiliser les deux. Il est d’usage de positionner le contenu du site à gauche, mais on peut ajouter des éléments à droite, comme des liens (dépôt du site sur une plateforme git, présentation de l’auteur….). Les fichiers (ou les liens externes) seront listés en dessous de left et right. Ici:\n\n\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\n\nOn indique le nom du fichier: href: index.qmd\n\nOn peut également utiliser pour les fichiers internes url: ou file:.\n\nOn peut renseigner le nom qui apparaîtra dans le menu: text: Home ou text: \"Home\" (préferer la deuxième solution en raison des espaces).\nOn peut mettre le nom avant le lien:\n\n    left:\n      - text: \"Home\"\n        href: index.qmd\n      - about.qmd\n\n---\ntitle: \"About\"\n---\n\n\nLes autres options: dans le fichier **_quarto.yaml, on trouve les options liées à format: le thème et la présence d’une table des matières qui s’appliquera à l’ensemble des fichiers .qmd (elle pourra être retiré au cas par cas dans dans le yaml d’un fichier avec toc: false**).\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Website</span>"
    ]
  },
  {
    "objectID": "052-site.html#premières-modifications",
    "href": "052-site.html#premières-modifications",
    "title": "17  Website",
    "section": "17.2 Premières modifications",
    "text": "17.2 Premières modifications\n\nPositionner le fichier about à droite et ajouter un lien vers le site officiel de Quarto (yaml):\n\n\n\nquarto.yml à droite de la navbar\n\n    right:\n      - text: \"About\"\n        href: about.qmd\n      - text: \"Site officiel Quarto\"\n        href: \"https://quarto.org/docs/websites/\"\n\n\nModifier l’index:\n\nComme la page d’accueil est déjà directement accessible via le titre du site, on ne va pas faire apparaître de nouveau ce lien dans la barre de navigation.\nOn change le corps du texte de l’index dont ajout des **_quarto.yml** d’origine et modifiés).\n\n\n\n\nquarto.yml\n\n    left:\n      - text: \" \"\n        href: index.qmd\n\n\n\nyaml de index.qmd\n\n---\n# On peut supprimer directement la balise du yaml si aucune autre option spécifique\ntitle: \"\"\n\n# On peut vouloir supprimer la toc pour une page d'accueil\ntoc: false\n---\n\n\n\n\n\n\n\nAjout des fichiers du support de ce chapitre du support:\n\nIntroduction (sauf la fin sur l’icone gitlab).\nWebsite.\nBook.\nBlog.\n\n\n\n\nquarto.yml, à gauche de la navbar\n\n    left:\n      - text: \" \"\n        href: index.qmd\n      - text: \"Introduction\"\n        href: introduction.qmd\n      - text: \"Site\"\n        href: site.qmd\n      - text: \"Book\"\n        href: book.qmd\n      - text: \"Blog\"\n        href: blog.qmd \n\n\n\n\n\n\n\n\n\n\n\nLa page d’accueil\n\n\n\n\n \n\n\n\n\n\nLa page site\n\n\n\n\n\n\nQuelques options supplémentaires:\n\nActivation de l’option lightbox: freeze: true\nLe français pour les titres: lang: fr\nOption freeze (Section 16.4.2).\nChangement du répertoire de destination: output_dir: public.\nTrès optionnel, un petit élément de style dans le fichier style.css pour le contour des images.\n\n\n\n\nquarto.yml\n\nproject:\n  type: website\n  output-dir: public\n\nformat:\n  html:\n    theme: zephyr\n    css: styles.css\n    toc: true\n\nexecute: \n  freeze: auto\nlightbox: true\nlang: fr\n\n\n\n\n\n\n\n\n\n\nSite modifié\n\n\n\n\n \n\n\n\n\n\nDu site d’origine au site modifié\n\n\n\n\n\n\n\n\n\n\n\nLe fichier _quarto.yml modifié:\n\n\n\n\n\n\n\nquarto.yml\n\n\nproject:\n  type: website\n  output-dir: public\n\nwebsite:\n  title: \"website Quarto\"\n  navbar:\n    left:\n      - text: \" \"\n        href: index.qmd\n      - text: \"Introduction\"\n        href: introduction.qmd\n      - text: \"Site\"\n        href: site.qmd\n      - text: \"Book\"\n        href: book.qmd\n      - text: \"Blog\"\n        href: blog.qmd \n    right:\n      - text: \"About\"\n        href: about.qmd\n      - text: \"Site officiel Quarto\"\n        href: \"https://quarto.org/docs/websites/\"\n\nformat:\n  html:\n    theme: zephyr\n    css: styles.css\n    toc: true\n\nexecute: \n  freeze: auto\nlightbox: true\nlang: fr",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Website</span>"
    ]
  },
  {
    "objectID": "052-site.html#ajout-dun-menu-sous-forme-de-liste-dans-la-barre-de-navigation",
    "href": "052-site.html#ajout-dun-menu-sous-forme-de-liste-dans-la-barre-de-navigation",
    "title": "17  Website",
    "section": "17.3 Ajout d’un menu sous forme de liste dans la barre de navigation",
    "text": "17.3 Ajout d’un menu sous forme de liste dans la barre de navigation\nComme dans Rmarkdown on peut ajouter un menu sous forme de liste verticale.\nDans la liste des liens de la barre de navigation avec l’option menu:\n      - text: \"nom menu\"\n        menu: \n          - text: \"nom page1\"\n            href: page1.qmd   \n          - text: \"nom page2\"\n            href: page2.qmd  \n          - text: \"nom page2\"\n            href: page2.qmd  \nPour cette exemple, on va conserver un accès direct à la page “Introduction” et lister les 3 types de projet dans une fenêtre.\n      - text: \"Introduction\"\n        href: introduction.qmd\n      - text: \"Website - Book - Blog\"\n        menu: \n          - text: \"Website\"\n            href: site.qmd   \n          - text: \"Book\"\n            href: book.qmd  \n          - text: \"Blog\"\n            href: blog.qmd  \n\n\n\n\n\n\n\n\n\nAvant l’ouverture du menu\n\n\n\n\n \n\n\n\n\n\nMenu ouvert",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Website</span>"
    ]
  },
  {
    "objectID": "052-site.html#ajout-dune-sidebar-avec-un-menu",
    "href": "052-site.html#ajout-dune-sidebar-avec-un-menu",
    "title": "17  Website",
    "section": "17.4 Ajout d’une sidebar avec un menu",
    "text": "17.4 Ajout d’une sidebar avec un menu\n\nOn peut ajout un menu vertical dans la partie gauche du grid. Les éléments introduits dans cette partie du site sont introduits par l’option sidebar. Par rapport à la barre horizontale, elle n’est pas contraignante dans la profondeur des sous menus ou section.\nLes fichiers .qmd sont lisrtés sous l’option contents.\n\nwebsite:\n  navbar\n    &lt;éléments de la navbar&gt;\n  sidebar:\n    contents: \n    - text: \"Nom page1\"\n      href: page1.qmd\n    - text: \"Nom page2\"\n      href: page2.qmd    \n    - text: \"Nom page3\"\n      href: page3.qmd  \nPour regrouper des pages dans un sous menu on liste les fichiers après avoir renseigné l’option section.\nwebsite:\n  navbar\n    &lt;éléments de la navbar&gt;\n  sidebar:\n    contents: \n    - text: \"Nom page1\"\n      href: page1.qmd\n    - section: \"Nom section\"\n      contents:\n      - text: \"Nom page2\"\n        href: page2.qmd    \n     - text: \"Nom page3\"\n       href: page3.qmd  \nPour faciliter la lecture du menu on peut ajouter entre les sections une ligne horizontale: - text: \"---\"\nwebsite:\n\n  sidebar:\n    contents: \n    - text: \"Introduction\"\n      href: Introduction.qmd\n    - text: \"---\"\n    - section: \"Website - Book - Blog\"\n      contents:\n      - text: \"Website\"\n        href: site.qmd    \n     - text: \"Book\"\n       href: book.qmd  \n     - text: \"Blog\"\n       href: blog.qmd  \n\n\n\n\n\n\n\n\n\nAvant l’ouverture du menu\n\n\n\n\n\n\n\nMenu ouvert\n\n\n\n\n\n\n\n\n\n\n\nLe fichier _quarto.yml final:\n\n\n\n\n\nproject:\n  type: website\n  output-dir: public\n\nwebsite:\n  title: \"website Quarto\"\n  navbar:\n    left:\n      - text: \" \"\n        href: index.qmd\n      - text: \"Introduction\"\n        href: introduction.qmd\n      - text: \"Website - Book - Blog\"\n        menu: \n          - text: \"Website\"\n            href: site.qmd   \n          - text: \"Book\"\n            href: book.qmd  \n          - text: \"Blog\"\n            href: blog.qmd  \n    right:\n      - text: \"About\"\n        href: about.qmd\n      - text: \"Site officiel Quarto\"\n        href: \"https://quarto.org/docs/websites/\"\n\n  sidebar:\n    contents: \n    - text: \"Introduction\"\n      href: introduction.qmd\n    - text: \"---\"\n    - section: \"Website - Book - Blog\"\n      contents:\n      - text: \"Website\"\n        href: site.qmd    \n      - text: \"Book\"\n        href: book.qmd  \n      - text: \"Blog\"\n        href: blog.qmd \n\nformat:\n  html:\n    theme: zephyr\n    css: styles.css\n    toc: true\n\nexecute: \n  freeze: auto\nlightbox: true\nlang: fr",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Website</span>"
    ]
  },
  {
    "objectID": "053-book.html",
    "href": "053-book.html",
    "title": "18  Book",
    "section": "",
    "text": "18.1 Le squelette de book généré automatiquement\nOn va partir du book généré par Quarto en créant un project (Files=&gt;New project =&gt; New directory =&gt; Quarto book).",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Book</span>"
    ]
  },
  {
    "objectID": "053-book.html#le-squelette-de-book-généré-automatiquement",
    "href": "053-book.html#le-squelette-de-book-généré-automatiquement",
    "title": "18  Book",
    "section": "",
    "text": "Un fichier _quarto.yml\nDes fichiers quarto: index.qmd, intro.qmd, summary.qmd, referecen.qmd\nUn fichier bibliography.bib pour ajouter une bibliographie sous forme de chapitre.\nUne image de couverture pour les formats html et epub",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Book</span>"
    ]
  },
  {
    "objectID": "053-book.html#le-_quarto.yml",
    "href": "053-book.html#le-_quarto.yml",
    "title": "18  Book",
    "section": "18.2 Le _quarto.yml",
    "text": "18.2 Le _quarto.yml\nA la première compilation, le nom du book est celui donné au projet. Le rendu est le suivant:\n\n\n\n\n\naccueil du book\n\n\n\n\nLe fichier _quarto.yml par défaut:\nproject:\n  type: book\n\nbook:\n  title: \"Book\"\n  author: \"Norah Jones\"\n  date: \"19/02/2024\"\n\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n\nL’accès aux différents chapitres se fait dans la partie gauche du grid (sidebar)\nLes fichiers .qmd sont introduits par l’option chapters1.\n\nIl n’y a pas de titre au différents chapitres renseigné dans .\nLes titres des chapitres sont donnés en tête des fichiers.qmd avec un titre: # Titre.\n\n\nPar exemple pour le fichier index.qmd:\n# Preface {.unnumbered}\n\nThis is a Quarto book.\n\nTo learn more about Quarto books visit &lt;https://quarto.org/docs/books&gt;.\n\nLa page index.qmd (ici preface) donne les informations qui seront reporté en couverture du format pdf: auteur.e.s, affiliation, date…\nLe format pdf est ajouté par défaut au quarto.yml, ainsi que le fichier comprenant les références bibliographiques. On peut également ajouter les format docx (ok libre office) ou epub.",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Book</span>"
    ]
  },
  {
    "objectID": "053-book.html#télécharger-le-book-en-plusieurs-format",
    "href": "053-book.html#télécharger-le-book-en-plusieurs-format",
    "title": "18  Book",
    "section": "18.3 Télécharger le book en plusieurs format",
    "text": "18.3 Télécharger le book en plusieurs format\n\n\n\n\n\n\nImportant\n\n\n\nSe reporter au contenu conditionnel pour gérer les rendus des outputs de type dynamique (html) et statiques comme le pdf le docx (Chapitre 12).\n\n\nDans le fichier quarto.yml\n\nOn ajoute deux formats alternatifs: pdf, docx\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n  epub: default\n  docx: default\n\nEn option de book, on ajoute la sous option download: [format1, format2, format3]\n\nUn icône apparait au dessus du chapitrage, en cliquant dessus on accède aux différents formats.\n\n\nbook:\n  title: \"Book\"\n  author: \"Norah Jones\"\n  date: \"19/02/2024\"\n  downloads: [pdf,epub, docx]\n\n\n\n\n\n\n\nLe _quarto.yml modifié: téléchargement en plusieurs format\n\n\n\n\n\nproject:\n  type: book\n\nbook:\n  title: \"Book\"\n  author: \"Norah Jones\"\n  date: \"19/02/2024\"\n  downloads: [pdf, docx]\n  \n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n  docx: default\n\n\n\n\n\n\n\n\n\n\n\n\nIcône de téléchargement\n\n\n\n\n \n\n\n\n\n\nMenu des formats\n\n\n\n\n\nEn format PDF:\n\n\nUnable to display PDF file. Download instead.",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Book</span>"
    ]
  },
  {
    "objectID": "053-book.html#ajout-de-parties-au-chapitrage",
    "href": "053-book.html#ajout-de-parties-au-chapitrage",
    "title": "18  Book",
    "section": "18.4 Ajout de parties au chapitrage",
    "text": "18.4 Ajout de parties au chapitrage\nSur le même principe que section pour une projet de type website, on peut scinder le chapitrage en plusieurs partie avec part. Dans le _quarto.yml.\nPar exemple, avec une preface indépendante et des chapitres regroupées dans deux partie:\nbook\n  chapters:\n    - index.qmd  \n    - part: \"Partie I\"\n      chapters:\n        - 11-fichier1.qmd\n        - 12-fichier2.qmd   \n    - part: \"Partie II\"\n      chapters:\n        - 21-fichier3.qmd\n        - 22-fichier4.qmd   \nAvec le book généré automatiquement, on pourrait structurer le document de cette manière:\nbook\n  chapters:\n    - index.qmd  \n    - part: \"Partie I\"\n      chapters:\n        - intro.qmd\n        - summary.qmd        \n    - part: \"Bibliographie\"    \n      chapters: \n        - references.qmd\n \n\n\n\n\n\n\nLe _quarto.yml modifié: ajout de parties\n\n\n\n\n\nproject:\n  type: book\n\nbook:\n  title: \"Book\"\n  author: \"Norah Jones\"\n  date: \"19/02/2024\"\n  downloads: [pdf, docx]\n  \n  chapters:\n    - index.qmd  \n    - part: \"Partie I\"\n      chapters:\n        - intro.qmd\n        - summary.qmd        \n    - part: \"Bibliographie\"    \n      chapters: \n        - references.qmd\n\n\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n  docx: default\n\n\n\n\nEn format PDF:\n\n\nUnable to display PDF file. Download instead.",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Book</span>"
    ]
  },
  {
    "objectID": "053-book.html#footnotes",
    "href": "053-book.html#footnotes",
    "title": "18  Book",
    "section": "",
    "text": "Remplacecontents pour la sidebar d’un website↩︎",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Book</span>"
    ]
  },
  {
    "objectID": "054-blog.html",
    "href": "054-blog.html",
    "title": "19  Blog",
    "section": "",
    "text": "19.1 Le squelette de blog généré automatiquement\nOn va partir du book généré par Quarto en créant un project (FilesNew project  New directory  Quarto blog).\nFichiers et répertoires pour générer le blog.\nRendu du blog d’exemple [avec thème flatly]",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Blog</span>"
    ]
  },
  {
    "objectID": "054-blog.html#le-squelette-de-blog-généré-automatiquement",
    "href": "054-blog.html#le-squelette-de-blog-généré-automatiquement",
    "title": "19  Blog",
    "section": "",
    "text": "Ce blog a été pensé comme une fonctionalité supplémentaire pour un site web de type page perso. En conséquence le fichier _quarto.yml ne comporte qu’une barre de navigation renvoyant vers des outils de type twitter, compte github et une page about sur l’auteur.\nLe blog sera directement créé dans le yaml du fichier index.qmd.\nLes diférents articles ou posts sont enregistrés dans des sous répertoires.\n\n\n\nLe fichier _quarto.yml de type website.\nLe fichier index.qmd qui paramètre le blog.\nLe répertoire qui stockera les différents articles, eux mêmes stockés dans un répertoire spécifique. Ici il est nommé post. IL comprend:\n\nUn fichier de configuration yaml _metadata.yml dont les options ne s’appliqueront qu’aux articles du blog. Ici:\nfreeze: true. On part du principe que les articles sont compilés ou recompilés un à un et no dans une compilation globale avec quarto render dans le terminal.\ntitle-block-banner: true .Activation d’une couleur de fond au titre des articles. Couleur liée au thème. Je la desactive si une navbar est déja présente.\nLes répertoires où sont stockés les différents articles et leur fichiers associés: images, bases… Dans chaque répertoire, tous les fichiers sont nommés index.qmd.\n\n\n\n\n\n\n\n\nNom des fichiers des aricles\n\n\n\nLe blog d’exemple nomme tous les fichiers index.qmd. Ce n’est pas obligatoire, et peut-être pas recommandé si on travaille sur plusieurs articles en même temps. On peut donc les nommer comme on veut. Je conseille de leur donner le même nom que leur.\n\n\n\n\n\n\n\n\n\n\n\n\n\nPage d’accueil\n\n\n\n\n \n\n\n\n\n\nArticle Post With Code\n\n\n\n\n\n\n19.1.1 Création du blog et options dans le fichier index.qmd\n\nC’est dans le yaml d’un fichier index.qmd que le blog est généré et paramétré.\nLe blog est généré avec l’option listing.\nUne fois le listing paramétré, une liste d’article sera automatiquement ajouté à la page index.html.\nDans le yaml du fichier index.qmd, le blog est généré avec les options suivantes:\n\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: false\n  filter-ui: false\n\ncontents: nom_repertoire: répertoire où sont stockés les sous repertoires des articles. Ici le nom du répertoire est posts. C’est la seule sous option de listing obligatoire.\nsort:: ordre d’apparition des articles. Ici assez logiquement par la date la plus récente à la plus ancienne (\"date desc\").\ntype: default/grid/table: apparence de la liste des articles contenus dans le blog.\n\n\n\n\n\n\n\n\n\n\ntype: default\n\n\n\n\n \n\n\n\n\n\ntype: grid\n\n\n\n\n \n\n\n\n\n\ntype: grid\n\n\n\n\n\n\ncategories: true/false: dans le yaml des fichiers .qmd (voir plus bas) on peut indiquer la ou les thématiques de l’article. Si on active cette option, ce qui est souhaitable, toutes les catégories apparaissant dans les articles sont reportées.\n\nCette liste de catégorie permettra de sélectionner les articles relatifs à une catégorie. Pour les types default et grid les catégories de chaque articles sont également reportées sur la vignette . En cliquant sur une catégorie, on peut sélectionner tous les articles cette même catégorie.\nSi dans une même page index on a plusieurs sous blog [Section 19.3], les catégories des sous blogs seront reportés dans une même liste de catégorie.\n\nsort-ui: true/false: par défaut false. Ajoute un menu de tri de la liste des articles qui complète l’option sort.\nfilter-ui: true/false: par défaut false. Permet de filtrer la liste par rapport aux champs qui résument les articles.\n\n\n\n\n\n\nActivation sort-ui et filter-ui\n\n\n\n\n\n\n\n19.1.2 Autres options\nChanger les champs résumant les articles:\n\nOn peut modifier les champs résumant les article avec l’option field: [champ1, champ2,...].\nSi veut ajouter un champ, par exemple une image pour type: table, il faudra bien lister l’ensemble des champs qui seront utilisés: auteur.e.s, date, description…\nLa liste des champs disponibles et leur présence par défaut: Site Quarto\n\nPar exemple si on veut ajouter une image sous forme de vignette au type table dans le blog d’exemple:\nlisting:\ntype: table\nfields: [image, date, title, author]\n\n\n\n\n\nAjout vignette pour le type table\n\n\n\n\n\n\n\n\n\n\nAvertissement\n\n\n\nPour que les images soient insérées de manière homogène, le nom ou le lien de l’image doit être renseigné dans le yaml de tous les articles.\n\n\nNombre d’articles listés\nOn peut contrôler le nombre d’articles listés avec l’option page-size: nombre. Si on dépasse la limite, on pourra naviguer avec une sous liste précédente/suivante.",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Blog</span>"
    ]
  },
  {
    "objectID": "054-blog.html#options-dans-le-yaml-des-documents",
    "href": "054-blog.html#options-dans-le-yaml-des-documents",
    "title": "19  Blog",
    "section": "19.2 Options dans le yaml des documents",
    "text": "19.2 Options dans le yaml des documents\n\nLes options du yaml des articles doivent être cohérentes avec les champs reportés dans la liste des articles.\nPour certains champs, si l’information n’est pas renseignée dans le yaml, Quarto ira puiser dans le corps de l’article: c’est le cas de la description ou de l’image.\nA noter que l’on peut ajouter des catégories ou des descriptions (abstract, description) à n’importe quel document de type .qmd.\n\n\n\n\n\n\n\nLes dates\n\n\n\nAttention à la date. Si on choisit date: today une simple correction de coquille fera remonter un article, même ancien, en tête de la liste des articles. Il est donc préférable de mettre la date de publication explicitement.\n\nPar exemple au format mois/jour/année: date: 03/21/2024\n\n\n\n\n19.2.1 Définir des catégories.\n\nOption categories.\n\n---\ntitle: \"XXXXX\"\nauthor: \"YYYY\"\ndate: mm/dd/yyyy\n\ncategories:\n  - categorie1\n  - categorie2\n  - categorie3\n---\n\n\n19.2.2 Les images pour les vignettes\nPour les listes de type default ou grid, une image est ajoutée à la liste des articles1\n\nPour qu’une vignette soit ajoutée à la description de l’article apparaissant dans la liste:\n\nyaml: option **image: path/nom_image\nSi on ne choist pas d’image dans le yaml et qu’une image/graphique se trouve dans le corps du document, c’est la première apparaissant dans l’article qui sera insérée comme vignette dans la liste.\n\n\n---\ntitle: \"XXXXX\"\nauthor: \"YYYY\"\ndate: mm/dd/yyyy\n\ncategories:\n  - categorie1\n  - categorie2\n  - categorie3\n\nimage: path/nom_image\n---\n\n\n19.2.3 Description\n\nSur le même principe on peut écrire un résumé ou une description de l’article dans le yaml avec les options abstract ou description, ou laisser Quarto mettre le début du texte de l’article dans la liste.\n\n---\ntitle: \"XXXXX\"\nauthor: \"YYYY\"\ndate: mm/dd/yyyy\n\ncategories:\n  - categorie1\n  - categorie2\n  - categorie3\n\nimage: path/nom_image\n\nabstract: |\n Ici le résumé de qui apparaîtra dans l'article\n\n---\n\nLa longueur de la description reportée dans la liste est limitée par défaut à 175 caractères. On peut modifier ce nombre avec l’option max-description-length: nombre.\nSi on utilise l’option abstract ou description, l’intégralité du texte sera reporté dans le document.\n\n\n\n19.2.4 Modification du blog d’exemple.\n\nOn va ajouter 4 articles correspondant au début de cette partie du support: Introduction/généralité, Website, Book, blog. La liste des articles sera de type grid\n\nLe yaml du fichier index.qmd:\n---\ntitle: \"Création d'un Blog avec Quarto\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: grid\n  categories: true\n  sort-ui: true\n---\nLe yaml des 4 articles:\n\nIntroduction/généralitésSiteBookBlog\n\n\n---\nTitle: \"Introduction aux site, book et blog avec Quarto\"\nauthor: \"Marc Thévenin\"\nlang: fr\ndate: \"03/21/2024\"\ncategories:\n  - Quarto\n  - Site\n  - Book\n  - Blog\n\nimage: \"https://quarto.org/quarto-dark-bg.jpeg\"\n\nabstract: | \n  Ceci est un extrait du chapitre d'introduction aux sites, book et blog avec Quarto\n---\n\n\n---\nTitle: \"Création d'un site avec Quarto\"\nauthor: \"Marc Thévenin\"\nlang: fr\ndate: \"03/21/2024\"\ncategories:\n  - Quarto\n  - Site\n\nimage: \"https://blog.hubspot.com/hs-fs/hubfs/free-website-builder.png?width=595&height=400&name=free-website-builder.png\"\n\nabstract: | \n  Ceci est un extrait du chapitre sur la construction d'un site avec Quarto\n---\n\n\n---\nTitle: \"Création d'un book avec Quarto\"\nauthor: \"Marc Thévenin\"\nlang: fr\ndate: \"03/21/2024\"\ncategories:\n  - Quarto\n  - Book\n\nimage: \"https://cdn.marvel.com/u/prod/marvel/i/mg/2/a0/64b04e13a3246/background.jpg\"\n\nabstract: | \n  Ceci est un extrait du chapitre sur la construction d'un book avec Quarto\n\ntitle-block-banner: false\n---\n\n\n---\nTitle: \"Création d'un blog avec Quarto\"\nauthor: \"Marc Thévenin\"\nlang: fr\ndate: \"03/21/2024\"\ncategories:\n  - Quarto\n  - Blog\n\nimage: \"https://mailrelay.com/wp-content/uploads/2018/03/que-es-un-blog-1.png\"\n\nabstract: | \n  Ceci est un extrait du chapitre sur la construction d'un blog avec Quarto\n\n---\n\n\n\nAprès compilation:\n\n\n\n\n\n\nOn va limiter le nombre d’articles affichés dans la liste à 3 avec l’option page-size\nLe yaml modifié du fichier index.qmd:\n---\ntitle: \"Création d'un Blog avec Quarto\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: grid\n  categories: true\n  sort-ui: true\n  page-size: 3\n\n---\n\n\n\n\n\n\n\n\n\nPage 1 de la liste\n\n\n\n\n \n\n\n\n\n\nPage 2 de la liste",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Blog</span>"
    ]
  },
  {
    "objectID": "054-blog.html#sec-blog",
    "href": "054-blog.html#sec-blog",
    "title": "19  Blog",
    "section": "19.3 Plusieurs blog dans un même site",
    "text": "19.3 Plusieurs blog dans un même site\n\nPar défaut le blog est inséré automatiquement dès lors que l’option listing est utilisée dans le yaml du fichier index.yml.\nOn peut ajouter du contenu à la page avant la liste des articles mais pas après. Par exemple:\n\n---\ntitle: \"Création d'un Blog avec Quarto\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: grid\n  categories: true\n  sort-ui: true\n  page-size: 3\n---\n\n* Ceci est un blog généré par Quarto\n* Documentation officielle sur les blogs: \n  * &lt;https://quarto.org/docs/websites/website-blog.html&gt;\n  * &lt;https://quarto.org/docs/websites/website-listings.html&gt;\n\n\n\n\n\nAjout de texte avant la liste des articles\n\n\n\n\n\nA l’aide d’un identifiant et d’une balise div on peut insérer la liste des articles à un endroit donné du document et ajouter du contenu au fichier index.qmd où l’on veut.\n\nPour ajouter un nom de la liste des articles, en option de listing on ajoute un id:\n\nid: nom_listing si une seule liste\n- id: nom_listing si plusieurs listes ou sous blogs.\n\n\nPar exemple ici:\n---\ntitle: \"Création d'un Blog avec Quarto\"\nlisting:\n  - id: liste1\n    contents: posts\n    sort: \"date desc\"\n    type: grid\n    categories: true\n    sort-ui: true\n    page-size: 3\n---\nOn peut maintenant ajouter dans une balise div le nom de la liste:\n---\ntitle: \"Création d'un Blog avec Quarto\"\nlisting:\n  - id: liste1\n    contents: posts\n    sort: \"date desc\"\n    type: grid\n    categories: true\n    sort-ui: true\n    page-size: 3\n---\n\n::: {#liste1}\n:::\nSi on ajoute du texte avant et après la balise:\n---\ntitle: \"Création d'un Blog avec Quarto\"\nlisting:\n  - id: liste1\n    contents: posts\n    sort: \"date desc\"\n    type: grid\n    categories: true\n    sort-ui: true\n    page-size: 3\n---\n\n* Ceci est un blog généré par Quarto\n\n::: {#liste1}\n:::\n\n* Documentation officielle sur les blogs: \n  * &lt;https://quarto.org/docs/websites/website-blog.html&gt;\n  * &lt;https://quarto.org/docs/websites/website-listings.html&gt;\n\n\n\n\n\nAjout de texte avant et après la liste des articles\n\n\n\n\n\nEn suivant ce principe, on peut générer plusieurs sous blog en définissant plusieurs noms de listes.\nIci on va générer deux sous blogs:\n\nUn avec le projet de blog générés automatiquement avec Quarto (deux articles) qui restent dans le répertoire **post*.\nUn avec les quatres articles ajoutés précédemment. Les articles seront dans un autre répertoire, posts2\n\n\n\n\n\n\n\n\n\n\nRépertoires et fichiers du projet\n\n\n\n\n \n\n\n\n\n\nsous blog post\n\n\n\n\n \n\n\n\n\n\nSous blog post2\n\n\n\n\n\n\n\nDans le yaml du fichier index.qmd, on va ajouter une nouvelle liste d’articles avec son nom (id: liste2) et ses options (identiques pour les deux sous blogs).\nPour le second sous blog on modifie le répertoire de destination: contents: post2\n\n---\ntitle: \"Création d'un Blog avec Quarto\"\nlisting:\n  - id: liste1\n    contents: posts\n    sort: \"date desc\"\n    type: grid\n    categories: true\n    sort-ui: true\n    page-size: 3\n  - id: liste2\n    contents: posts2\n    sort: \"date desc\"\n    type: grid\n    categories: true\n    sort-ui: true\n    page-size: 3\n---\nDans le corps du fichier index.qmd, on insère les deux sous blogs dans des sections div\n# Sous blog I\n\n::: {#liste1}\n:::\n\n# Sous blog II\n\n::: {#liste2}\n:::\n\n* Documentation officielle sur les blogs:  \n  * &lt;https://quarto.org/docs/websites/website-blog.html&gt;\n  * &lt;https://quarto.org/docs/websites/website-listings.html&gt;\n\n\n\n\n\nPage d’accueil avec 2 sous blogs",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Blog</span>"
    ]
  },
  {
    "objectID": "054-blog.html#footnotes",
    "href": "054-blog.html#footnotes",
    "title": "19  Blog",
    "section": "",
    "text": "Dans le yaml du fichier index.qmd on peut désactiver cette option en sélectionnant les champs avec field: [champ1, champ2,...]↩︎",
    "crumbs": [
      "**Site, book, blog**",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Blog</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html",
    "href": "061-glossaire.html",
    "title": "20  Résumé",
    "section": "",
    "text": "20.1 Chapitre 2: De Rmarkdown à Quarto",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitre-2-de-rmarkdown-à-quarto",
    "href": "061-glossaire.html#chapitre-2-de-rmarkdown-à-quarto",
    "title": "20  Résumé",
    "section": "",
    "text": "Pour des documents simples, un changement du nom de l’extension peut suffire: .rmd en .qmd\nLe chunk r setup... peut être supprimé.\nDans le yaml du document (metadonnées) pensez à changer l’option pour le format: format: et non output:.\nCompilation des fichiers dans le terminal avec Quarto:\n\nquarto render: par défaut html, tous les fichiers du projets (si book, wensite)\nquarto render nom_fichier.qmd pour un fichier particulier.\nOn peut changer le format de l’output, par exemple pour un format pdf: quarto render &lt;file&gt; --to pdf\nDans l’interface, le bouton Render effectue en fait un quarto preview qui permet d’afficher l’output dans le viewer.",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitre-3-edition-dun-document",
    "href": "061-glossaire.html#chapitre-3-edition-dun-document",
    "title": "20  Résumé",
    "section": "20.2 Chapitre 3: Edition d’un document",
    "text": "20.2 Chapitre 3: Edition d’un document\n\n20.2.1 Balises markdown\nCommentaires\n&lt;!-- Commentaire --&gt;\n\n&lt;!-- \nCommentaire \n--&gt;\nFormatage texte\n\n*: texte en italique =&gt; *texte* texte\n**: texte en gras =&gt; **texte** texte\n**: texte en gras et italique =&gt; ***texte*** texte\n~~: texte barré =&gt; ~~texte~~ texte\n\nSaut de ligne\n\nA la fin de la phrase: \\\nDeux espaces à la fin de la phrase\nAjout d’une ligne vide pour augmenter l’espace entre deux lignes\n\nTitre/header\n\n#: de 1 à 6 =&gt; #, ##,…, ######\n\nListes\n\nAvec quarto ou Rmarkdown, insérer obligatoirement une ligne vide avec la phrase précédent la liste.\nListe non ordonnée: un symbole *, +, - en début de ligne pour une liste non ordonnée.\nListe ordonnée: une série numérique 1., 2.\nSous liste: au niveau du premier caractère de la phrase de liste de niveau supérieur.\n\nInsertion d’un lien\n\nChemin explicite sans titre: &lt;lien&gt;\nTitre: [Titre](lien)\n\nInsertion d’une image\n\nSans option: ![](lien insertion image)\nAvec option: ![](lien insertion image){options}\n\nInsertion d’un tableau markdown\n\nSystème de pipes. Edition pas évidente, donc:\nUtiliser mode visual de Quarto ou un éditeur en ligne\n\nInsertion d’une équation/formule\n\nDans une ligne de texte: $ équation/formule $\nDans une ligne pleine: $$ équation/formule $$\n\n\n\n20.2.2 Propre à Quarto\n\nDéfinition d’une partie du document dont le contenu sera stylisé (balise &lt;div&gt; en html1)\n\nOuverte et fermée au minimum par 3: : =&gt; :::\nClasse css associée\n\n\n::: {.classe css ou insertion d'un style css}\n\nTexte/image....\n\n:::\n\nFormatage texte: [texte]{ classe css ou insertion d'un style css}\nShortcode d’insertion: {{&lt; élément_inséré &gt;}}",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitre-4-introduction-au-yaml",
    "href": "061-glossaire.html#chapitre-4-introduction-au-yaml",
    "title": "20  Résumé",
    "section": "20.3 Chapitre 4: Introduction au yaml",
    "text": "20.3 Chapitre 4: Introduction au yaml\n\nDans un fichier .yml\n\nDans un fichier .qmd: début du document .qmd ouvert et fermé par ---\n\nRègle d’intendation (retrait) des options stricte:\n\nSous option au moins sur le 2ème caractère de l’option parente.\nPour facilité la lecture, il est d’usage de se positionner sur le 3ème caractère.\n\nPrésence d’un argument obligatoire après l’option.\nUne même option ne peut être renseignée deux fois.\nUne option inconnue n’engendre pas de message d’erreur si elle restecte les règles de syntaxe.\n\n---\noption1: true/false\n\noption2: \n  sous-option2: \n\noption3:\n  - élément1 d'une liste\n  - élement2 d'une liste\n\noption4: \"Texte\"\n---",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitres-5-blocs-de-codes",
    "href": "061-glossaire.html#chapitres-5-blocs-de-codes",
    "title": "20  Résumé",
    "section": "20.4 Chapitres 5: blocs de codes",
    "text": "20.4 Chapitres 5: blocs de codes\n\n20.4.1 Déclaration d’un bloc et options\n\nOuvert et fermé par ```\nAjout d’un moteur entre des accolades: r, python,…: ```{r}\nAjout d’un point au moteur si on ne souhaite pas qu’il soit exécuté: ```{.r}\n\n```{r}\nprogramme R\n```\nAjout d’options dans le bloc\n\nHérité des premières version de rmarkdown: ```{r, options}\nPrivilégier dans le bloc de codes la syntaxe: #| option: true/false/...\n\n```{r}\n#| option1: true/false\n#| option2: \"texte\"\n\nprogramme R\n```\nOptions dans le yaml\n\nOptions partagées par défaut par tous les blocs:\n\n---\noption-bloc: true\n---\n\nOn peut revenir en arrière dans un ou plusieurs bloc individuellement:\n\n```{r}\n#| option-bloc: false\n\nprogramme R\n```\n\n\n20.4.2 Quelques options d’exécution:\n\nExécution du programme: eval: true/false.\n\nPar défaut true.\n\nReport du programme: echo: true/false/fenced.\n\nPar défaut true à l’ exception du format revealjs.\n\nAffichage message et warning: message/warning: true/false.\n\nPar défaut true.\n\nEnregistrer et réutiliser les résultats d’un programme (graphique,tableau formaté) pour accélérer la compilation:\n\ncache: true/false.\n\nReport d’un résultat dans le corps du document (inline code)\n\n{moteur} fragment_programme\n\n\nDans le yaml, sous options de execute:\n---\nexecute:\n  eval: true/false\n  echo: true/false\n  message: true/false  \n  warning: true/false\nDans un bloc de codes:\n```{r}\n#|  eval: true/false\n#|  echo: true/false\n#|  message: true/false  \n#|  warning: true/false\n```\n\nReport d’un résultat dans le corps du document (inline code)\n\n{moteur} fragment_programme\n\n\n\n\n20.4.3 Quelques options pour les graphiques et tableaux\nGraphiques\n\nDans le yaml et/ou dans le bloc de code\npréfixées par fig-: fig-nom_option\n\nDans le bloc: #| fig-cap: \"Title\"\nDans le yaml2: #| fig-cap-location: top [par défaut bottom]\n\n\nTableaux\n\nDans le yaml et/ou dans le bloc de code\nPréfixés par tbl-: tbl-nom_option\n\nExemple dans le bloc: #| tbl-cap: \"Title\"\nExemple dans le yaml3: #| tbl-cap-location: bottom [par défaut top]\n\n\n\n\n20.4.4 Options propres à Quarto\n\nAfficher/cacher à la volée le programme: code-fold: false/true/show. Par défaut false.\n\nAttention: option principale du yaml et non sous option du format html.\n\nAfficher le code source de la page .qmd:\n\nOption code-tools: true/false.\nSous option de code-tools avec source: true/false.\n\nSi associé à code-fold un menu est disponible.\nSyntaxes du yaml possibles avec code-fold et code-tools:\n\n---\nformat:\n  html:\n    code-tools: true/false\n\ncode-fold: true/false/show\n---\n---\nformat:\n  html:\n    code-tools: \n      source: true/false\n\ncode-fold: true/false/show\n---\nSi aucun autre format compilé:\n---\ncode-tools: true/false\ncode-fold: true/false/show\n---\n---\ncode-tools: \n  source: true/false\ncode-fold: true/false/show\n---\n\nAccéder à la documentation web des fonctions: dans le yaml =&gt; code-link: true/false\nTitre d’un bloc:\n\nDirectement après avoir indiqué le moteur =&gt; ```{r filename=\"Titre du bloc\"}\nEn option dans le bloc =&gt; #| filename: \"Titre du bloc\"\n\nAnnotations/commentaires de ligne du programme:\n\nA la fin d’une ligne ajouter: # &lt;1&gt;, # &lt;2&gt;…\nSous le bloc du programme renseigner les commentaire:\n\n1. commentaire_1\n2. commentaire_2 …",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitre-9-introduction-aux-formats",
    "href": "061-glossaire.html#chapitre-9-introduction-aux-formats",
    "title": "20  Résumé",
    "section": "20.5 Chapitre 9: Introduction aux formats",
    "text": "20.5 Chapitre 9: Introduction aux formats\n\nLes formats compilés sont déclarés dans le yaml avec l’option format.\nPar défaut c’est le format document/notebook html est compilé. Sa déclaration est donc optionnelle.\n\nUn seul format\nSi déclarée:\n--- \nformat: html\n---\n--- \nformat: \n  html: default\n---\n--- \nformat: \n  html:\n    option_html1: `true/false/...`\n    option_html2: `true/false/...`    \n---\nSi non délarée (seulement format document/notebook html):\n--- \noption_html1: `true/false/...`\noption_html2: `true/false/...`    \n---\n\nSi autre que html, les format doivent être déclarés. Exemple pdf:\n\n--- \nformat: \n  pdf:\n    option_pdf1: `true/false/...`\n    option_pdf2: `true/false/...`  \n---\nPlusieurs formats: html et pdf\n--- \nformat: \n  html:\n    option_html1: `true/false/...`\n    option_html2: `true/false/...`    \n  pdf:\n    option_pdf1: `true/false/...`\n    option_pdf2: `true/false/...` \n---\n\nSi options identiques à tous les formats, elles peuvent être renseignées comme option principales dans le yaml. Exemple pour un titre et une table des matières:\n\n---\ntitre: \"XXXX\"\n\nformat: \n  html: \n    toc-depth: 3\n  pdf: default\n    toc-depth: 5\n\ntoc: true/false  \n---",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitre-10-format-html",
    "href": "061-glossaire.html#chapitre-10-format-html",
    "title": "20  Résumé",
    "section": "20.6 Chapitre 10: format html",
    "text": "20.6 Chapitre 10: format html\n\nDeux types: document/notebook ou présentation (revealjs).\nPartagent des options communes.\n\nExemples d’options communes document/notebook et présentation revealjs\n\nLightbox: agrandir et ouvrir les images/graphiques dans un fenêtre =&gt; dans le yaml lightbox: true.\n\nOn peut désactiver l’option pour un.e ou plusieurs image/graphique:\n\nImage (insertion markdown): option {.nolightbox}.\nGraphique généré dans un programme: option #| lightbox: false.\n\n\nOnglet:\n\nDans une section libre (:::), classe css {.tabset}\nContenu de chaque onglet dans une section (## titre). Utiliser un nombre de # cohérent avec le nombre de sections dans la page. Si la profondeur de la table des matières est de 3, le nombre de # sera de préférence ####:\n\n\n::: {.tabset}\n\n#### Titre onglet 1\nContenu onglet 1 \n\n#### Titre onglet 2\nContenu onglet 2 \n\n20.6.1 Document/notebook\n\nChanger les langues des titres (caractéristiques auteur.e, table des matières…) =&gt; dans le yaml lang: fr pour le français\nRésumé et description du document: dans le yaml options abstract: | et description |\n\nContenu sur la ligne suivante avec au moins un espace après le début de la ligne\n\n\n---\nabstract: |\n Description de mon document\n--- \n---\nabstract: |\n Description de mon document\n--- \n\nModification du grid d’une page: dans le yaml option grid composé de 3 éléments:\n\nA gauche la sidebar: sous option sidebar: valeur\nAu centre le body: body: valeur\nA droite la margin: margin: valeur\nAttention les valeurs renseignées (en px) ne sont pas des largeurs absolues, mais des largeurs maximales qui s’adapteront au contenu. Ce n’est pas très intuitif au premier abord.\n\nLargeurs par défaut:\n\n---\nformat:\n  html:\n    grid:\n      sidebar-width: 250px\n      body-width:    800px\n      margin-width:  250px\n--- \n\n\n20.6.2 Présentation revealjs\nLes blocs de codes:\n\n*Important**: les blocs de code ne sont pas affichés par défaut. Dans le yaml ou dans des blocs spécifiques indiquer explicitement qu’on souhaite les afficher (echo: true code-fold:true).\nLigne(s) en surbrillance: option #| code-lines-numbers: \"choix ligne(s)\"\n\nPar exemple:\n\n\"2\" ligne 2.\n\"2,5\" lignes 2 et 5.\n\"2-5\" lignes 2 à 5.\n\"|2|4\" toutes les lignes, puis ligne 2, puis ligne 4\n\n\nAnimation des blocs: dans le titre des slides option {auto-animate: \"true\"}\n\nOn répète dans plusieurs slides les lignes qui seront affichés.\nPenser à ce que dans chaque chaque slide le début du programme se trouve sur une ligne identique pour avoir un bon rendu.\n\n\nAffichage:\n\nLiens sous forme d’iframe (conseillé): activer dans le yaml l’option preview-links: true\nAffichage incrémental des éléments d’une liste:\n\nPour toute la présentation: dans le yaml incremental: true.\nPour une slide en particulier, dans une section div (:::): ::: {.incremental}.\nSi activé pour toutes les slides, on peut désactiver l’option pour une slide: ::: {.nonincremental}.\n\nAjouter un effet: {.fragment option}. Exemple {.fragment .fade-up}.\nRéduction de la taille d’affichage du texte: dans le titre d’une slide option {.smaller}.\nDépasser la limite verticale des slides: dans le yaml option scrollable: true.\n\nFacilité l’affichage dans une slide:\n\nRéduction de la taille d’affichage du texte: dans le titre d’une slide option {.smaller}.\nDépasser la limite verticale des slides: dans le yaml option scrollable: true.\nEdition en plusieurs colonnes avec des section div (:::) css ::: {.columns} et ::: {.columns width: \"x%\"}. Exemple avec une colonne vide pour générer un petit espace (5%) entre les textes des deux colonnes:\n\n::: {.columns}\n{.columns width: \"47.5%\"}\ntexte colonne 1\n:::\n::: {.columns}\n{.columns width: \"5%\"}\n:::\n::: {.columns}\n{.columns width: \"47.5%\"}\ntexte colonne 2\n:::\n\nPour l’affichage d’un graphique généré dans un programme qui est reporté: option #| output-location: option\n\noptions: column, fragment, column-fragment, slide",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitre-10-documents-pdf",
    "href": "061-glossaire.html#chapitre-10-documents-pdf",
    "title": "20  Résumé",
    "section": "20.7 Chapitre 10: documents pdf",
    "text": "20.7 Chapitre 10: documents pdf\n\nMême si le document est seulement compilé en pdf on doit indiquer explicitement le format pdf: format: pdf\n3 types de document: articles, rapport, livres. Dans le yaml on peut indiquer le type (par défaut article) avec l’option documentclass: scrartcl/scrreprt/scrbook.\nEn plus de la table des matières, on peut ajouter une table des graphiques/images et/ou une table des tableaux.\n\nDans le yaml, options lof: true/false et lot: true/false. Par défaut false.\nLes éléments sont insérés lorsqu’ils ont explicitement un titre:\n\nInsertion markdown: ![TITRE](img) pour une image, : TITRE sous un tableau.\nGénéré par un programme: #|fig-cap: \"TITRE\" pour un graphique, #|tbl-cap: \"TITRE\"\n\n\nSaut de pages: shortcode {{&lt; newpage &gt;}}\nModifier les marges du document: dans le yaml option geometry: avec sous forme de liste top, bottom, left, right.\n\n---\ngeometry: \n  - top=Amm\n  - left=Bmm\n  - right=Cmm\n  - bottom=Dmm  \n---\n\nChangement de la police: dans le yaml option fontfamily: nom_font\n\nContenu conditionnel\n\nOn peut réserver un contenu à un ou plusieurs formats spécifiques. Dans certaines situations, cela s’avère nécessaire : mise en page de plusieurs images sous forme de vignettes avec l’option lightbox donnera un rendu insatisfaisant en pdf ou docx.\nDes section\n\npermettent de réservé ou d’exclure un contenu à un ou plusieurs format:\n\n::: {.content-visible  when-format=\"type_format\"}\n::: {.content-visible  unless-format=\"type_format\"}\n::: {.content-hidden   when-format=\"type_format\"}\n::: {.content-hidden   unless-format=\"type_format\"}",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitre-13-theming-html",
    "href": "061-glossaire.html#chapitre-13-theming-html",
    "title": "20  Résumé",
    "section": "20.8 Chapitre 13: theming html",
    "text": "20.8 Chapitre 13: theming html\n\n20.8.1 Les thèmes bootstrap\n\n26 thèmes bootstrap embarqués dans Quarto: dans le yaml option theme: nom_theme\n\n---\nformat: \n  html:\n    theme: nom_theme\n--- \n\nPossibilité de switcher entre un thème light et dark.\nDans Quarto deux thèmes sont directement associés avec ces deux modes: flatly et darkly.\n\n---\nformat: \n  html:\n    theme:\n      light: flatly\n      dark:  darkly\n---\n\nA partir d’un thème light (ou dark) ou peut créér un thème dark (ou light) à l’aide d’un fichier .scss. Plus généralement n’importe quel thème peut être modifié à l’aide de ce fichier (voir plus loin)\n\n---\nformat: \n  html:\n    theme:\n      light: zephyr\n      dark:  [zephyr, zephy_dark.scss]\n---\n\nQuarto dispose de quelques options qui permettent de changer directement des éléments du thème sans passer par des fichiers .css ou .scss. Par exemple pour la couleur des liens avec l’option linkcolor (sous option de theme):\n\n---\nformat: \n  html:\n    theme: zephyr\n    linkcolor: \"#d63384\"\n---  \n\n\n20.8.2 Fichers CSS et SCSS\n\nFichiers additionnels qui doivent être déclarés dans le yaml.\n\nFichier .css seulement:\n---\nformat: \n  html: \n    css: styles.css\n---\nFichier .scss seulement avec le thème par défaut:\n---\nformat:\n  html:\n    theme: nom_fichier.scss\n---\nFichier .scss seulement avec un thème:\n---\nformat:\n  html:\n    theme: [superhero, styles.scss]\n---\nou\n---\nformat:\n  html:\n    theme: \n      - superhero\n      - styles.scss\n---\nOn peut utiliser simultanément un fichier .css et un fichier .scss:\n---\nformat:\n  html:\n    theme: \n      - superhero\n      - styles.scss\n    css: styles.css\n---\nCSS\n\nSuite de classes de styles qui seront appliquées à tout le document ou à des éléments du document:\nAutomatiquement: body (couleur de fond du document par exemple), style des liens ….\nAprès déclaration d’une balise dans le document par exemple avec ::: {.nom_classe}\n\nExemple mettre un contour à une image:\nDans le fichier .css:\n.contour  {\nborder: 2px solid red;\npadding: 5px;\nmargin: 5px;\n}\nDans le fichier .qmd\n::: {.contour}\n![](lien_image)\n:::\nSCSS\n\nVariables SASS: Affectation en amont d’attributs de styles comme des couleurs qui seront affectées plus facilement à des styles css\nQuarto met à disposition une série de variable Sass qui seront directement appliquées au document. Très pratique\nUn fichier scss doit comprendre au moins une section d’affectation des variables Sass:\n\nCette section est introduite par : /*-- scss:defaults --*/. Avec Quarto on doit absolument mettre cet élément au début du fichier.\nLes variables Sass sont déclaré avec un $: $nom_var: attribut_css;:\n\n\n/*-- scss:defaults --*/\n\n// variables sass couleur\n\n$couleur_bleu: #3498db;\n$couleur_rouge: #e74c3c\n\nLes variables Sass définies vont pouvoir être appliquée à la documentation via:\n\nDirectement à l’aide de variables Sass propres à Quarto, par exemple $link-color:\nIndirectement via des classes css renseignées dans le fichier .scss.\n\n\nVariables Sass Quarto:\n/*-- scss:defaults --*/\n\n// variables sass couleur\n\n$couleur_bleu: #3498db;\n$couleur_rouge: #e74c3c\n\n// Variables Sass Quarto\n\n$link-color: $couleur_bleu;\n$toc-color:  $couleur_rouge;\nClasses CSS dans un fichier .scss:\n\nOn doit déclarer avec Quarto une section css dans le fichier .scss avec /*-- scss: rules --*/.\nOn utilise la syntaxe css directement dans le ficher scss en affectant directement les variables Sass déclarées précédemment:\n\n/*-- scss:rules --*/\n\n.contour  {\nborder: 2px solid $couleur_rouge;\npadding: 5px;\nmargin: 5px;\nUn fichier .scss peut alors prendre l’aspect suivant:\n/*-- scss:defaults --*/\n\n// variables sass couleur\n\n$couleur_bleu: #3498db;\n$couleur_rouge: #e74c3c\n\n// Variables Sass Quarto\n\n$link-color: $couleur_bleu;\n$toc-color:  $couleur_rouge;\n\n\n/*-- scss:rules --*/\n\n// classe css contour avec la la variable Sass $couleur_rouge\n\n.contour  {\nborder: 2px solid $couleur_rouge;\npadding: 5px;\nmargin: 5px;",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitre-14-notes-référence-croisée-et-bibliographie",
    "href": "061-glossaire.html#chapitre-14-notes-référence-croisée-et-bibliographie",
    "title": "20  Résumé",
    "section": "20.9 Chapitre 14: notes, référence croisée et bibliographie",
    "text": "20.9 Chapitre 14: notes, référence croisée et bibliographie\n\n20.9.1 Notes\nDeux méthodes\n\nDans une phrase on déclare un numéro de note à l’endroit souhaité avec ^[numero_note] et on renseigne plus loin le contenu de la note: [^numero_note]: texte de la note.\nDans une phrase on renseigne directement le contenu de la note avec ^[contenu de la note].\n\nOn va insérer une note ici^[1]\n\n[^1]: texte de la note\nOn va insérer une note ici^[texte de la note]\n\n\n20.9.2 Références croisées\nSeulement le principe avec quelques exemples.\n\nPrincipe de liens internes qui va s’appliquer à plusieurs types d’éléments d’un document: section, tableau, graphiques, callout, formules…….\nOn déclare l’élément qui sera renvoyé plus tard à l’aide d’un label: élement {#type-nom_label} ou si l’élément provient d’un bloc de code avec l’option #| type-label: nom_label . * Le type est un prefixe qui dépend de l’élement: section: sec, image: fig, tableau tbl, équation eq….\n\nExemples:\n\nUne section du document:\n\n## TitreI {#sec-titre1}\n\nUn graphique généré dans un programme\n\n```{r}\n#| fig-cap: \"titre du graphique\"\n#| fig-label: graph1\n\n&lt;programme&gt;\n```\n\nA un autre moment du document pour afficher l’élément appelé: @type-nom_label.\n\nExemples:\nSe reporter à la section 1 [@sec-titre1]\nSe reporter au graphique 1 [@fig-titre1]\nDans cette page on a mis un label à la sous section *markdown:\n### Balises markdown {#sec-md} \nA ce moment du document, on l’appelle avec {Section 20.2.1} :\nA ce moment du document, on l'appelle avec {@sec-md}\n\n\n20.9.3 Références bibliographiques\n\nDans le yaml associer un fichier .bib avec l’option bibliography: nom_fichier.bib.\nDans le document, insérer le label de la référence bibliographique avec @label_ref_biblio.\n\nDans le fichier .bib on la référence suivante:\n@article{bidibule_2099, title={blabla}, year = {2099}}\nOn insère la référence dans une phrase avec: @bidibule_2099\nComme l'a si bien écrit @bidibule_2099 .......\nComme l’a si bien écrit Bidibule (2099) …….\n\nOn peut insérer toutes les références citées dans une bibliographie générale à l’aide d’une section div (:::) vide de contenu : ::: {#refs}.\n\n#### Références bibliographiques\n\n::: {#refs}\n:::",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#chapitre-15-elements-de-mise-en-page",
    "href": "061-glossaire.html#chapitre-15-elements-de-mise-en-page",
    "title": "20  Résumé",
    "section": "20.10 Chapitre 15: Elements de mise en page",
    "text": "20.10 Chapitre 15: Elements de mise en page\n\n20.10.1 Edition multicolonne\n\nA réserver à du texte de préférence\nUne colonne: balise div (:::) {.column width= \"x%\"}\nPlusieurs colonne: on entoure les colonnes avec la balise {.columns}\nOn peut ajouter des colonnes vides pour gérer l’espace du texte entre deux colonnes\n\n::: {.column}\n\n::: {.columns width=\"47.5%\"}\nTexte colonne 1\n:::\n\n::: {.columns width=\"5%\"}\n:::\n\n::: {.columns width=\"47.5%\"}\nTexte colonne 1\n:::\n\n:::\n\n\n20.10.2 Mettre des éléments dans la marge du document\n\nMarge du document: colonne à droite du grid\nBalise css générique: ::: {.column-margin} pour image et tableau markdown, liste, formule\n\n::: {.column-margin}\nElement à mettre dans la marge du document\n:::\n\nOptions dans les blocs de programme (graphique et tableau): option #| column: margin\nPour les notes on doit utiliser une classe css qui sera placée juste après la note: {.aside}\n\nLa note est renseignée entre des crochets: [texte de la note]{.aside}\nAttention aucun numéro de note sera ajouté.\n\n\nOn peut insérer une note dans la margin du document[Attention il n'y aura pas de numéro de note]{.aside}",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#mise-en-page-des-images-sous-forme-de-vignettes",
    "href": "061-glossaire.html#mise-en-page-des-images-sous-forme-de-vignettes",
    "title": "20  Résumé",
    "section": "20.11 Mise en page des images sous forme de vignettes",
    "text": "20.11 Mise en page des images sous forme de vignettes\n\nA réserver de préférence au html\nTirer partie de l’option lightbox\nDeux types d’insertion: fixe ou libre\nInsertion fixe: layout-ncol\n\nDans une balise css: ::: {layout-ncol=nbre_colonne}\nDans un bloc de codes: #| layout-ncol=nbre_colonne\n\nInsertion libre: layout: \"[liste sous forme de taille relative]\" =&gt; 2 images [50,50] ou [1,1] pour une taille égale\n\nBalise css: ::: {layout: \"[t1,t2,t3,...]\"}\n\nSi les hauteurs des différentes images sont différentes on peut aligner en bas toutes les images avec l’option layout-valign=\"bottom\"\n\nOption bloc de codes: #| layout: [t1,t2,t3,...]\n\nOn peut ajuster l’espace entre deux images avec une valeur négative, par exemple: \"[50,-1,50]\"\n\n\n\n\n\n\n\nBidibule. 2099. « J’ai des choses à dire ».",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "061-glossaire.html#footnotes",
    "href": "061-glossaire.html#footnotes",
    "title": "20  Résumé",
    "section": "",
    "text": "Elle n’a aucune propriété particulier: on dit seulement à son ouverture et à sa fermenture “De là à là”↩︎\ncette option ne peut être renseignée que dans le yaml↩︎\ncette option ne peut être renseignée que dans le yaml↩︎",
    "crumbs": [
      "**Résumé**",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Résumé</span>"
    ]
  },
  {
    "objectID": "01-posit.html",
    "href": "01-posit.html",
    "title": "Posit et Quarto",
    "section": "",
    "text": "Ce n’est plus dans l’R???\n\nL’entreprise RStudio s’appelle maintenant Posit.\nSortie officielle de Quarto pour prendre le relai de Rmarkdown**.\n\nDonc quelque part, on cache R.\nLa raison est simple (cf itw de JJ.Allaire), en dehors du monde académique moindre accrochage de R et donc de RStudio dans les entreprises aux US, dominé par les technologies reposant sur Python. R étant par définition un outil limité à la statistique.\n\n\nAnnonce de la création de Posit\n\n\n\n\n\n\n\nInterview de JJ Allaire\n\n\n\n\n\n\n\n\nFigure 1",
    "crumbs": [
      "Posit et Quarto"
    ]
  },
  {
    "objectID": "02-quarto_resume.html",
    "href": "02-quarto_resume.html",
    "title": "Les + et les - de Quarto",
    "section": "",
    "text": "Les gros plus",
    "crumbs": [
      "Les + et les - de Quarto"
    ]
  },
  {
    "objectID": "02-quarto_resume.html#les-gros-plus",
    "href": "02-quarto_resume.html#les-gros-plus",
    "title": "Les + et les - de Quarto",
    "section": "",
    "text": "Alors que Rmarkdown n’est utilisable qu’avec l’IDE1 RStudio, Quarto est pleinement ouvert à d’autres interfaces comme VSCode ou Jupyterlab.\nQuarto est donc un logiciel et non plus un package comme Rmarkdown.\nLes moteurs Python et Julia sont directement intégrés. Via la compilation du code avec Jupyter qui s’ajoute à celle effectuée par knitr [lien], possibilité d’intégrer d’autres applications statistiques disposant d’un noyau sur ce notebook. C’est le cas de Stata grâce au noyau nbstata.\nEn adéquation avec les normes HTML actuelles, avec vraiment plus de possibilités.\nRendu au format pdf de très bonne qualité.\nLes présentations en mode revealjs.\nOn peut maintenant se passer presque complètement du HTML brut ou du Latex.\nIncite à l’utilisation du terminal pour gérer la compilation des documents avec une série de lignes de commande très simples.\nPlus de possibilités en terme de configuration avec une utilisation plus poussé des éléments entrant dans le yaml2 d’un document ou dans un fichier de configuration (**_quarto.yaml**).\nOption qui permet un accès direct aux code source des documents, ce qui facilite l’apprentissage tiers et le partage: cliquer par exemple en haut à droite de cette page d’accueil sur &lt;/&gt; Code.\nDes extensions externes, qui s’installent facilement. Certaines ont été intégrées au logiciel comme lightbox pour le format html.\nCustomisation des rendus HTML, dont le thème bootstrap, facilité avec un fichier .scss (variables Sass) qui peut se substituer totalement ou partiellement au fichier .css .",
    "crumbs": [
      "Les + et les - de Quarto"
    ]
  },
  {
    "objectID": "02-quarto_resume.html#les-quelques-moins",
    "href": "02-quarto_resume.html#les-quelques-moins",
    "title": "Les + et les - de Quarto",
    "section": "Les quelques moins",
    "text": "Les quelques moins\nOn va vraiment chipoter.\n\n\nDurée de compilation plus longue qu’avec Rmarkdown. Attention tout de même, tout ceci varie plus ou moins fortement d’une machine à une autre. Dans le contexte de l’Ined en utilisant la version de Rstudio sous serveur, la compilation des documents est vraiment très rapide.\nOn constate (encore) une certaine versatilité: Ca marche et ça marche plus et sans savoir vraiment pourquoi. L’outil est donc toujours en phase active de debogage….mais on remarque une stabilisation de plus en plus grandissante avec les versions les plus récentes [06 juin 2024: on va bientôt retirer cette remarque. Depuis la 1.4 je ne rencontre vraiment plus de problème].\nBien que très optionnels, certains outils sont réservés exclusivement pour un déploiement de la documentation sur Github, ce qui est bien dommage. A titre d’exemple, l’icône Gitlab issu de la librarie fontawesome n’est pas directement disponible.",
    "crumbs": [
      "Les + et les - de Quarto"
    ]
  },
  {
    "objectID": "02-quarto_resume.html#footnotes",
    "href": "02-quarto_resume.html#footnotes",
    "title": "Les + et les - de Quarto",
    "section": "",
    "text": "Integrated Development Environment↩︎\nYet an Another Markup Language… ou pas↩︎",
    "crumbs": [
      "Les + et les - de Quarto"
    ]
  },
  {
    "objectID": "03-support.html",
    "href": "03-support.html",
    "title": "Le Support",
    "section": "",
    "text": "Extensions externes utilisées",
    "crumbs": [
      "Le Support"
    ]
  },
  {
    "objectID": "03-support.html#extensions-externes-utilisées",
    "href": "03-support.html#extensions-externes-utilisées",
    "title": "Le Support",
    "section": "",
    "text": "fontawesome:\n\nQuarto\nhttps://github.com/quarto-ext/fontawesome.\n\nanimate:\n\nMickaël Canouil\nhttps://github.com/mcanouil/quarto-animate\n\nnutshell:\n\nDavid Schoch (schochastics)\nhttps://github.com/schochastics/quarto-nutshell.",
    "crumbs": [
      "Le Support"
    ]
  },
  {
    "objectID": "03-support.html#ressources-quarto",
    "href": "03-support.html#ressources-quarto",
    "title": "Le Support",
    "section": "Ressources Quarto",
    "text": "Ressources Quarto\n\nSite officiel de Quarto Lien:\n\nLe guide: https://quarto.org/docs/guide/\nLa liste des options par thématique: https://quarto.org/docs/reference/\nLa galerie de supports avec un accès au code source: https://quarto.org/docs/gallery/\n\nLe code source du site Quarto se trouve à cette adresse: https://github.com/quarto-dev/quarto-web\nNe pas hésiter à consulter la liste de discussions gérée par l’équipe de développement: https://github.com/quarto-dev/quarto-cli/discussions\nUne liste impressionnante de ressources Quarto, appelée Awesome quarto, est mise à disposition par Mickael Canouil sur Github:\n\nhttps://github.com/mcanouil/awesome-quarto?tab=readme-ov-file\n\nLa présentation de Hugues Pecout: https://elementr.gitpages.huma-num.fr/session_notebook/programmation_lettree/#/title-slide\nLe cheatsheet Quarto: https://rstudio.github.io/cheatsheets/quarto.pdf\n\n\n\n\n\n\n\nVersions du support\n\n\n\n\n\nJuin 2024:\n\nWarning sur le problème de compatibilité entre l’option filename [chapitre 5] et l’affichage de graphiques sur plusieurs colonnes [chapitre 15].\nReprise des chapitres sur git, et ajout de sections sur les conflits et une introdiction sur le travail sur branches [chapitres 6 et 7].\nRemarques sur les durées de compilation variables d’une machine à une autre et contextualisation de son utilisation à l’Ined via la version Rstudio du serveur margaux (avec des + et des -).\nReprise de l’esthétique du support.\nQuelques précisions sur la différence entre quarto render et quarto preview [chapitre 2].\nCréation d’un projet Quarto via le terminal et la console R [chapitre 1].\nAjout de l’option filename dans le corp du bloc de codes [chapitre 5].\n\nMars 2024:\n\nPremière version du support",
    "crumbs": [
      "Le Support"
    ]
  }
]