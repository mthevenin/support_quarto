{
  "hash": "d911eb133820cae6dfc03d4994962b75",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n   - nutshell\n---\n\n\n\n# Edition et formatage d'un document\n\n*  Formatage et mise en page sous forme de balises. \n\n*  Permet de modifier l'aspect du texte, d'insérer des éléments comme des titres, des liens, images..., ou de modifier  tout autre élément de mise en page (contours, couleur de fond). Apparue dans les années 70-80 (le Tex), l'édition sous forme de balises est dans un premier temps de type **Markup**. Il est complet mais l'édition et la visualisation du code source du document sont fastidieux.\n\n* Bien qu'incomplet le balisage **Markdown**, créé en 2004, facilite grandement l'édition et la visualisation du code source d'un document. \n\n* Depuis sa création, le Markdown a toujours eu des variantes ou des enrichissements, comme le GFM de Github. \n\n* *Posit* (ex Rstudio) a également ses propres éléments de balisage, ce qui lui permet de proposer un markdown enrichi pour de nombreux éléments de mise en page. Ces nouveautés ont été également introduites avec les dernières versions de Rmarkdown. \n\n\n\n## Markdown\n\n\n[[:Markdown WIKI](https://fr.wikipedia.org/wiki/Markdown)]{.nut}\n\n\nLe **markdown** est un mode de formatage dit **léger**^[D'où le *Down*] de texte incluant des éléments d'insertion d'images, de lien ou de création de tableaux qui se substitue partiellement à un formatage de type **markup**.\n\n\nExemple de formage de type **UP**:\n\n-   Le **TEX** [cf Latex] depuis la fin des années 70.\n\n-   Le **HTML**: HyperText **Markup** Language[^012-markdown-2].\n\n-   Le SMCL: Stata **Markup** Control Language[^012-markdown-3].\n\n\n-   Bien que le markdown se soit largement imposé, il existe d'autres modes de formatage léger, plus ou moins dédié à des outils particuliers.\n\n-   Il existe des variantes ou extension au markdown de base, comme le GFM de Github[^012-markdown-4]\n\n[^012-markdown-2]: Jusqu'en 2007 avec l'apparition des documents `.docx`, le code source de Word (`.doc`) reposait exclusivement sur du HTML. Très utile pour deboger les mises en forme des documents Word....\n\n[^012-markdown-3]: Une horreur...\n\n[^012-markdown-4]: Github Flavored Markdown\n\nCe qui suit donne seulement quelques éléments d'utilisation du markdown, le thème étant très documenté sur internet. On peut se reporter à la documentation officielle de Quarto dont la partie dédiée à Markdown est quasiment exhaustive [[Lien]](https://quarto.org/docs/authoring/markdown-basics.html).\n\n### formatage du texte\n\n+------------------------+------------------------------------------------------+------------------------------------------+\n| Résultat               | Balisage markdown                                     | Balisage html                            |\n+========================+======================================================+==========================================+\n| **Gras**               | `**Gras**` ou `__gras__`                             | `<b>Gras</b>`                            |\n+------------------------+------------------------------------------------------+------------------------------------------+\n| *Italique*             | `*Italique*` ou `_Italique_`                         | `<i>Italique</i>` ou `<em>Italique</em>` |\n+------------------------+------------------------------------------------------+------------------------------------------+\n| ***gras et italique*** | `***Gras et italique***` ou `___Gras et italique___` | `<b><i>Gras et italique</i></b>`         |\n+------------------------+------------------------------------------------------+------------------------------------------+\n| ~~Barré~~              | `~~Barré~~`                                          | `<strike>Barré<\\strike>`                 |\n+------------------------+------------------------------------------------------+------------------------------------------+\n| `Inline code`          | `` `Inline code` ``                                  | `<code>Inline code<\\code>`               |\n+------------------------+------------------------------------------------------+------------------------------------------+\n\n::: callout-note\nCe support utilise seulement 4 des 5 balises présentées dans le tableaux\n:::\n\n::: callout-note  \n#### Zône de commentaire\n\nIdentique au html: \n\n```{.mf}\n\n<!-- Commentaire sur une ligne -->  \n\n<!-- \nCommentaire sur plusieures lignes \n -->  \n\n```\n\n:::\n\n\n### Saut de ligne\n\n-   Généralement les éditeurs de texte markdown sur le web comme [\\[stackedit\\]](https://stackedit.io/) gèrent automatiquement le saut avec la touche `enter`.\n-   La balise html est `<br>`\n-   Avec Quarto (ou Rmarkdown) deux possibilités :\n    -   Implicitement avec un **double espace** après le dernier mot.\n    -   Explicitement avec l'utilisation de la balise `\\`. \n\n![](img1/br1.png){group=br}\n\nPremière ligne sans espace\nDeuxième ligne\n\n![](img1/br2.png){group=br}\n\nPremière ligne avec 2 espaces  \nDeuxième ligne\n\n\n![](img1/br3.png){group=br}\n\nPremière ligne avec un slash\\\nDeuxième ligne\n\n\nOn peut obtenir une ligne vide supplémentaire en sautant directement une ligne\n\n![](img1/br4.png){group=br}\n\nUne ligne vide après la première ligne\n\nDeuxième ligne\n\n\n\n::: {.callout-tip #tip-multi_br}\n### Plusieurs sauts de ligne\n\nSelon le traducteur Markdown il est possible ou non d'augmenter le nombre de saut de ligne en ajoutant des backslash. Par exemple pour sauter 3 lignes `\\\\\\`.\\\nCe n'est pas possible avec Quarto ou Rmarkdown. La solution est alors d'ajouter une ou plusieurs balises html `<br>`. Pour un document en format PDF, il y a la possibilité d'utiliser la balises Latex `\\linebreak`[^012-markdown-5]\n:::\n\n[^012-markdown-5]: Attention aux compilations multiformats, si le document a un rendu html et pdf, il faudra mettre des *contenus conditionnels* (@sec-multiform)\n\n### Titre/header {#sec-titre}\n\nEn html les **header** permettent d'insérer des titres de chapitre ou sections. Ils permettent d'alimenter la tables des matières (**`toc`**) si l'option est activée.\n\n* En html titres et les headers sont introduits hiérarchiquement avec les balises `<h1>titre</h1>`, `<h2>sous titre</h2>`\n* En markdown ils sont introduits avec des `#`. \n  * `# Titre_1`\n  * `## Titre_12`\n\n### Listes\n\n* En html les listes sont générées avec un système de balises imbriquées ou non (`<ul>` `<ol>`,`<li>`).\n* En markdown l'édition des listes est particulièrement simplifiée. \n  * Liste non ordonnée : un symbole comme `*`, `-`, `+`  \n  * Liste : ordonnée : Nombre suivi d'un **.**: `1.` , `2.`, ....\n* Règle de retrait: \n  * Pour le premier niveau de la liste la puce ou le nombre se situe sur le premier caractère de la ligne. \n  * Pour les sous listes, la puce ou le nombre est en dessous du premier caractère de la liste du niveau supérieur.\n* Il n'est pas nécessaire d'indiquer un saut de ligne pour passer à l'élément suivant de la liste.\n\n**Liste non ordonnée**:\n\n```{.mf}\n* item1\n  * item11\n  * item12\n* item2\n  * item21\n    * item22\n```\n\n* item1\n  * item11\n  * item12\n* item2\n  * item21\n    * item22\n\n**Liste ordonnée**:\n\n```{.mf}\n1. item1\n   11. item11\n2. item2\n   21. item21\n   22. item22\n```\n\n1. item1\n   11. item11\n2. item2\n   21. item21\n   22. item22\n\n\n::: callout-important\n#### Laisser une ligne vide avant la liste\n\nAvec Quarto ou Rmarkdown on doit absolument laisser une ligne vide entre la liste et la dernière ligne de texte la précédent. Ce ne sera pas forcément le cas avec d'autres éditeurs.\n\n:::\n\n\n:::: {.columns} \n::: {.column width=\"47.5%\"}\n* [**BIEN**]{.col_success} \n```{.mf}\nLigne vide...\n\n* Item1\n* Item2\n```\n\nRésultat: Ligne vide entre la liste et la dernière phrase\n\n* Item1\n* Item2\n\n:::\n\n::: {.column width=\"5%\"} \n:::\n\n::: {.column width=\"47.5%\"}\n* [**PAS BIEN**]{.col_danger}  \n```{.mf}\nPas de Ligne vide...\n* Item1\n* Item2\n  \n```\n\nRésultat: Pas de ligne vide entre la liste et la dernière phrase\n* Item1\n* Item2\n\n:::\n::::\n\n\n### Insertion d'un lien\n\nEn html un lien et ses options sont insérés dans une balise **`<a *lien options*></a>`**\n\n*   Addresse du lien reportée dans le document : **`<path/nom_fichier.extention>`**\n    *   Exemple page html : <https://quarto.org/>\n    *   Exemple autre type fichier : <https://gitlab.com/mthevenin/support_quarto/-/blob/master/README.md>\n\n*   Lien dans un texte : **`[texte](path/nom_fichier.extention)`**\n    *   Exemple page html : `[Site Quarto](https://quarto.org/)` donne [Site Quarto](https://quarto.org/)\n    *   Exemple autre type de fichier : `[[Readme du dépôt gitlab de la formation]](https://gitlab.com/mthevenin/support_quarto/-/blob/master/README.md)` donne [\\[Readme du dépôt github de la formation\\]](https://github.com/mthevenin/quarto/blob/main/README.md)\n\n\n\n\n### Insertion d'une image\n\n::: callout-note\n\n* La mise en page des images et certaines options propres à Quarto font l'objet d'une section dédiée [[@sec-img]]\n* On regardera ici seulement l'insertion d'image externe et non des graphiques générés directement par un programme\n:::\n\n* En html, les images et ses options sont insérées dans une balise **`<img source_image options>`**. \n\n* La syntaxe générique est** `![Titre optionnel](path/nom_image.extension){options image}`**.\n\n* Si l'image est stockée en local dans un répertoire ou un sous répertoire du fichier .qmd, on met de préférence le chemin relatif:\n    * Si l'image est dans le même répertoire que le fichier qmd: seulement le nom du fichier.\n    * Si l'image est dans un sous répertoire du répertoire où est stocké le qmd: `repertoire/nom_image.extension`\n    * Si l'image est stockée sur le web on indique l'url.\n  \n* Par défaut l'image est centrée.  \n  \n***Exemple avec le logo Quarto***:  \n\n* Avec le lien de l'image : \n  * **`![Logo](https://quarto.org/quarto.png)`**\n\n::: {.center}\n::: {.column width=\"60%\"}\n::: {.box_img}\n![Logo](https://quarto.org/quarto.png)\n:::\n:::\n::: \n\n  \n* Avec le logo stocké dans le répertoire **img1**:\n  * **`![Logo](img1/quarto.png)`**\n\n::: {.center}\n::: {.column width=\"60%\"}\n::: {.box_img}\n![Logo](img1/quarto.png)\n:::\n:::\n:::\n\nSans rentrer dans le détail des options : \n\n* On peut réduire la taille de l'image. En relatif on peut utiliser l'option `{width=X%}`:\n  * **`![Logo à 50%](img1/quarto.png){width=50%}`**\n\n::: {.center}\n::: {.column width=\"60%\"}\n::: {.box_img}\n![Logo à 50%](img1/quarto.png){width=50%}\n:::\n:::\n::: \n\n- On peut modifier l'alignement horizontal de l'image avec l'option `fig-align:\"left/right\"` à l'option précédente: \n  - **`![Logo 50% à gauche](img1/quarto.png){fig-align=\"left\" width=50%}`**\n\n::: {.center}\n::: {.column width=\"60%\"} \n::: {.box_img}\n![Logo 50% à gauche](img1/quarto.png){fig-align=\"left\" width=50%}\n:::\n:::\n::: \n\n\n### Insertion d'un tableau\n\nParlons peu parlons bien : générer manuellement un tableau en html (ou latex) mais également en markdown n'est pas la solution. En markdown, la création de tableau se fait sur un principe de pipes, au premier abord cela apparait moins confus qu'en html mais les modifications  aussi simple soit elles sont assez chronophages et pénible.\n\nUn exemple très simple pour s'en convaincre :\n\n**Tableau en html**:\n\n```{.mf}\n<table>\n<tr>\n<td>A</td>\n<td>B</td>\n</tr>\n<tr>\n<td>C</td>\n<td>D</td>\n</tr>\n</table>\n```\n\nEn html, une multitude de balisage : `<table></table>` (tableau), `<tr></tr>` (ligne) et `<td></td>` (colonne)\n\n+---+---+\n| A | B |\n+---+---+\n| C | D |\n+---+---+\n\n<br>\n**Tableau en markdown**:\n\n* Repose sur un principe de *pipes* pas forcément facile à mémoriser\n\n```{.mf}\n+---+---+\n| A | B |\n+---+---+\n| C | D |\n+---+---+\n: tableau markdown \n```\n\n+---+---+\n| A | B |\n+---+---+\n| C | D |\n+---+---+\n: tableau markdown\n\n<br>\nEt les modifications sont assez pénibles à réaliser (et encore ici on a pas mis de nom aux colonnes).\n\n```{.mf}\n+--------+------+\n| A      | BBBBBBB |\n+--------+------+\n| CCCCC | D    |\n+--------+------+\n\n+--------+---------+\n| A      | BBBBBBB |\n+--------+---------+\n| CCCCC  | D       |\n+--------+---------+\n\n```\n+--------+---------+\n| A      | BBBBBBB |\n+--------+---------+\n| CCCCC  | D       |\n+--------+---------+\n\n<br>\n\n**La solution**: utiliser un éditeur de tableaux markdown.\n\n* Avec Quarto ou une version récente de Rmarkdown : passer en mode **Visual** et aller sur l'onglet **Table**. Le tableau peut être éditer directement après avoir indiqué le nombre de lignes et de colonne.\n* Utiliser un éditeur de tableau markdown en ligne : par exemple <https://www.tablesgenerator.com/markdown_tables>.\n\n\n::: callout-tip  \nSi on prévoit de faire plusieurs tableaux manuellement dans un document ou un projet, cela peut valoir le coup de générer un document dédié aux tableaux markdown. Il suffira de récupérer le code source des tableaux et de le coller dans le document final\n:::\n\n<br>\n\n* **Titre du tableau**: sous le tableau avec **`: titre tableau`**\n\n```{.mf}\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n: Titre tableau\n```\n<br>\n\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n\n: Titre tableau {#tbl-tableau_md}\n\n<br>\n\n::: {.callout-tip collapse=true}\n\n#### Modifier la largeur du tableau en format html\n\nAvec un rendu html^[En pdf la largeur est ajustée sur les colonnes donc pas de soucis], la largeur du tableau prend automatiquement toute la largeur de la page. Avec un nombre réduit de colonnes ce n'est pas top. On peut réduire la largeur du tableau en modifiant la mise en page de la page qui contient le tableau. \n\nJ'anticipe ici un peu les éléments de mise en page propres à Quarto. On peut insérer le tableau dans une édition en mode colonne [@sec-column] avec une largeur réduite (ici 20% de la largeur de la page)\n\n\n```{.mf}\n::: {.column width=\"20%\"}\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n:::\n```\n\n<br>\n\n::: {.column width=\"20%\"}\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n:::\n\n<br>\n\nAutre astuce (html): si on veut centrer rapidement et facilement le tableau sur la page, on peut utiliser un balisage html `<center>Tableau</center>` : \n\n```{.mf}\n<center>\n::: {.column width=\"20%\"}\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n:::\n</center>\n```\n\n<center>\n::: {.column width=\"20%\"}\n| Variables | $Y_1$ | $Y_2$ |\n|-----------|-------|-------|\n| $X_1$     | 100   | 261   |\n| $X_2$     | 350   | 198   |\n| $X_3$     | 125   | 175   |\n:::\n</center>\n\n:::\n\n\n### Insertion d'une équation ou d'une formule\n\nQuarto utilise par défaut comme Rmarkdown l'éditeur `mathjax`.  \n\n\n* Si l'équation est insérée dans une ligne de texte : `$équation/formule$`, par exemple `$y=x+1$`   $y=x+1$\n* Si l'équation est insérée sur une ligne entière : `$$équation-formule$$`, par exemple `$$\\sum_{i=0}^n p_i=1$$` : \n\n$$\\sum_{i=0}^n p_i=1$$\n\n\n* [Liste de symboles pour écrire des formules](https://www.cmor-faculty.rice.edu/~heinken/latex/symbols.pdf)\n* [Guide de rédaction des formules](https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)\n\n\n\n## Balisage propres à Quarto/Rmarkdown\n\n\n\n[[:CSS Wiki](https://fr.wikipedia.org/wiki/Feuilles_de_style_en_cascade)]{.nut}\n\n\n\nPosit a introduit 3 types de balisage: \n\n* Un pour modifier des éléments de mise en page: \n  * Se substitue aux balises html de type **`<div>`**: édition en plusieurs colonnes , contours, couleurs de fond.... Applique une classe CSS^[Cascade Style Sheet] à un élément ou à une partie du document. Ne pas s'inquiéter, Quarto fournit plusieurs classes CSS à appliquer directement à un document. \n\n* Un pour modifier des éléments de formatage du texte non pris en compte par le markdown: \n  * Se substitue aux balises html de type **`<span>`** en html. Demandera nécessairement quelques connaissances en css (on se limitera ici à la couleur d'un mot).\n\n* Un système de **shortcode** pour insérer des éléments se substituant ou non à des balises html ou à des classes  **CSS**.\n\n\n### Balises de mise en page\n\n* La balise **`<div>`** associée à une classe CSS est remplacée par une balise de type **clôture** (*fence*): **`:::`. La partie modifiée sera ouverte et fermée par ces `:::`.\n  \n* La balise de clôture contient au minimum 3 **:** \n  \n* Le nom donné à la modification de la mise en page est appelé **classe** et est indiqué à l'ouverture de la section div dans des accolades: **`::: {.nom_classe_css  <options>}`**.\n\n**Utilisation d'une classe CSS prédéfinie (par le thème ou par Quarto)**:\n  \n```{.mf}\n::: {.nom_classe_css  <options>}\nTexte/image....\n:::\n```\n\nEn html, on aurait par exemple:\n\n```{.mf}\n<div>\n<p class=\"nom_classe_css <options>\nTexte/image ...\n</p>\n</div>\n```\n\n\nRemarques: \n\n* On peut mettre plusieurs classes CSS à la suite pour modifier la mise d'une partie du document. \n\n* On peut modifier directement le style avec des attributs CSS sans définir de classe (pas recommandé):  \n  * **`::: {style = \"attributs_css\"}`**.\n\n* On peut imbriquer plusieurs modifications dans une même zône du document. Pour s'y retrouver dans les ouvertures/fermetures, on peut augmenter le nombre de **:**.  \n\n```{.mf}\n:::: {.nom_classe1}\n:::  {.nom_classe2}\nTexte\n:::\n::::\n```\n\n\nEt comme c'est plus sympa avec des exemples...\n\n\n#### Encadrés informatifs: les callouts\n\n* Il s'agit d'un élément propre à Quarto (non implémenté dans Rmarkdown).  \n\n* C'est une zône de texte sous forme d'encadré avec un bord coloré et un icone selon le type d'information :  **note/info**, **tips/success**, **warning**, **important**, **danger**.\n\n* Pour générer cette mise en page, sans plus d'option, on utilise la classe `{.callout-nom_type}`: \n  * `{.callout-note}`, `{.callout-warning}`\n  * Plusieurs options: `{.callout-warning option}`\n  * Si aucune option, on peut également appeler l'encadré directement avec: **`::: callout-type`**\n\n* On peut mettre un titre à l'encadré (@sec-titre):\n  * Mettre le titre sur la première ligne du texte de l'encadré.\n  * Penser à baisser le niveau du titre par rapport à celui de la section.\n\nEncadré d'avertissement :\n\n```{.mf}\n::: {.callout-warning}\nAttention si vous faites ça, vous allez avoir des problèmes.\n:::\n```\n\nCe qui donne : \n\n::: callout-warning\nAttention si vous faites ça, vous allez avoir des problèmes.\n:::\n\nAvec `callout-note` (information):\n\n```{.mf}\n::: callout-note\nLes **callouts** ne sont pas implémentés dans Rmarkdown\n:::\n```\n\nCe qui donne: \n\n::: callout-note\nLes **callout** ne sont pas implémentés dans Rmarkdown.\n:::\n\n**Ajouter des options**:\n\n* Il y a plusieurs options associées à ces encadrés comme retirer l'icône, étendre le contenu lorsque celui est trop long, ......\n* Quelques options:\n  * **`collapse= true`** [seulement format html]: si le contenu est trop long, permet de l'afficher à la volée. Penser à mettre un titre à l'encadré.\n  * **`appareance`**: simple ou minimale.\n    * simple: pas d'icône et couleur faiblement saturé sur le titre.\n    * minimale: pas d'icône et pas de couleur sur le titre.\n  * **`icon= false`**  \n\n::: {.callout-tip collapse=true}\n##### Collapse\n`::: {.callout-tip collapse=true}`\n:::\n\n::: callout-tip\n##### Apparence par défaut\n`::: callout-tip`\n:::\n\n::: {.callout-tip appareance=simple}\n##### Apparence simple\n`::: {.callout-tip appearance=simple}`\n:::\n\n::: {.callout-tip appearance=minimal}\n##### Apparence minimale\n`::: {.callout-tip appearance=minimal}`\n:::\n\n\n::: {.callout-tip icon=false}\n##### Supprimer l'icône\n\n* Dans la section div: `::: {.callout-tip icon=false}`\n* Dans le yaml/header du qmd: `callout-icon: false`\n  * On peut refaire apparaitre l'icône dans les callout individuellement.\n:::\n\n#### Multicolonnes {#sec-column}\n\n* Imbrication de plusieurs balises :\n  * Deux types de balises: \n    * On déclare une édition en plusieurs colonnes: **`{.columns}`**\n    * On génère chaque colonne: **`{.columns width=\"x%\"}`**\n* Comme les balises sont liées et imbriquées,  on peut clôturer la première avec plus de **:** pour faciliter l'édition, par exemple 4: **`::: {.column}`**. \n\n\n```{.mf}\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* Texte de la colonne de gauche \n* Largeur: \n  * 50% de la page avec l'option `width=50%`\n:::\n\n::: {.column width=\"50%\"}\n* Texte de la colonne de droite\n  * 50% de la page avec l'option `width=50%`\n* Largeur: \n:::\n\n::::\n```\n\n\nCe qui donne : \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* Texte de la colonne de gauche   \n* Largeur : \n* 50% de la page avec l'option `width=50%`  \n\n:::\n\n::: {.column width=\"50%\"} \n\n* Texte de la colonne de droite    \n* Largeur : \n* 50% de la page avec l'option `width=50%`  \n\n:::\n::::\n\n::: callout-tip\nOn peut mettre une colonne vide pour créer une marge entre les colonnes textes\n\n```{.mf}\n:::: {.columns}\n\n::: {.column width=\"47.5%\"}\n* Texte de la colonne de gauche   \n* Largeur : \n* 50% de la page avec l'option `width=50%`  \n\n:::\n\n::: {.column width=\"10%\"} \n:::\n\n::: {.column width=\"47.5%\"} \n\n* Texte de la colonne de droite    \n* Largeur : \n* 50% de la page avec l'option `width=50%`  \n\n:::\n::::\n```\n\n:::\n\n\n### Formatage du texte\n\n* A mon sens moins utile, le markdown gérant l'essentiel du formatage de texte. Je passe donc brièvement dessus.\n* Demande quelques connaissances en CSS. Tous ces éléments sont bien documentés sur internet.\n\n* Syntaxe: **`[texte à modifier]{style css affecté au texte}`**.\n\n```{.mf}\nOn veut mettre le mot [texte]{style=\"color:red\"} rouge. \n```\n\nOn veut mettre le mot [texte]{style=\"color:red\"} en rouge. \n\nOn peut bien évidemment utiliser une classe CSS prédéfinie. Par exemple avec la classe **`.border`**:\n\n```{.mf}\nOn veut mettre le mot [texte]{.border} avec un contour. \n```\n\nOn veut mettre le mot [texte]{.border} avec un contour. \n\n\n### Shortcodes d'insertion {#sec-shortcode}\n\nSyntaxe: **`{{{< type_shorcode options >}}}`**\n\n\nQuelques exemples.\n\n\n#### Sauts de page \n\nUne des très bonnes implémentation de Quarto (min v1.3). On a la possibilité quel que soit soit le format de sortie d'indiquer un saut de page. Pour le format html permet d'insérer des sauts de page si le document doit être imprimer. \n\nLe shortcode est: **`{{{< pagebreak >}}}`**\n\n\n#### Insertion de video \nOn peut insérer des vidéos (Youtube, Vimeo...) avec **`{{{< video video_link option >}}}`**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n{{< video https://www.youtube.com/watch?v=VEay0IMZT8w >}} \n```\n:::\n\n\n::: {.box_img}\n\n{{< video https://www.youtube.com/watch?v=VEay0IMZT8w >}}\n\n\n:::\n\n\nOn peut paramétrer le ratio ou la taille de la vidéo insérée:\n\n* Ratio avec l'option aspect-ratio (par défaut 16/9). Ici en 4/3: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n{{< video lien_video aspect-ratio=\"4x3\" >}}\n```\n:::\n\n\n\n* Taille avec `width` et `height`: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n{{< video lien_video width=\"500\" height=\"350\" >}}\n```\n:::\n\n\n\n\n#### Insertion d'un autre document ou programme \n\n***Insertion d'un document***\n\n* On peut également insérer directement un document ou des lignes de codes issues d'un autre fichier:  \n  * **`{{{< include nom_fichier >}}}`** \n\n* Exemple: on veut insérer directement le code source d'un fichier appelé *include.qmd.* Il pourrait, par exemple, être  utilisé dans plusieurs formats d'une même documentation (article et présentation):\n  * **`{{{< include files/include.qmd >}}}`**. \n\n\nCode source du fichier que l'on veut insérer:\n\n::: {.center}\n![Fichier .qmd inséré](img1/include_qmd.png)\n:::\n\nLe résultat après l'inclusion:\n\n---\n---\n\n\n:::  {style=\"background-color:#18bc9c\"} \n\nCe que vous lisez là sur fond vert est issu d'un autre fichier. \nPour l'insérer dans le support,  on utilise le shortcode **{{< include files/include.qmd >}}**\naprès avoir enregistré le fichier qui sera inséré.   \n\n* Le nom de ce fichier est **files/include.qmd**.\n* On pourra l'utiliser dans plusieurs documents d'une documentation.\n\n:::\n\n\n\n\n\n\n\n\n\n***Insertion d'un programme***  \n\n* On a par exemple un programme R enregistré dans un fichier.\n* On peut l'exécuter directement sans insérer directement le programme dans un bloc de code (voir chapitre dédié aux blocs de code): \n  * **`{{{< include nom_programme.R >}}}`**\n\n\n* On a enregistré le script assez long **_include_prog.R** dans le répertoire files:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf <- read.csv(\"fecondite_ggp.csv\")\ndf = df %>% mutate_if(is.character,as.factor)\n\ntmp <- df %>%\n  mutate(pays2=pays)   \n\nggplot(tmp) +\n  aes(x = year, y = y) +\n  geom_line( data=tmp %>% dplyr::select(-pays), aes(group=pays2), color=\"grey\", lwd=0.1) +    \n  geom_line(colour = \"#C24168\", lwd=1.4) +\n  labs(title = \"Taux de fécondité\") +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),  \n        panel.grid.minor.y = element_blank()) + \n  labs(x = \"Années\", \n       y = \"ICF\", \n       title = \"Indices conjoncturels de fécondité par pays de 1950 à 2022\", \n       caption = \"Source: GGP - Datalab Ined\",) +\n  scale_x_continuous(guide = guide_axis(n.dodge = 2), breaks=seq(1950,2020, 10)) + \n  scale_y_continuous(breaks=seq(0,6,1)) +\n  facet_wrap(vars(pays), ncol = 4L)\n```\n:::\n\n\n\n* On peut l'exécuter directement avec le shortcode `include` sans l'insérer explicitement dans le fichier .qmd:  \n\n![](img1/include.png)\n\nDans le document le graphique sera affiché: \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](013-markdown_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "013-markdown_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}