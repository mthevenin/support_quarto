{
  "hash": "e39ce478b2967c48f31e7a3605ff8d40",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Format HTML\n\n* Pour les notebooks/articles et les présentations.\n  * Notebook/articles: **`format: html`**.\n  * Présentation: **`format: revealjs`**.\n\n\n[[:HTML WIKI](https://fr.wikipedia.org/wiki/Hypertext_Markup_Language)]{.nut}  \n[[:JAVASCRIPT WIKI](https://fr.wikipedia.org/wiki/JavaScript)]{.nut}  \n<br>\n\n\n\n* Contenu dynamique donc plus d'options, certaines un peu gadgets (surtout revealjs) .\n\n* Par défaut output en deux parties:\n  * le document final: .qmd {{< fa solid arrow-right >}} .html.\n  * Répertoires de fichiers associés: .css, .js, ....\n  * Possibilité de passer sur un output en un seul fichier.\n\n\n##  Fonctionnalités communes article et présentation\n\n### Fichiers de sortie\n\nPour le notebook/article et les présentations revealsjs, par défaut l'output est composé du fichier html, et d'un répertoire contenant des fichiers associées de type css, scss ou javascript. Cela permet d'avoir un fichier html pesant moins lourd. A savoir tout de même que si l'on souhaite transmettre un document par mail, le repertoire associé doit être également inclus aux pièces jointes. Il est donc conseillé de le compresser avant l'envoi.\n\nLe nom du répertoire contenant tous les styles et fonctionnalité associées est **nom_qmd-files**.   \n\nSi l'on souhaite un fichier html unique.\n\n* Deux options:\n  * **`self-contained: true/false`**.\n  * **`embed-ressources: true/false`**. \n* Par défaut `false` pour les deux. La documentation actuelle,  ***recommande d'utiliser l'option `embed-ressources ***, en particulier pour les présentations revealjs.\n\n\n### Lightbox: agrandissement des images/graphiques \n\nL'option Star de **Quarto**.  \n\n* Jusqu'à la version 1.35 cette option était sous forme d'extension à installer à chaque nouveau document ou projet. Cette option a été pleinement intégrée au logiciel avec la v1.4.\n\n* Permet d'afficher une image/graphique dans une fenêtre autonome.\n* Facilite une mise en page sous forme de vignettes, et donc d'aggrandir les images.\n* On peut grouper différentes images et naviguer entre elles lorsqu'elles sont aggrandies.\n\n::: callout-warning\nEn forme de vignettes ([@sec-img]), si on prévoit une compilation non dynamique (pdf, docx, beamer, powerpoint) il faudra conditionner la mise en page des images selon le format de sortie  pour que le format statique ne reporte pas les images dans des tailles trop petites, donc illisibles ([@sec-multiform]).\n:::\n\n**Dans le yaml**  \n\nPour tout le document:\n\n* Par défaut: `lightbox: false`. \n* Pour l'activer: **`lightbox: true`**.\n\n**Dans le bloc de code**  \n\n***Appliquée individuellement à une image avec une classe css***\n\n::: callout-warning\n\n#### Janvier 2024: .no-lightbox ou .nolightbox\n\n* la doc quarto indique que l'option de désactivisation est `{.no-lightbox}`. Chez moi cela ne fonctionne pas.  \n\n* Cela fonctionne cependant avec `{.nolightbox`} qui est le nom directement hérité de l'extension externe (développé par une personne de quarto au passage). \n\n:::\n\n* Si dans le yaml, l'option n'est pas activé, on peut la désactiver individuellement avec la classe `{.no-lightbox}` appliquée diirectement à l'image: `![](imgage.png){.nolightbox}`.  \n\nPour ce support, l'option est activée par défaut. Pour désactivée la première image (chapitre installation de Quarto et gestion des fichiers):  \n\n\n```{.mf}\n![](img1/c12.png){.nolightbox}\n```\n\n::: {.box_img}\n![Option avec `{.nolightbox}`](img1/c12.png){.nolightbox width=50%}\n:::\n\n    \n***Appliquée lightbox à tous les graphiques générées dans un bloc***  \n\n* En option du bloc de code. On utilise l'option: **`#| lightbox: true/false`**\n\nSi on veut désactiver l'option pour les deux graphiques suivant.\n\n```{{r}}\n\n#| lightbox: false\n#| layout-ncol: 2\n\n\ndata(\"mtcars\")\n\nx <- mtcars$wt          \ny <- mtcars$mpg \nz <- mtcars$disp\n\nplot(x, y)         \nplot(x, z) \n```\n\n\n::: {.box_img} \n\n::: {.cell layout-ncol=\"2\" lightbox='false'}\n::: {.cell-output-display}\n![](032-html_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](032-html_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n\n:::  \n\n**Grouper des images**\n\n* Option très intéressante qui permet de naviguer entre  une série d'images\n* Dans l'image ouverte, l'option est activée lorsque **>** (avancer) et **<** (retour) apparaissent clairement à gauche et à droite. \n* L'option pour associer des images et naviguer entre elles est **`group=\"nom_groupe\"**\n\n\n::: {.panel-tabset}\n\n#### Images insérées en markdown  \n\nOn ajoute l'option **`{group=\"nom_groupe\"}`** à l'image insérée\n```{.mf}\n![](img1/c12.png){group=\"groupe1\"}  \n\n![](img1/c13.png){group=\"groupe1\"}\n```\n\n\n::: {layout=\"[20,20]\"}\n::: {.box_img}\n![](img1/c12.png){group=\"groupe1\"}  \n:::\n\n::: {.box_img} \n![](img1/c13.png){group=\"groupe1\"}\n:::\n:::\n\n#### Graphiques générés dans un programme\n\nOn ajout à l'option `#| lightbox`, la sous option **`#| group=\"nom_groupe`**.    \n\n\n::: {.cell lightbox='{\"group\":\"nom_groupe\"}'}\n\n````{.cell-code}\n```{{r}}\n#| lightbox:\n#|   group: nom_groupe\n\n# programme R \n```\n````\n:::\n\n\n\n```{{r}}\n#| layout-ncol: 2\n#| lightbox: \n#|   group: \"scatter plot\"\n\ndata(\"mtcars\")\n\nx <- mtcars$wt          \ny <- mtcars$mpg \nz <- mtcars$disp\n\nplot(x, y)         \nplot(x, z) \n```\n\n::: {.box_img} \n\n::: {.cell layout-ncol=\"2\" lightbox='{\"group\":\"scatter plot\"}'}\n::: {.cell-output-display}\n![](032-html_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](032-html_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n:::\n\n\n### Onglets {#sec-tabset}\n\n* Les sections sous forme  d'onglets ont été introduits très tôt dans Rmarkdown. Ce n'est donc pas une nouveauté.\n* Nouveauté Quarto: Si plusieurs sections à onglets on les mêmes entrées il est possible de caler  toutes les sections sur une même entrée tout au long du document.\n\nExemple: on a plusieurs sections sous forme d'onglets avec chacune une section  **R**, **Stata** et **Python**. Par défaut l'onglet **R** sera la première visible. Si on se met sur l'ongle **Python**, toutes les autres sections d'onglets se mettront par défaut **Python**.\n\n**Syntaxe de base**: \n\n  * Dans une section div (`:::`), on ajoute la classe css `{.panel-tabset}`.\n  * On peut ajouter une couleur de fond aux onglets avec la classe  `.nav-pills`.\n\n\n```{.mf}\n::: {.panel-tabset}\n\n## Titre onglet 1 \n\nContenu onglet 1\n\n## Titre onglet 2\n\nContenu onglet 2\n:::\n```\n\n\nDonne:    \n\n::: {.panel-tabset}\n\n#### **Titre onglet 1** \n\nContenu onglet 1\n\n#### **Titre onglet 2**\n\nContenu onglet 2\n\n:::\n\n\n**Synchronisation des onglets**:  \n\n* On ajoute seulement l'option **`group=\"nom_group\"`** à toutes les sections sous forme d'onglets.\n\n\n```{.mf}\n::: {.panel-tabset  group=\"nom_group\" }\n\n## Titre onglet 1 \n\nContenu onglet 1\n\n## Titre onglet 2\n\nContenu onglet 2\n:::\n```\n\nExemple:\n\nLes deux sections d'onglets sont reliés de la façon suivante:\n\n```{.mf}\n::: {.panel-tabset  group=\"lang\" }\n```\n\n***Courbes de séjour Kaplan-Meier***  \n\n\n::: {.box_img}\n::: {.panel-tabset  group=\"lang\" }\n\n#### **Sas** \n\n```{.mf}\nods exclude Lifetest.Stratum1.ProductLimitEstimates;\nproc lifetest data=trans;\ntime stime*died(0); run;\n```\n\n#### **R**\n\n**Package survival**  \n\n```{.mf}\nlibrary(survival)\nfit <- survfit(Surv(stime, died) ~ 1, data = trans)\nfit\nsummary(fit)\nplot(fit)\n```\n\n#### **Stata**\n\n```{.mf}\nstset stime, f(died)\nstci, p(75)\nstci\nstci, p(25)\nsts graph\n```\n\n#### **Python**\n\n**Package statmodels**  \n\n```{.mf}\nimport matplotlib.pyplot as plt\nimport statsmodels as sm\n\nkm = sm.SurvfuncRight(trans[\"stime\"], trans[\"died\"])\nkm.summary()\n```\n\n:::\n:::\n\n<br>\n\n***Modèle semi-paramétrique Cox***      \n\n::: {.box_img}\n::: {.panel-tabset  group=\"lang\" }\n \n#### **Sas** \n\n```{.mf}\nproc phreg data=trans;\nmodel stime*died(0) = year age surgery /TIES=EFRON ;\nrun;\n```\n\n#### **R**\n\n```{.mf}\ncoxfit = coxph(formula = Surv(stime, died) ~ year + age + surgery, data = trans)\nsummary(coxfit)\n```\n\n#### **Stata**\n\n\n::: {.cell}\n\n```{.mf .cell-code}\nstcox year age surgery, nolog noshow efron\n```\n:::\n\n\n#### **Python**\n\n**Package statmodels**  \n\n```{.mf}\nmod = smf.phreg(\"stime ~  year + age + surgery \",trans, status='died', ties=\"efron\")\nrslt = mod.fit()\nprint(rslt.summary())\n```\n\n:::\n:::\n\n<br>\n\n## Fonctionnalités propres à un notebook/article\n\nQuelques options sont spécifiques à un contenu de type page html, et donc absente du format revealjs. \n\n\n### Langues, résumé et description  \n\n#### Langues \n\n* Quarto donne la possibilité de choisir une langue qui va s'appliquer au titres de certaines métadonnées du document: auteur, résumé, sommaire....\n* Sans surprise l'anglais est la langue par défaut.\n\nSi on souhaite changer la langue du titre: **`lang: langue`**  [[Liste des langues]](https://quarto.org/docs/authoring/language.html#lang-option). \n\nPar exemple, si on veut passer en français: dans le yaml**`lang: fr`**.\n\n::: {layout=\"[50,50]\" layout-valign=\"bottom\"}\n::: {.box_img}\n![Par défaut (en)](img1/html1.png){width=70% group=\"html2\"}  \n::: \n\n::: {.box_img}\n![En français (fr)](img1/html2.png){width=70% group=\"html2\"}  \n:::\n:::\n\n\nSi ces traductions ne conviennent pas, on peut choisir. Par exemple:\n  * **`toc-title`**: \"XXXX\"\n  * **`author-title`**: \"XXXX\"\n\nDans le yaml, en enlevant l'option `lang:fr`:  \n\n```{.yaml}\n---\ntitle: \"Changement de la langue avec option titre\"\n\nauthor: \n  name: \"Bidibule\"\n\nformat: \n  html: default \n\ntoc: true\n\nabstract: |\n Résumé de mon document\n\ntoc-title: \"SOMMAIRE\"\nauthor-title: \"AUTRICE\"\nabstract-title: \"SYNTHESE\"\n\n---\n```\n\n<br>\n \n#### Résumé et description\n\n* Syntaxe un peu particulière: \n  * Une barre verticale est insérée après le nom de l'option.\n  * Le résumé ou la description est sur la ligne suivante avec avec au moins un espace.\n  * On ne peut pas mettre simultanément un résumé et une description.\n  * Différence entre les deux? Un résumé à un titre, par défaut **ABSTRACT**.\n  \n* Option pour un résumé: **`abstract: |`**\n* Option pour une description: **`description: |`**\n\n```{.yaml}\n---\nabstract: |\n Résumé de mon document\n---\n```\n\n```{.yaml}\n---\ndescription: |\n Description de mon document\n---\n```\n\n\n#### Modification du grid de la page  \n\n* Un document html comprend 3 colonnes:\n  * A gauche la **sidebard**. Vide dans un document simple, elle permet de mettre un menu ou un chapitrage pour des contenus de type website ou book. Cette colonne renverra donc vers d'autres document .qmd\n  * Au centre le **body** qui comprend le contenu du document.\n  * A droite la **margin** qui comprendra la table des matières du document, éventuellement des reports d'output (graphiques/images, tableaux, notes...).\n* Depuis la version 1.35 il est possible de modifier la largeur de ces trois colonnes.  \n\n\n::: {.box_img} \n![Doc quarto - grid par défaut](https://quarto.org/docs/output-formats/images/grid.png){width=70%   #fig-gridhtml}\n:::\n\n\n* La modification du grid se fait dans le yaml avec l'option **`grid`** en sous-option du format html. \n* Les largeurs (maximales) des 3 colonnes de grid peuvent être modifiées avec 3 sous options. Avec les valeurs par défaut: \n  * `sidebar-width: 250px`\n  * `body-width:    800px`\n  * `margin-width:  250px`\n* Il y a également un espace entre les colonnes, avec une valeur commune (option `gutter-width`). Toujours par défaut: \n  * `gutter-width: 1.5em`\n\nAttention, ce ne sont pas des largeurs absolues mais des largeurs maximales. Selon le contenu présent dans le document ou le site web (table des matières, chapitrage ou liens dans la sidebar à gauche) les largeurs seront adaptées.\n\nDonc dans le yaml de chaque document, on aurait donc par défaut : \n\n```{.yaml}\n---\ntitle: \"Grid par défaut\"\n\nformat:\n  html:\n    grid:\n      sidebar-width: 250px\n      body-width:    800px\n      margin-width:  250px\n      gutter-width:  1.5em\n---\n```\n\nSi on veut modifier les valeurs maximales largeurs, par exemple en baissant celle de la colonne de gauche (vide), et en augmentant celle des deux autres, tout en ajoutant une table des matières à droite et en sachant qu'il n'y a pas de contenu dans la colonne de gauche (sidebar):\n\n```{.yaml}\n---\ntitle: \"Modification du grid\"\n\nformat:\n  html:\n    grid:\n      sidebar-width: 20px\n      body-width:    1200px\n      margin-width:  550px\n      gutter-width:  1.5em\n\ntoc: true\n---\n```\n      \n\n\n::: {layout=\"[50,50]\" layout-valign=\"bottom\"}\n::: {.box_img}\n![Grid par défaut](img1/html3.png){group=\"groupe2\"}     \n:::\n\n::: {.box_img}\n![Grid modifié](img1/html4.png){group=\"groupe2\"}   \n:::\n:::\n  \n### Thèmes\n\n\nJuste une courte introduction, on abordera pas ici directement la question des fichiers .css et .scss ([#sec-scss]).     \nIls peuvent néanmoins être créés et utilisés pour modifier un thème sélectionné.\n\n\n* Quarto comme Rmarkdown utilise les thèmes de type **html bootstrap** et plus particulièrement les 26 proposée gratuitement par le site: [**bootswatch**](https://bootswatch.com/). \n  * Le thème bootstrap html5 (défaut).\n  * Les 25 thèmes gratuits par bootswatch. \n  * On peut visualiser les rendus des différents thèmes. Par exemple le theme [vapor](https://bootswatch.com/vapor/).\n  * Tous les fichiers css sont disponibles et téléchargeables, ce qui facilite une customisation du thème choisi via des éléments css ou des variables SAS (scss).\n* En nombre limité, des extensions proposent des thèmes : **bookup** de Julien Barnier, thème institutionnel de  l'**INRAE**...\n\n**Visualisation des thèmes**     \n\nLe thème par défaut est *default* html 5 [Lien](https://bootswatch.com/default/).  \n\n**Syntaxe**    \n\nOn change le thème en sous option de celle du format html avec `theme: nom_theme`.  \n\n```{.yaml}\n---\ntitle: \"Changement theme\"\n\nformat:\n  html:\n    theme: nom_theme\n---\n```\n\n\n::: {layout=\"[50,50]\" layout-valign=\"bottom\"} \n::: {.box_img}\n![Thème par défaut: [lien](https://bootswatch.com/default/)](img1/html5.png){group=\"groupe3\"}       \n:::\n::: {.box_img}\n![Thème superhero [Lien](https://bootswatch.com/superhero/)](img1/html6.png){group=\"groupe3\"}   \n:::\n:::\n\n## Présentation revealjs {#sec-reveal}\n\n* Remplace deux formats de présentation html de Rmarkdown.\n* Beaucoup d'options, plus ou moins gadget.\n\n* Voir court support qui reprend les élements qui vont suivre mais dans ce format: <https://mthevenin.gitlab.io/quarto_revealjs/>\n\n### Les blocs de code\n\n#### Activer leur affichage\n\n**Par défaut les codes ne sont pas affichés**:\n\n* Pour les afficher par défaut, renseigner dans le yaml :  `echo: true` ou `code-fold: true`.\n\n* Ou jouer avec ces deux options dans chaque bloc individuellement.\n\n \n#### Line highlight \n\n* Options qui permet de mettre en avant une ou plusieurs lignes d'un programme dans un bloc et de naviguer entre ces lignes.\n* Option ***`code-line-numbers:`\"valeurs_lignes\"**\n\n```{{r}}\n#| code-lines-numbers: \"choix ligne(s)\"\n\n# programme\n```\n\n* Par exemple:\n    - \"2\" ligne  1.\n    - \"2,5\" lignes 2 et 5.\n    - \"2-5\" lignes 2 à 5.\n    - \"|2|4\" toutes les lignes, puis ligne 2, et enfin ligne 4 \n\n\n```{{r}}\n\n#| eval: false\n#| code-line-numbers: \"|1|4|6\"\n\ndata(\"mtcars\")          \nx <- mtcars$wt         \ny <- mtcars$mpg         \nplot(x, y) \nz <- mtcars$disp\nplot(x, z) \n```\n\nDonne la séquence suivante:  \n\n:::: {layout=\"[25,25,25,25]\" layout-valign=\"bottom\"} \n::: {.box_img}\n![toutes le lignes](img1/reveal1.png){group=\"reveal1\"}\n:::\n::: {.box_img}  \n![Ligne 1](img1/reveal2.png){group=\"reveal1\"}\n:::\n::: {.box_img} \n ![Ligne 4](img1/reveal3.png){group=\"reveal1\"}\n:::\n::: {.box_img}\n ![Ligne 4](img1/reveal4.png){group=\"reveal1\"}\n:::\n::::\n \n   \n#### Code animation   \n    \n* Permet d'afficher un programme par bloc successif.\n* Chaque bloc est généré dans une slide.  \n* Pour un bon rendu, le bloc  doit être sur la même ligne sur chaque slide. Important.\n* Pour réaliser cette *animation* on utilise dans le titre des slide, l'option **`{auto-animate: \"true\"}`**:  `# Titre slides {auto-animate: \"true\"}`  \n \n::: {.center} \n::: {.box_img}  \n![](img1/reveal5.png){width=70%}  \n:::\n:::\n\n\n### Eléments d'affichage et de mise en page\n\n#### Liens\n\n* L'affichage du contenu d'un lien est insérée dans la présentation, mais avec la possibilité de fermer directement la page ouverte (croix en haut à droite) et d'ouvrir le lien dans un onglet différent.\n\n* Dans le yaml, on active cette option avec **`preview-links: true`**. Je conseille cette activation si la présentation comporte des liens externes.\n \n\n#### Affichage incrémental des éléments d'une liste  \n\n***Option `incremental`***\n\n* Dans le yaml on peut l'activer pour toutes les listes:\n\n```{.yaml}\n---\nformat:\n  html:\n    incremental: true\n---\n```\n\n* Dans chaque liste on peut l'activer ou la désactiver avec une classe css:\n  * activation: **`::: {.incremental}`**\n  * désactivation: **`::: {.nonincremental}`**\n  \n```{.mf}\n\n::: {.incremental}\n\n* ligne 1 \n* ligne 2\n* ligne 3\n\n:::\n```\n\n\n#### Affichage dynamique d'une liste \n\n* On peut ajouter un effet aux éléments d'une liste  qui apparaissent de manière successive  avec la classe  css `{.fragment option}`. On lui ajoute  une autre classe css selon l'effet recherché, par exemple: \n  * `{.fragment .fade-up}`\n  * `{.fragment .fade-left}`  \n\n[[Liste des effets]](https://quarto.org/docs/presentations/revealjs/advanced.html#fragment-classes)  \n  \n \n\n#### Réduction l'affichage du texte\n\n* Dans le titre de la slide, on introduit la classe css **`{.smaller}`**\n* Par exemple: \n  * `## Réduire la taille d'affichage d'une slide {.smaller}`\n* Sera également appliqué aux blocs de code.\n  \n\n::: {layout=\"[50,50]\" layout-valign=\"bottom\"} \n::: {.box_img} \n![Défaut](img1/reveal6.png){group=\"reveal2\"}    \n::: \n::: {.box_img}\n![Avec `{.smaller}`](img1/reveal7.png){group=\"reveal2\"}       \n:::\n::: \n\n     \n#### Dépasser la limite verticale des slides\n\n* Option très pratique.\n* On peut contourner la limite verticale des slides en faisant défiler son contenu vers le bas.\n* Dans le yaml de la présentation, on utilise l'option **`scrollable: true`** en sous option du format revealjs\n\n```{.mf}\nformat:\n  revealjs:\n    scrollable: true\n```\n\n\n#### Faciliter la mise en page d'une slide \n\nPlusieurs possibilités:  \n\n* Utiliser des onglets: `{.panel-tabset}` ([@sec-tabset])\n  * Un programme et son output dans une même slide:\n\n```{.mf}\n::: {.panel-tabset}\n### Programme \n<progamme>\n\n### output\n<output: graphique, tableau de résultat, extrait base de données>\n\n:::\n```\n\n\n* Utiliser un affichage en 2 colonnes:  `{.columns}` et `{.column}` ([@sec-column])\n  * Par exemple deux listes: \n\n```{.mf}\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n* item11\n* item12\n* item13\n\n:::\n\n::: {.column width=\"50%\"}\n\n* item21\n* item22\n* item23\n:::\n\n::::\n```\n\n* Utiliser l'option **`#| output-location: option`**\n  * En option du bloc de code. \n  * Adapté à une mise en page avec report du programme et de son output.\n  * Plusieurs options: \n    * `column`: à droite.\n    * `fragment`: en dessous avec touche {{< fa solid arrow-right >}}.\n    * `column-fragment`: à droite avec touche {{< fa solid arrow-right >}}  [la meilleure à mon sens].\n    * `slide`:  slide suivante\n\n\n```{{r}}\n#| eval: false\n#| output-location: column-fragment\n\ndata(\"mtcars\")               \nx <- mtcars$wt                     \ny <- mtcars$mpg              \nplot(x, y)                   \n```\n\n\n\n::: {layout=\"[50,50]\" layout-valign=\"bottom\"} \n::: {.box_img} \n![A l'ouverture de la slide](img1/reveal8.png){group=\"reveal3\"}     \n:::\n::: {.box_img} \n![Après avoir appuyé sur la touche **->**](img1/reveal9.png){group=\"reveal3\"}      \n:::\n:::\n\n\n#### Thème et couleur du fond\n\n* Thème:  \n  * Comme pour un document ou website html, plusieurs thèmes disponibles. [[Lien]](https://quarto.org/docs/presentations/revealjs/themes.html#using-themes).\n  * On peut les modifier en associant un .css et/scss au fichier qmd.\n  * Si on choisit le thème **dark**, fans le yaml:  \n\n```{.yaml}\n---\nformat: \n  revealjs:\n    theme: dark\n---  \n```\n\n\n* Changement de la couleur de fond s'une slide:   \n  Au titre de la slide ajouter:  `{background-color=couleur}`\n   * Un code hexadécimal.\n   * Une couleur css prédéfinie [[lien: liste nom couleur css dans **couleur nommée**]](http://www.proftnj.com/RGB3.htm)].\n\n*Exemple avec code hexadécimal ou nom css pour une même couleur*:   \n\n* **`## Titre slide {background-color=\"darkturquoise\"} `**.\n* **`## Titre slide {background-color=#00CED1} `**.\n\n#### Divers\n\n* Plusieurs options dans le titre de la slide:\n  * Les ajouter dans une même accolade.\n  * {.smaller} + {background color..} => `## Titre {.smaller background-color=#00CED1 }`.\n\n\n* Ajouter des numéros aux slides\n  * Dans le yaml, ajouter l'option **`slide-number:true`**\n  \n\n\n",
    "supporting": [
      "032-html_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}