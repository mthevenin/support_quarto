{
  "hash": "9b8fec71eb76dffb2b682b7f1d765eb5",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfig-cap-location: top\ntbl-cap-location: bottom\n\nformat:\n  html: \n    code-tools:\n      source: true\n---\n\n\n\n# Les blocs de codes\n\n\n::: callout-important\n\n## Format revealjs et pdf\n\n* Les éléments de cette section sont 100% compatibles pour un format de type page html. \n\n**Présentation revealjs**\n\nPour le format de présentation de type **revealjs**, également compilé en html, on note quelques différences:  \n\n* Options par défaut différentes, par exemple compte tenu de la contrainte liée à la taille d'une slide, les blocs de codes ne sont pas par défaut reportés (`echo: false`).\n\n* L'option permettant d'ouvrir la source du fichier qmd n'est pas disponible (**</> Code**). On pourra mettre un lien sur chaque slide renvoyant vers le .qmd stocké dans le dépôt gitub et gitlab.\n\n*  Pour compenser, le format revealjs a quelques options propres intéressantes, en particulier lorsque la présentation est un support de formation sur un outil comme R: \n   * **Code animation**: affichage successif de plusieurs sous blocs d'un programme dans un seul bloc.\n   * **Line Highlight**: mise en valeur d'une ou plusieurs lignes du programmes.    \n    \n Pour ne pas alourdir cette page, ces différences seront traités dans le chapitre sur les formats du support principal [[@sec-reveal]] et dans la présentation du revealjs dans ce même format  [[Lien]](https://mthevenin.gitlab.io/quarto_revealjs/#/title-slide).    \n \n**Format pdf**  \n\n* Tous les éléments de type dynamique comme cacher/ouvrir un bloc ne sont bien évidemment pas possible avec le format pdf.\n* Mettre un titre à un bloc est possible mais le rendu est à ce jour pas satisfaisant.\n\n:::\n\n## Introduction\n\n* ***Chunk***, ***Code block***, ***cells***: des expressions différentes qui expriment la même chose\n  * **Chunk**: RStudio/Rmarkdown.\n  * **Code block**: Quarto.\n  * **Cells**: terme générique aux notebooks, par exemples Jupyter ou plus récemment Observable pour la visualisation typée javascript. Succession de cellules sous forme de texte formaté ou non, et de scripts (R, Python,...).\n  \nPour les fichiers Rmarkdown (.rmd) ou Quatro (.qmd), le texte n'est pas inséré sous forme de cellules mais dans un éditeur, avec deux options: une en mode  *source* (balisage markdown/html) ou mode *visual*.  \n\n::: callout-note\nBien que je n'en vois pas (encore) forcément l'intérêt direct pour une programmation R, il est possible d'insérer directement un notebook ou un fragment de notebook Jupyter dans Quarto. [[lien]](https://quarto.org/docs/authoring/notebook-embed.html).\n:::\n\n* **Création d'un bloc de codes**\n\n\n* Il est ouvert et fermé par ` ``` `\n\n* **Ajout d'un moteur de calcul ou d'un autre langage** (type texte):\n  * A l'ouverture, le moteur est renseigné dans des accolades: **` ```{nom_moteur}`**\n  * On peut ajouter des options: **` ```{nom_moteur, options}`**\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Code R\n\n1+1\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note collapse=true}\n\n### Moteurs de calcul\n\nLes moteurs R, Python et Julia sont directement utilisables dans Quarto comme dans les dernières versions de Rmarkdown. Via les noyaux Jupyter, on peut utiliser d'autres applications. Par exemple avec Stata^[c'est pour l'Ined], après avoir installé le noyau Jupyter [**nbstata**](https://mthevenin.github.io/stata_fr/articles/index/posts/nbstata/nbstata.html) et ajouté l'option **`jupyter: nbstata`** au yaml, on peut exécuter directement Stata dans Quarto. Au cas où: c'est un logiciel propriétaire, donc il faut une version qui supporte Python (v17 minimum). \n\n```{.yaml}\n---\ntitle: \"Quarto et Stata\"\njupyter: nbstata\n---  \n```\n\n:::\n\n\n## Options des blocs \n\n### Introduction des options\n\nLes options peuvent être activées dans le yaml et/ou dans le bloc de code. La nouveauté avec Quarto et les versions récentes de rmarkdown est de pouvoir renseigner les options directement dans le corps du bloc. Cette pratique est recommandée.\n\n\n**Dans le yaml**\n\nOptions s'appliquant à tout les blocs du document. Dans un projet avec un fichier de configuration `_quarto.yml`, les options d'un document peuvent contredire celle qui s'applique à tous les documents du projet. Celles du document ont auront au final la priorité sur celles du projet:\n\n***Exemple***: si dans le yaml du projet le report des blocs de codes sont désactivées (`echo:false`), on peut réactiver l'option dans le yaml d'un document particulier avec `echo: true`.\n\n \n```{.yaml filename=\"Dans le fichier _quarto.yml\"}\n---\nexecute:\n  echo: false\n---  \n\n``` \n \n \n```{.yaml filename=\"Dans le Yaml d'un document\"}\n---\nexecute:\n  echo: false\n---  \n\n```\n \n**Dans le bloc de codes**  \n\n* Pour les options communes à Quarto et Rmarkdown, la méthode ` ```{r, options} ` fonctionne toujours.\n\n* ***Nouveauté de Quarto et des versions récentes de rmarkdown***: on peut insérer les options directement dans le corps du programme. \n\n* Cette nouvelle possibilité prend simplement la forme d'un commentaire introduit par **`#|`** au début du bloc: \n   * **Syntaxe `|# option: true/false/expression/none/valeur_numérique...`**.\n   * Les arguments `true`/`false` peuvent être mis en minuscule ou majuscule contrairement aux options renseignées directement dans la déclaration du moteur, qui sont en majuscules.\n    \nAvec cette nouvelle méthode.  \n\n```{{r}}\n#| option1:...\n#| option2:...\n#| option3:...\n\n# Code R\n\n```\n\n\n**Exemple**: pour supprimer l'exécution du programme dans le bloc avec l'option `eval: FALSE/false` \n\n* n option de l'ouverture du moteur: ` ```{r, eval: FALSE}`\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r, eval=FALSE}}\n# On fait une addition\n1+1\n```\n````\n:::\n\n\n* ***Dans le corps du bloc***:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: false\n\n# On fait une addition\n1+1\n```\n````\n:::\n\n\nDonne également:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# On fait une addition\n1+1\n```\n:::\n\n\n\nDans le yaml du document ou du projet, cette option d'exécution est introduite par l'option  **`execute`**:\n\n```{.yaml}\n---\ntitle: \"XXXXXXXX\"\n  \nexecute:\n  eval: false\n---\n```\n\n\nElle s'appliquera donc par défaut à tous les blocs, mais on pourra revenir en arrière (`#| eval: false`) pour des blocs individuels.\n\n\n### Options d'exécution et de report des résultats\n\nLes principales options sont: \n\n* `eval`:true/false.  \n  * Exécution du programme. Si `false`, le programme est un simple verbatim.\n  * Par défaut true.\n\n* `echo`: true/false/fenced^[Merci Quarto pour le nouvel attribut `fenced` utilisé massivement pour ce chapitre. Pour ce genre de documentation technique permet de reporter, sans exécution du programme, l'ensemble du bloc avec les balises d'ouvertures et de fermeture ` ``` `.]\n  * Report du programme dans le document.\n  * Par défaut `true` **à l'exception du format revealjs** (important).\n\n* `warning` et `message`: true/false. \n  * Affiche les messages et les warning de l'output.\n  * par défaut `true`.\n\nDans le yaml on aurait par défaut (sauf revealjs): \n\n```{.yaml}\n---\ntitle: \"XXXXXXXXX\"  \n  \nexecute: \n  eval: true\n  echo: true\n  warning: true\n  message: true\n---\n```\n\n<br>\n\n**Enregistrer et réutiliser les outputs (résultats) d'un bloc de code**  \n\n* Permet de racourcir la durée de compilation d'une page.\n\n* Certains outputs comme des graphiques peuvent mettre du temps à être exécuté.\n\n* S'il n'ont pas été modifiés, on peut les enregistrer afin qu'ils soit directement ajoutés au document sans nouvelle exécution du programme.\n\n* Option **`cache:true/false`**.\n  * Directement dans le yaml du document: **`cache: true`**.\n  * Au choix dans un bloc de code:  **`#| cache: true`**.\n\n\n**Reporter automatiquement un résultat dans le corps du document**  \n\n* On peut également dans le corp du document reporter directement un résultat en utilisant un fragment de code, souvent de type objet:\n\n  * ``` `{moteur} fragment_code` ```\n\n**Exemple**:\n\n* On calcule une moyenne dans le bloc de code: \n\n```{.mf}\nval = c(10,15,5,2,12,7)\nmoy = mean(val)\n  \n```\n\n\n* Programme qui calcule une moyenne :\n\n\n\n::: {.cell}\n\n```{#lst-code .r .cell-code  lst-cap=\"Calcul moyenne\"}\nval = c(10,15,5,2,12,7)\nmoy = mean(val)\n```\n:::\n\n\n\nOn reporte directement la moyenne dans le corp du texte: \n\n![](img1/inline.png)\n\n::: {.box_img}\nLa moyenne est de **8.5**.\n:::\n\n\n### Graphiques et tableaux  \n\n\n::: callout-warning\n\n### Certaines options seulement dans le yaml?  \n\nLa documentation n'est pas forcément très claire sur certaines options. A la rédaction de ce support, j'avoue m'emmêler un peu sur certaines .  \n<br>\nDes options ne semble donc pas s'activer pour les graphiques et les tableaux lorsqu'elle sont passées dans le bloc: par exemple `fig-cap-location` pour le positionnement vertical du titre ou `fig-align` pour la positionnement horizontal... mystère. On peut visiblement seulement les passer dans le yaml, ce qui permet cependant d'obtenir une mise en page homogène d'un document.\n:::\n\n\n#### Graphiques\n\n* [[Doc Quarto: Options1]](https://quarto.org/docs/reference/formats/html.html#figures)\n* [[Doc Quarto: Options2]](https://quarto.org/docs/computations/execution-options.html#figure-options)\n\n* Les options sont introduites par `fig-`: `fig-nom_option`^[rmarkdown: `fig.nom_option`]\n\n**Exemple: Titre et son positionnement**   \n\nPar défaut les titres sont positionnés en dessous du graphique.\n\n* Positionnement: dans le yam `fig-cap-location`: `bottom` (défaut) / `top` / `margin` (à droite du graphique sous la table des matières si elle est activée).\n* Titre: `fig-cap: \"XXXX\"`.\n\nLocalisation en haut du graphique:\n\n```{.yaml}\n---\nfig-cap-location: top\n---\n```\n\nLe titre du graphique:  \n\n```{.mf}\n#| fig-cap: \"**Position top du titre défini dans le yaml**\"\n\ndata(\"mtcars\")\nx <- mtcars$wt\ny <- mtcars$mpg\nplot(x, y) \n```\n\n\n<center>\n::: {.column width=\"70%\"}\n::: {.box_img}\n\n::: {.cell}\n::: {.cell-output-display}\n![**Position top du titre défini dans le `yaml`**](015-codes_files/figure-html/fig-scatter_cars-1.png){#fig-scatter_cars width=672}\n:::\n:::\n\n:::\n:::\n</center>\n\n\n**Remarque**: on peut utiliser du formatage markdown dans le titre.  \n\n#### Tableaux\n\nAttention, il ne s'agit pas des tableaux générés directement en markdown.    \n\nLes options sont introduites par `tbl-nom_option`.    \nPeu d'options, à retenir principalement le titre avec `tbl-cap: \"XXXX\"`\n\n* [[Doc Quarto: Options]](https://quarto.org/docs/reference/formats/html.html#tables)\n\nLe titre est ici positionné en haut du tableau par défaut. Si on veut le mettre sous le tableau, dans le yaml du document: `fig-cap-location: bottom`.\n\nChangement de la position du titre dans le yaml:\n\n```{.yaml}\n---\nfig-cap-location: bottom\n---\n```\n\nTitre du tableau dans le bloc^[L'option `tbl-label:` est explicité dans la section dédiée aux [références croisées](https://mthevenin.gitlab.io/support_quarto/053-cross_ref.html)]:\n\n```{.mf}\n#| tbl-cap: \"Base voitures\"\n#| label: \"tbl-mtcars_df\"\n\ndata(\"mtcars\")\nknitr:: kable(head(mtcars[, 1:4]))\n```\n\n\n::: {.box_img}\n\n::: {#tbl-mtcars_df .cell tbl-cap='Base voitures'}\n::: {.cell-output-display}\n\n\n|                  |  mpg| cyl| disp|  hp|\n|:-----------------|----:|---:|----:|---:|\n|Mazda RX4         | 21.0|   6|  160| 110|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110|\n|Datsun 710        | 22.8|   4|  108|  93|\n|Hornet 4 Drive    | 21.4|   6|  258| 110|\n|Hornet Sportabout | 18.7|   8|  360| 175|\n|Valiant           | 18.1|   6|  225| 105|\n\n\n:::\n:::\n\n:::\n\n## Options propres à Quarto\n\n\n* Quarto a introduit une série de nouvelles options propres aux outputs **html**, spécifiques ou non au yaml. \n* Dans le yaml, ces options sont des sous options du format html. \n\nDemonstration (cliquer sur **`<> Code`** en haut à droite, ou sur **Code** au dessus du du résultat:    \n\n::: {.center}\n::: {.box_img}  \n<iframe width=\"650\" height=\"500\" src=\"files/ctools1.html\" title=\"options blocs de code\" name=\"deploy_page2\"></iframe>\n:::\n:::\n\n\n### Afficher/cacher le bloc de codes à la volée\n\n* Option `code-fold`** (yaml et corps de bloc).  \n\n* Dans le yaml: \n  * **`code-fold: false/true/show`**\n  * Par défaut l'argument est `false`.\n  * Si `true`: par défaut les blocs sont cachés et on peut les ouvrir individuellement.\n  * Si `show`: par défaut les blocs sont ouverts et on peut les cacher individuellement.\n\n```{.yaml}\n---\nformat:\n  html:\n    code-fold: true\n---\n```\n\n* Dans le bloc de code: **`#| code-fold: false/true/show`**\n\nExemple (pour un bloc):  \n\nSi `#| code-fold:true`\n\n\n```{.mf}\n#| code-fold: true\n\n1+1\n\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\nSi `#| code-fold:show`\n\n```{.mf}\n#| code-fold: show\n\n1+1\n\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n### Afficher le code source du fichier\n\n* Introduit pas la sous option **`code-tools`** du format html dans le yaml. \n* Non compatible avec le format de présentation **revealjs**...dommage.\n\n```{.yaml}\n---\nformat:\n  html:\n    code-tools: true\n---\n```\n\nActive l'ouverture dans une fenêtre du code source du fichier .qmd (sous option `source`).\n\nEquivalent à: \n\n```{.yaml}\n---\nformat:\n  html:\n    code-tools:\n      source: true\n---\n```\n\n\nSi l'option `code-fold:true` est activée, un onglet sera généré en haut et à droite de la page permettant d'afficher le code source .qmd et gérer à la volée l'affichage par défaut des blocs de code.\n\n```{.yaml}\n---\nformat:\n  html:\n    code-tools:\n      source: true\n    code_fold: true\n---\n```\n\n\n### Accéder à la documentation des fonctions \n\n* Pour R seulement. Implémentation dans Quarto du package [downlit](https://downlit.r-lib.org/).\n* Permet d'accéder à la documentation en ligne d'une fonction utilisée dans le programme.\n* Dans le yaml du document: **`code-link: true`**.\n\n\n### Titre du bloc, Annotation et titre du bloc\n\n\n#### Commenter une ou plusieurs lignes de programme: **`annotation`**\n\nTrès utile pour documenter des lignes de programme.\n\n* Depuis la version 1.3, Quarto a implémenté une fonctionnalité d'annotation des programmes. Elle permet de commenter une ou plusieurs lignes du programme contenu dans un bloc.\n\n\n- A la fin d'une ligne on indique un numéro de l'annotation avec **`#<numero>`**\n- Après la fermeture du bloc avec ` ``` `, on rédige le commentaire pour chaque ligne avec:  \n  `numero. commentaire...`\n  \nExemple: \n\n* Dans le bloc de code:\n\n![](img1/annotation.png)\n\n\n* Dans le corp du texte, juste sous le bloc de codes:\n\n```{.mf}\n1. J'ouvre la base mtcars.\n2. Je récupère les variables wt (x) et mpg (y).\n3. J'exécute un scatter plot.\n```\n\nRésultat:\n\n::: {.column width=\"70%\"}\n::: {.box_img} \n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"mtcars\")          #<1>\nx <- mtcars$wt          #<2>\ny <- mtcars$mpg         #<2>\nplot(x, y)              #<3> \n```\n\n::: {.cell-output-display}\n![](015-codes_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n1. J'ouvre la base mtcars  \n2. Je récupère les variables *wt* (x) et *mpg* (y)  \n3. J'exécute un scatter plot   \n:::\n:::\n\n\n***Remarques***:  \n\n* Pour les documents en format html (notebook, revealjs), on peut afficher de manière dynamique les commentaires. Dans le yaml: \n  * **`code-annotation: hover`**: le commentaire est affiché lorsqu'on passe avec la souris sur la ligne. commentée.\n  * **`code-annotation: select`**: le commentaire est affiché lorsqu'on clique sur le numéro du commentaire à droite de la ligne.\n  \n* Pour les formats non dynamiques (pdf, word...) seulement l'option statique est disponible. Dans le yaml elle correspond à l'option: **`code-annotation: below`**\n* Il n'est pas possible de sélectionner le type d'affichage du commentaire pour chaque bloc individuellement. \n  \n  \n  \n####  Ajouter un titre au bloc de code \n\nPour finir, et à mon sens pas si gadget que cela, on peut ajouter un titre au bloc de code avec l'option `filename=\"XXXXX\"` directement à la suite du choix du moteur (fonctionne avec r et python:  ` ```{{r filename=\"titre\"}}`\n\n\n\n\n````{.default}\n```{r filename=\"On va faire une addition\"}\n1+1\n```\n````\n\n::: {.cell filename='On va faire une addition'}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\nPour le format PDF le rendu n'est pas terrible, je ne conseille pas de l'utiliser pour une documentation \n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "015-codes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}