{
  "hash": "5dfea6a92686c4144e214b3f4f5217ae",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - nutshell\n---\n\n\n# Installation et connection\n\n## Introduction\n\nAyant une utilisation assez minimale de git, et plutôt réservée au partage de documentation, je recommande fortement de lire le support réalisé par l'Insee dans la documentation **UtilitR**, indéxé dans la partie **Gallery** du site de Quarto.\n<https://www.book.utilitr.org/03_fiches_thematiques/fiche_git_utilisation>. \n\n### Principes et atouts de Git\n\n[[:GIT WIKI](https://fr.wikipedia.org/wiki/Git)]{.nut}\n<br>\n\n\nSur son utilisation le plus courante et là où il est le plus documenté, l'outil Git permet de réaliser des opérations entre fichiers stockés dans un répertoire local (ou de travail) et un répertoire - plus ou moins - *distant* (**remote**). Dans un travail en équipe, sous cet aspect \"*cloud*\" , il permettra donc relier plusieurs utilisateurs sur un même projet. Sous son aspect originel de logiciel de contrôle de versions, ces opérations se feront sur des éléments ayant fait l'objet d'un changement entre deux temps choisis par l'utilisateur. \n\nAttention l'outil git est totalement indépendant des plateformes^[On parle également de forge] qui font sa popularité, on peut travailler exclusivement en local sur une même machine, en choississant un répertoire de travail/développement et un répertoire qui fera seulement office de stockage à un instant t. Mieux encore, sans logique de transferts et sous le seul angle de contrôle de versions d'un ou plusieurs fichiers, n'importe quel répertoire de travail peut être ***gité***^[j'ai pas trouvé mieux] pour contrôler toutes les étapes de développement d'un projet.\n\nCette partie s'inscrivant dans un support dédié à la construction d'une documentation avec un outil de *programmation lettrée *, on n'abordera donc pas toutes les possibilités et les manipulations offertes par git. C'est donc plutôt sous l'angle d'opérations de transferts de fichiers pour déployer un contenu Quarto qu'est abordé cette partie.\n\n\nAtouts: \n  \n- Les opérations de transferts sont effectuées sur des **deltas**, c'est à dire sur des modifications qui ont été déclarées par l'utilisateur à un instant t (**commit**). Ces modifications prennent la forme de  **création**, **suppression** ou **changement du contenu** de fichiers. \n\n- On peut exclure des fichiers de ces opérations de versionnage et de transferts. \n\n- Git permet de garder la trace de toutes les modifications apportées à des fichiers: \n\n  - Historique des opérations récupérées sous forme d'une timeline, dont la nature de la modification est indiquée par un titre. Attention ces traces ne sont pas effectuée pas les enregistrements de fichiers mais par une opération spécifique et engendrée par l'utilisateur. Dans le jargon git, cette opération est appelée **commit**. Le versionnage se fera entre 2 **commits** même si ces fichiers ont été enregistrés de multiples fois entre ces deux temps.\n  \n  - On peut accéder à tous les éléments modifiés. Si on supprime un fichier, git considérera qu'on a supprimé l'ensemble du texte d'un fichier et non physiquement un fichier. On pourra accéder à tout moment à la totalité du texte supprimé via la suppression du fichier.\n  \n  - La visualisation des modifications intervenues dans des fichiers est facilitée par des codes couleurs: [**Rouge**]{style=\"color:#dc3545\"} pour l'état au commit précédent, [**Vert**]{style=\"color:#198754\"} pour l'état  au nouveau commit. \n\n- **Les branches**: Dans un répertoire versionné par git, une branche dite principale automatiquement créée (**main** ou **master**^[L'assassinat de Georges Floyd en 2020 est passé par là]). On peut créer et travailler sur des branches parallèles et contrôler la fusion des éléments modifiés avec la branche principale. Dans un travail collaboratif via une opération de clonage, le/la propriétaire du dépôt distant sera en charge de valider et de réaliser ces opérations de fusion avec la branche principale. Toutes ces opérations seront également indéxées dans le versionnage, et on pourra suivre l'historique de création, modification et fusion des branches secondaires avec la branche principale.\n\n- **Les conflits**: oui c'est un atout de git... \n\n\n\n::: callout-note\n\n#### Clonage et duplication\n\nEn collaboratif la branche principale est clonée par les personnes participant au projet, le *propriétaire* du répertoire distant donnant les autorisations dans ce sens aux autres participant.e.s. Le travail sur branches sera ici plus que recommandé, en particuliers lorsque plusieurs personnes travailleront sur un même fichier. Le propriétaire du dépôt réalisera les fusions, et donc la mise à jour de la branche principale. Sur les célèbres plateformes, si le dépôt est public il pourra être librement cloné.\net également un trav\nGit permet aussi un travail collaboratif plus ouvert, hors équipe, en donnant la possibilité à quiconque de proposer une modification. Le répertoire (public) pourra être dupliqué (**fork**). Les modifications des fichiers seront systématiquement envoyés sur une branche secondaire du dépôt distant. Au propriétaire de les accepter ou non.\n\n:::\n\n\n### Github versus Gitlab\n\n#### Github \n\n[[:GITHUB WIKI](https://fr.wikipedia.org/wiki/GitHub)]{.nut}\n\n* Propriété de Microsoft depuis 2018. Risque de tout perdre si Microsoft décide de supprimer l'outil. L'exemple de l'IDE Atom supprimé en 2019 après son rachat est un cas d'école récent. \n\n  * Seulement sur le site plateforme. Pas de récupération posible du code source pour installer un git local ou institutionnel (Humanum, Insee, Service informatique de l'Ined...). \n  \n* Fonctionnalités clés en main, plus facile d'accès *a priori* pour les personnes moins à l'aise avec le jargon informatique.\n  * A noter l'existence d'un outil appelé **Github Desktop** qui facilite la réalisation les opérations git de base, avec en plus la possibilité de switcher à la volée d'un projet à un autre. A titre personnel, je réalise toutes les opérations avec mes depôts Github à l'aide de ce **github desktop**.\n  \n* Quarto ou plutôt Posit en général joue la carte 100% Github avec l'intégration d'outils dédiées. Plus généralement les package R pour faciliter la connection initiale entre RStudio et un compte sur une plateforme git sont pensés pour fonctionner avec cette plateforme. Avec le package **`usethis`** on peut générer un dépôt github sans passer par la case clonage, et donc par la création du dépôt sur la plateforme au préalable.\n\n* Du côté moins, en mode **private** (restreint) on ne peut pas déployer de pages sans passer à la caisse. C'est très ennuyeux.\n\n* Du côté plus, toujours en mode **private** Github ne limite pas (encore) le nombre de collaboration. Sur Gitlab, ce nombre a été récemment limité à 5 personnes.\n\n#### Gitlab \n\n[[:GITLAB WIKI](https://fr.wikipedia.org/wiki/GitLab)]{.nut}\n\n* Même si la composition du capital peut faire grincer quelques dents, Gitlab reste relativement indépendant d'un géant comme Microsoft.\n\n* Récupération du code source de Gitlab, ce qui rend possible la création d'une plateforme Git sur un serveur institutionnel . \n\n* Pour le déploiement de contenu type html/Qharto, on aura quelques étapes supplémentaires à réaliser.  \n  \n* Côté plus, en mode private on peut déployer des pages sans passer à la caisse contrairement à Github. On peut également gérer très librement ses adresses url. C'est top.\n\n* Côté moins, toujours en mode private, forte limitation du nombre de collaborateurs à 5 (anciennement 10). C'est ennuyeux. \n\n* Retour d'expérience un peu désagréable: avec un compte strictement individuel, possible prise contact par l'équipe commerciale de Gitlab, avec relances si on ne souhaite pas donner suite à leur proposition de rendez-vous.\n\n\n## Installation \n\n* Git étant indépendant des fameuses plateformes Github et Gitlab, il doit être installé. Mais peut-être est-il déjà installé? C'est normalement le cas avec RStudio. Je conseille néanmoins d'installer la dernière version de git directement, ce qui permettra également de l'utiliser en dehors de RStudio.\n  * Vérification dans un terminal (dont Rstudio):  `git --version` \n  * Sinon téléchargement sur le site officiel: <https://git-scm.com/download/>\n  \nAprès l'installation ou la vérification de l'installation de Git: \n\n* Ne pas oublier d'associer git à une adresse mail, et accessoirement à votre civilité ou à un avatar.\n\nDans un terminal (Rstudio, invite commande windows,...): \n\n```{.mf}\ngit config --global user.email EMAIL-ADRESSE\ngit config --global user.name \"PRENOM et/NOM\"\n```\n  \n\n## Connection initiale avec une plateforme\n\n::: callout-note\n\n* Procédures de connection via **https** et **clé SSH** effectuées fin 2023/début 2024 et mai 2024 via le serveur margaux de l'Ined.  \n  * HTTPS (token/mdp):\n    * package `usethis`: github.\n    * package  `gitcreds`: github et gitlab.\n  * SSH: \n    * protocole: ed25519.\n\n* Mobile Ined:\n  * Connection https existantes pour Github et Gitlab => nouveaux token générés.\n  * Pas de connection SSH existante avec protocole ed25519. Création d'une nouvelle clé.\n\n* Serveur margaux Ined (mai 2024)\n  * Parti de zero.\n  * HTTPS: Nouveau token généré pour cette connection. \n  * Pas de connection SSH existante. Création d'une nouvelle clé avec protocole ed25519.\n  \n:::\n\n\n### Connection via un token/password {#sec-token}\n\n#### Github\n\n**Générer un Token**\n\n* Package `usethis`\n\n\n::: {.cell filename='Package usethis '}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\nlibrary(usethise)\n```\n:::\n\n\nEn exécutant la commande suivante, une fenêtre s'ouvre pour générer le token dans github.\n\n\n::: {.cell filename='Création d\\'un token'}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\n\n::: {.box_img}\n![](img2/token_github1.png){group=gh1}\n:::\n\n\n::: {.box_img}\n![](img2/token_github2.png){group=gh1}\n:::\n\n\nNote: au cas où... ce token n'est bien évidemment plus valide.  \n\n* Attention à la date d'expiration du token.\n  * Par défaut 30 jours, on peut augmenter la durée.\n  * La durée maximale est d'un an. \n* Cliquer en bas de la page sur **Generate token**.\n* On reçoit un mail à la création du token et quelques jours avant sa date d'expiration.\n\n**Ajouter le token dans RStudio**\n\n* Package **`gitcreds`**\n\n\n::: {.cell filename='Package gitcreds'}\n\n```{.r .cell-code}\n install.packages(\"gitcreds\")\n library(gitcreds)\n```\n:::\n\n\n* Par défaut il va sélectionner  Github, on peut toutefois renseigner l'adresse générique de la plateforme\n\n\n::: {.cell filename='Ajouter le token dans Rstudio'}\n\n```{.r .cell-code}\nlibrary(gitcreds)\ngitcreds_set(url = \"https://github.com\")\n```\n:::\n\n\nSi aucun token n'a déjà été ajouté, on colle directement dans la console la valeur du token généré dans l'étape précédente . \n\n```{.mf}\n? Enter password or token: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\nSi on change par la suite de token, plusieurs options sont disponibles:\n\n```{.mf}\n-> Your current credentials for 'https://github.com':\n\n  protocol: https\n  host    : github.com\n  username: PersonalAccessToken\n  password: <-- hidden -->\n\n-> What would you like to do? \n\n1: Keep these credentials\n2: Replace these credentials\n3: See the password / token\n```\n\n**L'option 2 permet de changer de token**.\n\n#### Gitlab\n\n**Générer un token**\n\nLe token/password est généré directement sur le compte Gitlab.\n\n**Edit profile** => **Acces Token** => **add new token**.\n\n\n\n:::: {layout=\"[30,-1,30,-1,30]\" layout-valign=\"bottom\"}  \n\n::: {.box_img}  \n![Edit profile](img2/token_gitlab1.png){group=gl1}\n:::\n::: {.box_img}    \n![Access token](img2/token_gitlab2.png){group=gl1}\n:::\n::: {.box_img}   \n![Personal access token](img2/token_gitlab3.png){group=gl1}\n:::\n:::\n\n:::: {layout=\"[20,-1,20,]\" layout-valign=\"bottom\"}  \n\n::: {.box_img}  \n![Sélection Read/write repository](img2/token_gitlab4.png){group=gl1}\n:::\n::: {.box_img}  \n![Récupérer le token](img2/token_gitlab5.png){group=gl1}\n:::\n::::\n\nOn peut accéder sur Github à la page de création des token en allant sur **Profile** {{< fa solid arrow-right >}} **Settings** (tout en bas) {{< fa solid arrow-right >}} **Developer Settings** (Menu vertical à gauche).\n\n\n**Ajouter le token dans RStudio**\n\n* Même procédure qu'avec Github avec le package **`gitcreds`**.\n* On devra explicitement indiquer l'adresse générique de Gitlab dans la fonction.\n\n\n::: {.cell filename='package gitcreds'}\n\n```{.r .cell-code}\ninstall.packages(\"gitcreds\")\nlibrary(gitcreds)\n```\n:::\n\n::: {.cell filename='Ajouter dans Rstudio le token'}\n\n```{.r .cell-code}\nlibrary(gitcreds)\ngitcreds_set(url = \"https://gitlab.com\")\n```\n:::\n\n\nSi aucun token n'est déjà été ajouté, on colle directement dans la console la valeur du token généré dans l'étape précédente . \n\n```{.mf}\nSélection : 2\n\n-> Removing current credentials...\n\n? Enter new password or token: \n```\n\n```{.mf}\n? Enter password or token: <Coller ici le token qui a été généré et copié dans gitlab>\n```\n\nSi on change par la suite de token, plusieurs options sont disponibles:\n\n```{.mf}\n-> Your current credentials for 'https://github.com':\n\n  protocol: https\n  host    : github.com\n  username: PersonalAccessToken\n  password: <-- hidden -->\n\n-> What would you like to do? \n\n1: Keep these credentials\n2: Replace these credentials\n3: See the password / toke\n```\n\n\n#### Vérifier la connection\n\nVous pouvez vérifier la connection en clonant un dépôt. Coller par exemple le lien suivant lors de la création du projet: \n\n```{.mf filename=\"Test dépôt Github\"}\nhttps://github.com/mthevenin/test_connection_formation.git\n```\n\n\n```{.mf filename=\"Test dépôt Gitlab\"}\nhttps://gitlab.com/mthevenin/test_connection_formation.git\n```\n\n\n\n\n### Via une clé de cryptage SSH\n\n[[:GIT SSH](https://en.wikipedia.org/wiki/Ssh-keygen)]{.nut}\n<br>\n\nProcédure un peu plus longue, mais à l'exception d'une étape la procédure est commune aux deux plateformes.\n\n* Je ne traiterai pas du sujet HTTPS (token) versus SSH (cryptage), mais visiblement les préférences que je peux lire à gauche et à droite penche plutôt vers le HTTPS. Je note néanmoins beaucoup plus de tutoriels pour la solution cryptée.   \n\n* On peut paramétrer et utiliser les deux techniques de sécurité, le choix de l'une ou l'autre se fera lors du clônage d'un dépôt distant.  \n\n* **Clé SSH**: repose sur un cryptage.\n  * Les protocoles de cryptage évolue dans le temps. C'est la quatrième et dernière génération qui est proposée par RStudio. \n  * La dernière génération est appelée **ed25519**. C'est la seule option dans RStudio.\n* Une même clé SSH peut-être utilisée pour Github et Gitlab.   \n\n\n#### Générer une clé  dans Rstudio  \n\n* **Tools** {{< fa solid turn-down >}}\n* **Global Options** {{< fa solid turn-down >}}\n* **Git/SVN** dans la barre de menu verticale {{< fa solid turn-down >}}\n* **Create SSH key**: On génère la clé sous la zône d'enregistrement {{< fa solid turn-down >}}\n* **View public key**: On visualise et récupère la clé SSH en la copiant {{< fa solid turn-down >}}\n\n\n:::: {layout=\"[50,-1,50]\" layout-valign=\"bottom\" }\n::: {.box_img}\n![Création de la clé SSH](img2/ssh_rstudio1.png){group=ssh1}\n:::\n::: {.box_img}\n![Récupération de la clé SSH](img2/ssh_rstudio2.png){group=ssh1}\n:::\n::::\n\n\n#### Github\n\n\n\n```{mermaid}\n%%| fig-width: 6.5\n\nflowchart LR\n  A(Avatar) --> B(Settings)\n  B --> C(SSH and GPH Keys)\n  C --> D(New SSH key)\n    D --> E(Coller la clé)\n    subgraph AJOUTER LA CLE\n    E --- F(Mettre un titre)\n    F --> G(ADD SSH KEY)\n    end\n```\n\n\n\n* Cliquer sur l'avatar à droite {{< fa solid turn-down >}}\n\n* Sur la barre verticale qui s'ouvre, aller sur **Settings** {{< fa solid turn-down >}}\n\n* Aller sur la page **SSH and GPH keys** {{< fa solid turn-down >}}\n\n* Aller sur **New SSH key** en haut à droite {{< fa solid turn-down >}}\n\n* Coller la clé générée dans RStudio, si on ajoute plusieurs clés, renseigner le titre pour identifier son rôle {{< fa solid turn-down >}}\n\n* Cliquer sur **Add SSH key**\n\n\n\n:::: {layout=\"[50,-1,50]\" layout-valign=\"bottom\" }\n::: {.box_img}\n![Aller sur l'avatar](img2/ssh_github1.png){group=gh2}\n::: \n::: {.box_img}\n![Aller sur settings](img2/ssh_github2.png){group=gh2}\n:::\n::::\n\n:::: {layout=\"[50,-1,50]\" layout-valign=\"bottom\" }\n::: {.box_img}\n![Page SSH et GPH keys](img2/ssh_github3.png){group=gh2}\n:::\n\n::: {.box_img}\n![Ajouter la clé](img2/ssh_github4.png){group=gh2}\n:::\n::::\n\n\n#### Gitlab\n\n\n\n```{mermaid}\n%%| fig-width: 6.5\n\nflowchart LR\n  A(Avatar) --> B(Preference)\n  B --> C(SSH KEY)\n  C --> D(Add new key)  \n    D --> E(Coller la clé)\n    subgraph AJOUTER LA CLE\n    E --- F(Mettre un titre)\n    F --- G(Changer la date d'expiration)\n    G --> H(ADD KEY)\n    end\n```\n\n\n\n* Cliquer sur votre avatar    {{< fa solid turn-down >}}\n\n* Aller sur *preference*      {{< fa solid turn-down >}}\n* Cliquer sur **SSH Keys**    {{< fa solid turn-down >}}\n\n* Cliquer sur **Add new key** {{< fa solid turn-down >}}\n\n* Coller votre clé générée dans RStudio {{< fa solid turn-down >}}\n\n* Ajouter un titre si vous comptez avoir plusieurs clés  {{< fa solid turn-down >}}\n\n* Modifier la date d'expiration (X si aucune expiration) {{< fa solid turn-down >}}\n\n* Cliquer sur **Add key**\n  \n  \n:::: {layout=\"[33,33,33]\" layout-valign=\"bottom\"}\n::: {.box_img}\n![Avatar=>Préférences](img2/ssh_gitlab1.png){group=gl2}\n:::\n::: {.box_img}\n![Aller dans SSH keys](img2/ssh_gitlab2.png){group=gl2}\n:::\n::: {.box_img}\n![Ajouter la clé](img2/ssh_gitlab3.png){group=gl2}\n:::\n::::\n\n\n\n#### Activer la clé dans RStudio \n\nDans le terminal:\n\n* Vérifier que l'authentification SSH fonctionne \n\n```{.mf}\neval $(ssh-agent -s)\n```\n\nOutput, par exemple: **`Agent pid 1463`**\n\n* Ajouter la clé \n\n```{.mf}\nssh-add ~/.ssh/id_ed25519\n```\n\nOutput: **`Identity added: /c/Users/thevenin_m/.ssh/id_ed25519 (ined\\thevenin_m@MOB0XXXX)`**\n\nOn peut enfin vérifier, que tout est ok avec les messages de bienvenue suivants:\n\n* Github:\n\n```{.mf}\nssh -T git@github.com\n```\n\n```{.mf}\nHi mthevenin! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n* Gitlab:\n\n```{.mf}\nssh -T git@gitlab.com\n```\n\n```{.mf}\nWelcome to GitLab, @mthevenin!\n```\n\n\n<br>\n\n#### Vérifier la connection\n\nVous pouvez vérifier la connection en clonant un dépôt. Coller par exemple le lien suivant lors de la création du projet: \n\n```{.mf filename=\"Test dépôt Github\"}\ngit@github.com:mthevenin/test_connection_formation.git\n```\n\n```{.mf filename=\"Test dépôt Gitlab\"}\ngit@gitlab.com:mthevenin/test_connection_formation.git\n```\n\n* Si lors du clonage le message suivant s'affiche, taper **yes**:\n\n::: {.box_img}\n![](img2/ssh1.png)\n:::\n\n",
    "supporting": [
      "021-git1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}