{
  "hash": "335f6fd1df24c05b30d3c0c795776c69",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Multiformat {#sec-conditionnel}\n\nNe pouvant pas compiler ce seul chapitre en plusieurs formats, une page mirroir de ce document avec des outputs pdf et docx est disponible dans la barre de navigation  [Autres {{< fa solid arrow-right >}} Multiformats] ou à cette adresse: <https://mthevenin.gitlab.io/quarto_multform/>.\n\n\n## Compilation en plusieurs formats dans un document\n\nDans le yaml:  \n\n```{.yaml}\n---\nformat: \n  html: default\n  pdf:  default\n  docx: default\n---\n```\n\n\n* Si plusieurs formats sont renseignés dans le yaml, à droite du document (margin) sous la table des matières un menu ***Other formats*** permet d'accéder directement aux autres formats spécifiés. \n\n* On peut supprimer ce menu dans le yaml avec l'option **`format-links: false`**\n\n* On peut effectuer une compilation multiformat avec le bouton **RENDER** ou via le terminal de RStudio.\n\n* Tant qu'on a pas compilé au moins une fois avec un format alternatif au html, Quarto ne compilera pas simultanément en plusieurs formats. Cela n'est d'ailleurs pas spécialement conseillé avec le PDF en raison de la durée de compilation bien plus longue que pour le format html ou docx^[Le code source étant du xml depuis 2007, d'où le x. Avant le code source des fichiers .doc était tout simplement en html].\n\n### Avec le bouton RENDER\n\nAprès avoir enregistré le fichier, on peut accéder directement à un sous menu permettant de choisir le format de sortie. C'était déjà le cas avec Rmarkdown.\n\n::: {.box_img}\n![Compilation multiformat avec le bouton **Render**](img3/img1.png){ fig-align=\"center\"}\n:::\n\n         \n* Dans le menu du bouton **Render**, on doit compiler au moins une fois le document pour les autres formats individuellement.\n  \n### Dans le terminal\n\nOn exécute la ou les lignes de commandes suivantes: \n\n**Compilation simultanée de tous les formats indiqués dans le yaml**:  \n\n```{.md}\nquarto render <nom_fichier.qmd>\n```\n\n**Compilation d'un format spécifique**:  \n\n```{.md}\nquarto render <nom_fichier.qmd> --to pdf\nquarto render <nom_fichier.qmd> --to docx\n```\n\n\n### Compilation multiformat avec un fichier **`_quarto.yaml`**.\n\n* Attention si la configuration du document se trouve dans un fichier `_quarto.yml` tous les formats seront compilés simultanéments lors du Render.  \n* On peut simplement privilégier un format spécifique en ajoutant une zône de commentaire à la ligne qui spécifie le format. Pour une seule compilation en html.\n\n```{.yaml}\n---\nformat: \n   html: default\n#  pdf:  default\n#  docx: default\n---\n```\n\n* On peut bien évidemment utiliser cette méthode pour désactiver temporairement la compilation avec des formats alternatifs lorsque le yaml se trouve directement dans le fichier qmd.\n\n\n## Contenu conditionnel {#sec-multiform}\n\n### Contenu non adapté à tous les formats\n\n* Certains éléments, par exemple de mise en page, ne sont pas adaptés à tous les formats\n* On pourrait dans une documentation comme celle-ci et éditée dans plusieurs formats, réserver des éléments explicatifs propre à chaque format au format qui sera affichier: attention si html on devra faire ça , attention si pdf on devra faire cela etc...\n\n* Quarto donne la possibilité contrôler la compilation du contenu format par format.\n* Attention toutefois,   pour un contrôle qui s'applique à une mise en page on va multiplier dans le code source du document un même type d'élement . En raison de cette contrainte, j'ai rapidement compris que je ne pourrais pas diffuser ce support simultanément en html et en pdf.\n\nOn prendra comme exemple une mise en page des images sous forme de vignettes à l'option lightbox.  \n\nTrès pratique pour le format dynamique html, le rendu pour des formats statiques (pdf,docx) ne sera en revanche pas satisfaisant.\n\n* En html, on génère et positionne 4 graphiques sur une même ligne. L'option lightbox permet d'agrandir les graphiques et de naviguer entre eux\n\n```{{r}}\n#| layout-ncol: 4\n#| lightbox:\n#|   group: cars\n\ndata(\"mtcars\")\ndf = mtcars\n\nplot(df$mpg, df$cyl)\nplot(df$mpg, df$wt)\nplot(df$mpg, df$qsec)\nplot(df$mpg, df$disp)\n```\n\n\n::: {.box_img}  \n\n::: {.cell layout-ncol=\"4\" lightbox='{\"group\":\"cars\"}'}\n::: {.cell-output-display}\n![](034-multiformat_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](034-multiformat_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](034-multiformat_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](034-multiformat_files/figure-html/unnamed-chunk-1-4.png){width=672}\n:::\n:::\n\n:::\n\n\n* En compilant simultanément en pdf, le rendu est le suivant: \n\n::: {.box_img}\n![](img3/img2.png){fig-align=\"center\"}\n:::\n\n\n### Contrôler le contenu affiché {#sec-multiform}\n\n* Quarto a implémenté des classes css qui permettent de contrôler le contenu qui sera affiché par type de format:\n  * **`{.content-visible <sélection format>}`**\n  * **`{.content-hidden  <sélection format>}`**\n* Les options de sélection:\n  * **`when-format=\"type_format\"`**\n  * **`unless-format=\"type_format\"`**  \n* [[Documentation site officiel]](https://quarto.org/docs/authoring/conditional.html)\n\nDans notre exemple:\n* L'affichage des graphiques sous forme de vignettes sera réservé au format html\n* Pour les formats statiques, les graphiques seront affichés à leur taille réelle, les uns après les autres.\n* On devra renseigner le programme deux fois en modifiant les options:\n\n<br>\n\n* **Pour le format html [identique plus haut]**:\n  * `{.content-visible when-format=\"html\"}`\n\n\n\n\n````{.default}\n::: {.content-visible when-format=\"html\"}\n\n```{r}\n#| layout-ncol: 4\n#| lightbox:\n#|   group: cars\n\ndata(\"mtcars\")\ndf = mtcars\n\nplot(df$mpg, df$cyl)\nplot(df$mpg, df$wt)\nplot(df$mpg, df$qsec)\nplot(df$mpg, df$disp)\n```\n:::\n````\n\n::: {.content-visible when-format=\"html\"}\n::: {.box_img}\n\n::: {.cell layout-ncol=\"4\" lightbox='{\"group\":\"cars\"}'}\n::: {.cell-output-display}\n![](034-multiformat_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](034-multiformat_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](034-multiformat_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](034-multiformat_files/figure-html/unnamed-chunk-3-4.png){width=672}\n:::\n:::\n\n:::\n:::\n\n* **Pour les formats statiques pdf,docx**:\n    * `{.content-hidden when-format=\"html\"}`\n\n\n\n\n````{.default}\n\n::: {.content-hidden when-format=\"html\" }\n\n```{r}\ndata(\"mtcars\")\ndf = mtcars\n\nplot(df$mpg, df$cyl)\nplot(df$mpg, df$wt)\nplot(df$mpg, df$qsec)\nplot(df$mpg, df$disp)\n```\n:::\n````\n\n\n:::: {layout=\"[33,-1,33,-1,33]\"}\n::: {.box_img}\n![Pdf page 1](img3/img3.png){group=\"cond\"}  \n:::\n::: {.box_img}\n![Pdf page 2](img3/img4.png){group=\"cond\"}  \n:::\n::: {.box_img}\n![Pdf page 3](img3/img5.png){group=\"cond\"}\n:::\n::::\n\n\n",
    "supporting": [
      "034-multiformat_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}